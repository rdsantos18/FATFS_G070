
FATFS_G070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003248  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000518  20000000  08003390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000660  20000518  080038a8  00020518  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000b78  080038a8  00020b78  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013ea9  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003269  00000000  00000000  000343e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b40  00000000  00000000  00037658  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f38  00000000  00000000  00038198  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006812  00000000  00000000  000390d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000425f  00000000  00000000  0003f8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00043b41  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000021b8  00000000  00000000  00043bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000766a  00000000  00000000  00045d78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000518 	.word	0x20000518
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080032e8 	.word	0x080032e8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000051c 	.word	0x2000051c
 80000fc:	080032e8 	.word	0x080032e8

08000100 <__gnu_thumb1_case_uqi>:
 8000100:	b402      	push	{r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0049      	lsls	r1, r1, #1
 8000108:	5c09      	ldrb	r1, [r1, r0]
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	448e      	add	lr, r1
 800010e:	bc02      	pop	{r1}
 8000110:	4770      	bx	lr
 8000112:	46c0      	nop			; (mov r8, r8)

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000416:	2610      	movs	r6, #16
{
 8000418:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	2234      	movs	r2, #52	; 0x34
 800041c:	2100      	movs	r1, #0
 800041e:	a80b      	add	r0, sp, #44	; 0x2c
 8000420:	f002 fe2e 	bl	8003080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	0032      	movs	r2, r6
 8000426:	2100      	movs	r1, #0
 8000428:	4668      	mov	r0, sp
 800042a:	f002 fe29 	bl	8003080 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800042e:	221c      	movs	r2, #28
 8000430:	2100      	movs	r1, #0
 8000432:	a804      	add	r0, sp, #16
 8000434:	f002 fe24 	bl	8003080 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000438:	2080      	movs	r0, #128	; 0x80
 800043a:	0080      	lsls	r0, r0, #2
 800043c:	f001 f884 	bl	8001548 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000440:	2118      	movs	r1, #24
 8000442:	4a18      	ldr	r2, [pc, #96]	; (80004a4 <SystemClock_Config+0x90>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000444:	2502      	movs	r5, #2
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000446:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000448:	2400      	movs	r4, #0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800044a:	438b      	bics	r3, r1
 800044c:	65d3      	str	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800044e:	2305      	movs	r3, #5
 8000450:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000452:	23a0      	movs	r3, #160	; 0xa0
 8000454:	02db      	lsls	r3, r3, #11
 8000456:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000458:	2301      	movs	r3, #1
 800045a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800045c:	195b      	adds	r3, r3, r5
 800045e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	029b      	lsls	r3, r3, #10
 8000464:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000466:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800046a:	059b      	lsls	r3, r3, #22
 800046c:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000470:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000472:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000474:	f001 f892 	bl	800159c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	2307      	movs	r3, #7
 800047a:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800047c:	2380      	movs	r3, #128	; 0x80

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047e:	0029      	movs	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000480:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000482:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000484:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000486:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048a:	f001 faed 	bl	8001a68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <SystemClock_Config+0x94>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000490:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 8000492:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	005b      	lsls	r3, r3, #1
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000498:	9406      	str	r4, [sp, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800049a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049c:	f001 fba6 	bl	8001bec <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80004a0:	b018      	add	sp, #96	; 0x60
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	00020002 	.word	0x00020002

080004ac <main>:
{
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80004b0:	f000 fea4 	bl	80011fc <HAL_Init>
  SystemClock_Config();
 80004b4:	f7ff ffae 	bl	8000414 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	2214      	movs	r2, #20
 80004ba:	2100      	movs	r1, #0
 80004bc:	a805      	add	r0, sp, #20
 80004be:	f002 fddf 	bl	8003080 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	2004      	movs	r0, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	2401      	movs	r4, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c6:	4b42      	ldr	r3, [pc, #264]	; (80005d0 <main+0x124>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c8:	2508      	movs	r5, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004cc:	4301      	orrs	r1, r0
 80004ce:	6359      	str	r1, [r3, #52]	; 0x34
 80004d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004d2:	4002      	ands	r2, r0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004da:	301c      	adds	r0, #28
 80004dc:	4301      	orrs	r1, r0
 80004de:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	2102      	movs	r1, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004e4:	4002      	ands	r2, r0
 80004e6:	9201      	str	r2, [sp, #4]
 80004e8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80004ec:	4839      	ldr	r0, [pc, #228]	; (80005d4 <main+0x128>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4322      	orrs	r2, r4
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
 80004f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004f4:	4022      	ands	r2, r4
 80004f6:	9202      	str	r2, [sp, #8]
 80004f8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004fc:	432a      	orrs	r2, r5
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000502:	402a      	ands	r2, r5
 8000504:	9203      	str	r2, [sp, #12]
 8000506:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800050a:	430a      	orrs	r2, r1
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
 800050e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	400b      	ands	r3, r1
 8000514:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000516:	313e      	adds	r1, #62	; 0x3e
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000518:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800051a:	f001 f80f 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800051e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000524:	a905      	add	r1, sp, #20
 8000526:	482b      	ldr	r0, [pc, #172]	; (80005d4 <main+0x128>)
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000528:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800052e:	f000 fee7 	bl	8001300 <HAL_GPIO_Init>
  hrtc.Instance = RTC;
 8000532:	4829      	ldr	r0, [pc, #164]	; (80005d8 <main+0x12c>)
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <main+0x130>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000536:	6084      	str	r4, [r0, #8]
  hrtc.Instance = RTC;
 8000538:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 800053a:	237f      	movs	r3, #127	; 0x7f
 800053c:	60c3      	str	r3, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 800053e:	3380      	adds	r3, #128	; 0x80
 8000540:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	6203      	str	r3, [r0, #32]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000548:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800054a:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800054c:	61c4      	str	r4, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800054e:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000550:	f001 fc5e 	bl	8001e10 <HAL_RTC_Init>
  hspi1.Instance = SPI1;
 8000554:	4822      	ldr	r0, [pc, #136]	; (80005e0 <main+0x134>)
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <main+0x138>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000558:	61c5      	str	r5, [r0, #28]
  hspi1.Instance = SPI1;
 800055a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800055c:	2382      	movs	r3, #130	; 0x82
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000562:	23e0      	movs	r3, #224	; 0xe0
 8000564:	00db      	lsls	r3, r3, #3
 8000566:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 800056e:	3bfa      	subs	r3, #250	; 0xfa
 8000570:	3bff      	subs	r3, #255	; 0xff
 8000572:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000574:	6345      	str	r5, [r0, #52]	; 0x34
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000576:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000578:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800057a:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800057c:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800057e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000580:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000582:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000584:	f001 fd16 	bl	8001fb4 <HAL_SPI_Init>
  huart2.Instance = USART2;
 8000588:	4d17      	ldr	r5, [pc, #92]	; (80005e8 <main+0x13c>)
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <main+0x140>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800058c:	0028      	movs	r0, r5
  huart2.Instance = USART2;
 800058e:	602b      	str	r3, [r5, #0]
  huart2.Init.BaudRate = 115200;
 8000590:	23e1      	movs	r3, #225	; 0xe1
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	606b      	str	r3, [r5, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	60ab      	str	r3, [r5, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800059c:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800059e:	60ec      	str	r4, [r5, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a0:	616b      	str	r3, [r5, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a2:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a4:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a6:	61ec      	str	r4, [r5, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005a8:	622c      	str	r4, [r5, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005aa:	626c      	str	r4, [r5, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ac:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ae:	f002 f97d 	bl	80028ac <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005b2:	0021      	movs	r1, r4
 80005b4:	0028      	movs	r0, r5
 80005b6:	f002 fa07 	bl	80029c8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005ba:	0021      	movs	r1, r4
 80005bc:	0028      	movs	r0, r5
 80005be:	f002 fa25 	bl	8002a0c <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80005c2:	0028      	movs	r0, r5
 80005c4:	f002 f9e4 	bl	8002990 <HAL_UARTEx_DisableFifoMode>
  if (MX_FATFS_Init() != APP_OK) {
 80005c8:	f002 fa44 	bl	8002a54 <MX_FATFS_Init>
 80005cc:	e7fe      	b.n	80005cc <main+0x120>
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40021000 	.word	0x40021000
 80005d4:	50000c00 	.word	0x50000c00
 80005d8:	200005e4 	.word	0x200005e4
 80005dc:	40002800 	.word	0x40002800
 80005e0:	20000610 	.word	0x20000610
 80005e4:	40013000 	.word	0x40013000
 80005e8:	20000674 	.word	0x20000674
 80005ec:	40004400 	.word	0x40004400

080005f0 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  None
  * @retval the value read
  */
uint8_t SD_ReadData(void)
{
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2408      	movs	r4, #8
  uint8_t timeout = 0x08;
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80005f4:	20ff      	movs	r0, #255	; 0xff
 80005f6:	f000 fd65 	bl	80010c4 <SD_IO_WriteByte>
    timeout--;

  }while ((readvalue == SD_DUMMY_BYTE) && timeout);
 80005fa:	28ff      	cmp	r0, #255	; 0xff
 80005fc:	d103      	bne.n	8000606 <SD_ReadData+0x16>
 80005fe:	3c01      	subs	r4, #1
 8000600:	b2e4      	uxtb	r4, r4
 8000602:	2c00      	cmp	r4, #0
 8000604:	d1f6      	bne.n	80005f4 <SD_ReadData+0x4>

  /* Right response got */
  return readvalue;
}
 8000606:	bd10      	pop	{r4, pc}

08000608 <SD_SendCmd>:
{
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	b087      	sub	sp, #28
 800060c:	0004      	movs	r4, r0
 800060e:	a80c      	add	r0, sp, #48	; 0x30
 8000610:	7805      	ldrb	r5, [r0, #0]
  frame[0] = (Cmd | 0x40);         /* Construct byte 1 */
 8000612:	2040      	movs	r0, #64	; 0x40
 8000614:	4301      	orrs	r1, r0
 8000616:	a802      	add	r0, sp, #8
 8000618:	7001      	strb	r1, [r0, #0]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 800061a:	0e11      	lsrs	r1, r2, #24
 800061c:	7041      	strb	r1, [r0, #1]
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 800061e:	0c11      	lsrs	r1, r2, #16
 8000620:	7081      	strb	r1, [r0, #2]
  frame[4] = (uint8_t)(Arg);       /* Construct byte 5 */
 8000622:	7102      	strb	r2, [r0, #4]
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8000624:	0a11      	lsrs	r1, r2, #8
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8000626:	2201      	movs	r2, #1
 8000628:	4313      	orrs	r3, r2
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 800062a:	70c1      	strb	r1, [r0, #3]
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 800062c:	7143      	strb	r3, [r0, #5]
  SD_IO_CSState(0);
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fd36 	bl	80010a0 <SD_IO_CSState>
  SD_IO_WriteReadData(frame, frameout, SD_CMD_LENGTH); /* Send the Cmd bytes */
 8000634:	2206      	movs	r2, #6
 8000636:	a904      	add	r1, sp, #16
 8000638:	a802      	add	r0, sp, #8
 800063a:	f000 fd3f 	bl	80010bc <SD_IO_WriteReadData>
  switch(Answer)
 800063e:	2d05      	cmp	r5, #5
 8000640:	d84a      	bhi.n	80006d8 <SD_SendCmd+0xd0>
 8000642:	0028      	movs	r0, r5
 8000644:	f7ff fd5c 	bl	8000100 <__gnu_thumb1_case_uqi>
 8000648:	352c1403 	.word	0x352c1403
 800064c:	3548      	.short	0x3548
    retr.r1 = SD_ReadData();
 800064e:	f7ff ffcf 	bl	80005f0 <SD_ReadData>
 8000652:	0007      	movs	r7, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8000654:	20ff      	movs	r0, #255	; 0xff
 8000656:	0005      	movs	r5, r0
 8000658:	0006      	movs	r6, r0
 800065a:	9001      	str	r0, [sp, #4]
  return retr;
 800065c:	466b      	mov	r3, sp
 800065e:	7120      	strb	r0, [r4, #4]
}
 8000660:	0020      	movs	r0, r4
  return retr;
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	7027      	strb	r7, [r4, #0]
 8000666:	7066      	strb	r6, [r4, #1]
 8000668:	70a5      	strb	r5, [r4, #2]
 800066a:	70e3      	strb	r3, [r4, #3]
}
 800066c:	b007      	add	sp, #28
 800066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    retr.r1 = SD_ReadData();
 8000670:	f7ff ffbe 	bl	80005f0 <SD_ReadData>
 8000674:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000676:	20ff      	movs	r0, #255	; 0xff
 8000678:	f000 fd24 	bl	80010c4 <SD_IO_WriteByte>
 800067c:	0006      	movs	r6, r0
    SD_IO_CSState(1);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fd0e 	bl	80010a0 <SD_IO_CSState>
    HAL_Delay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f000 fddf 	bl	8001248 <HAL_Delay>
    SD_IO_CSState(0);
 800068a:	2000      	movs	r0, #0
 800068c:	f000 fd08 	bl	80010a0 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 8000690:	20ff      	movs	r0, #255	; 0xff
 8000692:	f000 fd17 	bl	80010c4 <SD_IO_WriteByte>
 8000696:	28ff      	cmp	r0, #255	; 0xff
 8000698:	d1fa      	bne.n	8000690 <SD_SendCmd+0x88>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 800069a:	9001      	str	r0, [sp, #4]
 800069c:	0005      	movs	r5, r0
    break;
 800069e:	e7dd      	b.n	800065c <SD_SendCmd+0x54>
    retr.r1 = SD_ReadData();
 80006a0:	f7ff ffa6 	bl	80005f0 <SD_ReadData>
 80006a4:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80006a6:	20ff      	movs	r0, #255	; 0xff
 80006a8:	f000 fd0c 	bl	80010c4 <SD_IO_WriteByte>
 80006ac:	0006      	movs	r6, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 80006ae:	20ff      	movs	r0, #255	; 0xff
 80006b0:	e7f3      	b.n	800069a <SD_SendCmd+0x92>
    retr.r1 = SD_ReadData();
 80006b2:	f7ff ff9d 	bl	80005f0 <SD_ReadData>
 80006b6:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80006b8:	20ff      	movs	r0, #255	; 0xff
 80006ba:	f000 fd03 	bl	80010c4 <SD_IO_WriteByte>
 80006be:	0006      	movs	r6, r0
    retr.r3 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80006c0:	20ff      	movs	r0, #255	; 0xff
 80006c2:	f000 fcff 	bl	80010c4 <SD_IO_WriteByte>
 80006c6:	0005      	movs	r5, r0
    retr.r4 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80006c8:	20ff      	movs	r0, #255	; 0xff
 80006ca:	f000 fcfb 	bl	80010c4 <SD_IO_WriteByte>
 80006ce:	9001      	str	r0, [sp, #4]
    retr.r5 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80006d0:	20ff      	movs	r0, #255	; 0xff
 80006d2:	f000 fcf7 	bl	80010c4 <SD_IO_WriteByte>
    break;
 80006d6:	e7c1      	b.n	800065c <SD_SendCmd+0x54>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 80006d8:	20ff      	movs	r0, #255	; 0xff
 80006da:	9001      	str	r0, [sp, #4]
 80006dc:	0005      	movs	r5, r0
 80006de:	0006      	movs	r6, r0
 80006e0:	0007      	movs	r7, r0
 80006e2:	e7bb      	b.n	800065c <SD_SendCmd+0x54>

080006e4 <SD_WaitData.constprop.0>:
/**
  * @brief  Waits a data from the SD card
  * @param  data : Expected data from the SD card
  * @retval BSP_SD_OK or BSP_SD_TIMEOUT
  */
uint8_t SD_WaitData(uint8_t data)
 80006e4:	b510      	push	{r4, lr}
{
  uint16_t timeout = 0xFFFF;
 80006e6:	4c08      	ldr	r4, [pc, #32]	; (8000708 <SD_WaitData.constprop.0+0x24>)
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */

  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80006e8:	20ff      	movs	r0, #255	; 0xff
 80006ea:	f000 fceb 	bl	80010c4 <SD_IO_WriteByte>
    timeout--;
 80006ee:	3c01      	subs	r4, #1
 80006f0:	b2a4      	uxth	r4, r4
  }while ((readvalue != data) && timeout);
 80006f2:	28fe      	cmp	r0, #254	; 0xfe
 80006f4:	d003      	beq.n	80006fe <SD_WaitData.constprop.0+0x1a>
 80006f6:	2c00      	cmp	r4, #0
 80006f8:	d1f6      	bne.n	80006e8 <SD_WaitData.constprop.0+0x4>

  if (timeout == 0)
  {
    /* After time out */
    return BSP_SD_TIMEOUT;
 80006fa:	2002      	movs	r0, #2
  }

  /* Right response got */
  return BSP_SD_OK;
}
 80006fc:	bd10      	pop	{r4, pc}
  return BSP_SD_OK;
 80006fe:	4260      	negs	r0, r4
 8000700:	4160      	adcs	r0, r4
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	e7fa      	b.n	80006fc <SD_WaitData.constprop.0+0x18>
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	0000ffff 	.word	0x0000ffff

0800070c <BSP_SD_Init>:
{
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	b089      	sub	sp, #36	; 0x24
  SD_IO_Init();
 8000710:	f000 fce6 	bl	80010e0 <SD_IO_Init>
  SdStatus = SD_PRESENT;
 8000714:	2201      	movs	r2, #1
  __IO uint8_t counter = 0;
 8000716:	250f      	movs	r5, #15
  SdStatus = SD_PRESENT;
 8000718:	4b5b      	ldr	r3, [pc, #364]	; (8000888 <BSP_SD_Init+0x17c>)
 800071a:	701a      	strb	r2, [r3, #0]
  __IO uint8_t counter = 0;
 800071c:	ab02      	add	r3, sp, #8
 800071e:	18ed      	adds	r5, r5, r3
 8000720:	2300      	movs	r3, #0
 8000722:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8000724:	2100      	movs	r1, #0
    counter++;
 8000726:	782b      	ldrb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8000728:	ac06      	add	r4, sp, #24
    counter++;
 800072a:	3301      	adds	r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8000730:	000a      	movs	r2, r1
 8000732:	2395      	movs	r3, #149	; 0x95
 8000734:	9100      	str	r1, [sp, #0]
 8000736:	0020      	movs	r0, r4
 8000738:	f7ff ff66 	bl	8000608 <SD_SendCmd>
    SD_IO_CSState(1);
 800073c:	2001      	movs	r0, #1
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 800073e:	7827      	ldrb	r7, [r4, #0]
    SD_IO_CSState(1);
 8000740:	f000 fcae 	bl	80010a0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000744:	20ff      	movs	r0, #255	; 0xff
 8000746:	f000 fcbd 	bl	80010c4 <SD_IO_WriteByte>
    if(counter >= SD_MAX_TRY)
 800074a:	782b      	ldrb	r3, [r5, #0]
 800074c:	2b63      	cmp	r3, #99	; 0x63
 800074e:	d903      	bls.n	8000758 <BSP_SD_Init+0x4c>
      return BSP_SD_ERROR;
 8000750:	2501      	movs	r5, #1
}
 8000752:	0028      	movs	r0, r5
 8000754:	b009      	add	sp, #36	; 0x24
 8000756:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while(response.r1 != SD_R1_IN_IDLE_STATE);
 8000758:	2f01      	cmp	r7, #1
 800075a:	d1e3      	bne.n	8000724 <BSP_SD_Init+0x18>
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87, SD_ANSWER_R7_EXPECTED);
 800075c:	2305      	movs	r3, #5
 800075e:	22d5      	movs	r2, #213	; 0xd5
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	3382      	adds	r3, #130	; 0x82
 8000766:	2108      	movs	r1, #8
 8000768:	0020      	movs	r0, r4
 800076a:	f7ff ff4d 	bl	8000608 <SD_SendCmd>
 800076e:	7825      	ldrb	r5, [r4, #0]
  SD_IO_CSState(1);
 8000770:	0038      	movs	r0, r7
 8000772:	f000 fc95 	bl	80010a0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000776:	20ff      	movs	r0, #255	; 0xff
 8000778:	f000 fca4 	bl	80010c4 <SD_IO_WriteByte>
  if((response.r1  & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 800077c:	076b      	lsls	r3, r5, #29
 800077e:	d523      	bpl.n	80007c8 <BSP_SD_Init+0xbc>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000780:	26ff      	movs	r6, #255	; 0xff
 8000782:	2500      	movs	r5, #0
 8000784:	0033      	movs	r3, r6
 8000786:	002a      	movs	r2, r5
 8000788:	2137      	movs	r1, #55	; 0x37
 800078a:	0020      	movs	r0, r4
 800078c:	9500      	str	r5, [sp, #0]
 800078e:	f7ff ff3b 	bl	8000608 <SD_SendCmd>
      SD_IO_CSState(1);
 8000792:	0038      	movs	r0, r7
 8000794:	f000 fc84 	bl	80010a0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000798:	0030      	movs	r0, r6
 800079a:	f000 fc93 	bl	80010c4 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 800079e:	002a      	movs	r2, r5
 80007a0:	2129      	movs	r1, #41	; 0x29
 80007a2:	0033      	movs	r3, r6
 80007a4:	0020      	movs	r0, r4
 80007a6:	9500      	str	r5, [sp, #0]
 80007a8:	f7ff ff2e 	bl	8000608 <SD_SendCmd>
 80007ac:	7823      	ldrb	r3, [r4, #0]
      SD_IO_CSState(1);
 80007ae:	0038      	movs	r0, r7
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80007b0:	9303      	str	r3, [sp, #12]
      SD_IO_CSState(1);
 80007b2:	f000 fc75 	bl	80010a0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80007b6:	0030      	movs	r0, r6
 80007b8:	f000 fc84 	bl	80010c4 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 80007bc:	9b03      	ldr	r3, [sp, #12]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d0df      	beq.n	8000782 <BSP_SD_Init+0x76>
    flag_SDHC = 0;
 80007c2:	4b32      	ldr	r3, [pc, #200]	; (800088c <BSP_SD_Init+0x180>)
 80007c4:	801d      	strh	r5, [r3, #0]
 80007c6:	e7c4      	b.n	8000752 <BSP_SD_Init+0x46>
  else if(response.r1 == SD_R1_IN_IDLE_STATE)
 80007c8:	2d01      	cmp	r5, #1
 80007ca:	d1c1      	bne.n	8000750 <BSP_SD_Init+0x44>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80007cc:	27ff      	movs	r7, #255	; 0xff
 80007ce:	2600      	movs	r6, #0
 80007d0:	003b      	movs	r3, r7
 80007d2:	0032      	movs	r2, r6
 80007d4:	2137      	movs	r1, #55	; 0x37
 80007d6:	9600      	str	r6, [sp, #0]
 80007d8:	0020      	movs	r0, r4
 80007da:	f7ff ff15 	bl	8000608 <SD_SendCmd>
      SD_IO_CSState(1);
 80007de:	0028      	movs	r0, r5
 80007e0:	f000 fc5e 	bl	80010a0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80007e4:	0038      	movs	r0, r7
 80007e6:	f000 fc6d 	bl	80010c4 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	9600      	str	r6, [sp, #0]
 80007ee:	003b      	movs	r3, r7
 80007f0:	05d2      	lsls	r2, r2, #23
 80007f2:	2129      	movs	r1, #41	; 0x29
 80007f4:	0020      	movs	r0, r4
 80007f6:	f7ff ff07 	bl	8000608 <SD_SendCmd>
 80007fa:	7826      	ldrb	r6, [r4, #0]
      SD_IO_CSState(1);
 80007fc:	0028      	movs	r0, r5
 80007fe:	f000 fc4f 	bl	80010a0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000802:	0038      	movs	r0, r7
 8000804:	f000 fc5e 	bl	80010c4 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8000808:	2e01      	cmp	r6, #1
 800080a:	d0e0      	beq.n	80007ce <BSP_SD_Init+0xc2>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 800080c:	25ff      	movs	r5, #255	; 0xff
    if((response.r1 & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 800080e:	0773      	lsls	r3, r6, #29
 8000810:	d417      	bmi.n	8000842 <BSP_SD_Init+0x136>
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00000000, 0xFF, SD_ANSWER_R3_EXPECTED);
 8000812:	2303      	movs	r3, #3
 8000814:	2200      	movs	r2, #0
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	213a      	movs	r1, #58	; 0x3a
 800081a:	33fc      	adds	r3, #252	; 0xfc
 800081c:	0020      	movs	r0, r4
 800081e:	f7ff fef3 	bl	8000608 <SD_SendCmd>
 8000822:	7825      	ldrb	r5, [r4, #0]
    SD_IO_CSState(1);
 8000824:	2001      	movs	r0, #1
 8000826:	f000 fc3b 	bl	80010a0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800082a:	20ff      	movs	r0, #255	; 0xff
 800082c:	f000 fc4a 	bl	80010c4 <SD_IO_WriteByte>
    if(response.r1 != SD_R1_NO_ERROR)
 8000830:	2d00      	cmp	r5, #0
 8000832:	d000      	beq.n	8000836 <BSP_SD_Init+0x12a>
 8000834:	e78c      	b.n	8000750 <BSP_SD_Init+0x44>
    flag_SDHC = (response.r2 & 0x40) >> 6;
 8000836:	7863      	ldrb	r3, [r4, #1]
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <BSP_SD_Init+0x180>)
 800083a:	065b      	lsls	r3, r3, #25
 800083c:	0fdb      	lsrs	r3, r3, #31
 800083e:	8013      	strh	r3, [r2, #0]
 8000840:	e787      	b.n	8000752 <BSP_SD_Init+0x46>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000842:	2600      	movs	r6, #0
 8000844:	002b      	movs	r3, r5
 8000846:	0032      	movs	r2, r6
 8000848:	2137      	movs	r1, #55	; 0x37
 800084a:	0020      	movs	r0, r4
 800084c:	9600      	str	r6, [sp, #0]
 800084e:	f7ff fedb 	bl	8000608 <SD_SendCmd>
 8000852:	7827      	ldrb	r7, [r4, #0]
        SD_IO_CSState(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f000 fc23 	bl	80010a0 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 800085a:	0028      	movs	r0, r5
 800085c:	f000 fc32 	bl	80010c4 <SD_IO_WriteByte>
        if(response.r1 != SD_R1_IN_IDLE_STATE)
 8000860:	2f01      	cmp	r7, #1
 8000862:	d000      	beq.n	8000866 <BSP_SD_Init+0x15a>
 8000864:	e774      	b.n	8000750 <BSP_SD_Init+0x44>
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000866:	0032      	movs	r2, r6
 8000868:	9600      	str	r6, [sp, #0]
 800086a:	002b      	movs	r3, r5
 800086c:	2129      	movs	r1, #41	; 0x29
 800086e:	0020      	movs	r0, r4
 8000870:	f7ff feca 	bl	8000608 <SD_SendCmd>
 8000874:	7826      	ldrb	r6, [r4, #0]
        SD_IO_CSState(1);
 8000876:	0038      	movs	r0, r7
 8000878:	f000 fc12 	bl	80010a0 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 800087c:	0028      	movs	r0, r5
 800087e:	f000 fc21 	bl	80010c4 <SD_IO_WriteByte>
      while(response.r1 == SD_R1_IN_IDLE_STATE);
 8000882:	2e01      	cmp	r6, #1
 8000884:	d0dd      	beq.n	8000842 <BSP_SD_Init+0x136>
 8000886:	e7c4      	b.n	8000812 <BSP_SD_Init+0x106>
 8000888:	20000534 	.word	0x20000534
 800088c:	20000536 	.word	0x20000536

08000890 <BSP_SD_GetCardInfo>:
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000890:	2200      	movs	r2, #0
{
 8000892:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000894:	b08b      	sub	sp, #44	; 0x2c
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000896:	ad04      	add	r5, sp, #16
 8000898:	23ff      	movs	r3, #255	; 0xff
{
 800089a:	0004      	movs	r4, r0
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 800089c:	9200      	str	r2, [sp, #0]
 800089e:	2109      	movs	r1, #9
 80008a0:	0028      	movs	r0, r5
 80008a2:	f7ff feb1 	bl	8000608 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 80008a6:	782b      	ldrb	r3, [r5, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d030      	beq.n	800090e <BSP_SD_GetCardInfo+0x7e>
  uint8_t retr = BSP_SD_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	9303      	str	r3, [sp, #12]
  SD_IO_CSState(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f000 fbf5 	bl	80010a0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80008b6:	20ff      	movs	r0, #255	; 0xff
 80008b8:	f000 fc04 	bl	80010c4 <SD_IO_WriteByte>
  response = SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80008bc:	2200      	movs	r2, #0
 80008be:	ad04      	add	r5, sp, #16
 80008c0:	23ff      	movs	r3, #255	; 0xff
 80008c2:	9200      	str	r2, [sp, #0]
 80008c4:	210a      	movs	r1, #10
 80008c6:	0028      	movs	r0, r5
 80008c8:	f7ff fe9e 	bl	8000608 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 80008cc:	782b      	ldrb	r3, [r5, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d100      	bne.n	80008d4 <BSP_SD_GetCardInfo+0x44>
 80008d2:	e12b      	b.n	8000b2c <BSP_SD_GetCardInfo+0x29c>
  uint8_t retr = BSP_SD_ERROR;
 80008d4:	2601      	movs	r6, #1
  SD_IO_CSState(1);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f000 fbe2 	bl	80010a0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80008dc:	20ff      	movs	r0, #255	; 0xff
 80008de:	f000 fbf1 	bl	80010c4 <SD_IO_WriteByte>
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 80008e2:	9b03      	ldr	r3, [sp, #12]
 80008e4:	431e      	orrs	r6, r3
  if(flag_SDHC == 1 )
 80008e6:	4bca      	ldr	r3, [pc, #808]	; (8000c10 <BSP_SD_GetCardInfo+0x380>)
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 80008e8:	b2f0      	uxtb	r0, r6
  if(flag_SDHC == 1 )
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d000      	beq.n	80008f2 <BSP_SD_GetCardInfo+0x62>
 80008f0:	e17b      	b.n	8000bea <BSP_SD_GetCardInfo+0x35a>
    pCardInfo->LogBlockSize = 512;
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	63e3      	str	r3, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 512;
 80008f8:	6363      	str	r3, [r4, #52]	; 0x34
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v2.DeviceSize + 1) * 1024 * pCardInfo->LogBlockSize;
 80008fa:	68a3      	ldr	r3, [r4, #8]
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	0a9b      	lsrs	r3, r3, #10
 8000900:	3301      	adds	r3, #1
 8000902:	04db      	lsls	r3, r3, #19
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8000904:	6323      	str	r3, [r4, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 8000906:	0a5b      	lsrs	r3, r3, #9
 8000908:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800090a:	b00b      	add	sp, #44	; 0x2c
 800090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 800090e:	f7ff fee9 	bl	80006e4 <SD_WaitData.constprop.0>
 8000912:	9003      	str	r0, [sp, #12]
 8000914:	2800      	cmp	r0, #0
 8000916:	d1c9      	bne.n	80008ac <BSP_SD_GetCardInfo+0x1c>
 8000918:	0006      	movs	r6, r0
        CSD_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800091a:	20ff      	movs	r0, #255	; 0xff
 800091c:	f000 fbd2 	bl	80010c4 <SD_IO_WriteByte>
 8000920:	ad06      	add	r5, sp, #24
 8000922:	5570      	strb	r0, [r6, r5]
 8000924:	3601      	adds	r6, #1
      for (counter = 0; counter < 16; counter++)
 8000926:	2e10      	cmp	r6, #16
 8000928:	d1f7      	bne.n	800091a <BSP_SD_GetCardInfo+0x8a>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	f000 fbca 	bl	80010c4 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000930:	20ff      	movs	r0, #255	; 0xff
 8000932:	f000 fbc7 	bl	80010c4 <SD_IO_WriteByte>
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8000936:	2001      	movs	r0, #1
      Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 8000938:	782b      	ldrb	r3, [r5, #0]
      Csd->Reserved1 =  CSD_Tab[0] & 0x3F;
 800093a:	009a      	lsls	r2, r3, #2
 800093c:	099b      	lsrs	r3, r3, #6
 800093e:	4313      	orrs	r3, r2
 8000940:	7023      	strb	r3, [r4, #0]
      Csd->TAAC = CSD_Tab[1];
 8000942:	786b      	ldrb	r3, [r5, #1]
 8000944:	7063      	strb	r3, [r4, #1]
      Csd->NSAC = CSD_Tab[2];
 8000946:	78ab      	ldrb	r3, [r5, #2]
 8000948:	70a3      	strb	r3, [r4, #2]
      Csd->MaxBusClkFrec = CSD_Tab[3];
 800094a:	78eb      	ldrb	r3, [r5, #3]
 800094c:	70e3      	strb	r3, [r4, #3]
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 800094e:	796a      	ldrb	r2, [r5, #5]
 8000950:	792b      	ldrb	r3, [r5, #4]
 8000952:	0911      	lsrs	r1, r2, #4
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	4319      	orrs	r1, r3
 8000958:	88a3      	ldrh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 800095a:	0112      	lsls	r2, r2, #4
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 800095c:	0b1b      	lsrs	r3, r3, #12
 800095e:	031b      	lsls	r3, r3, #12
 8000960:	430b      	orrs	r3, r1
 8000962:	80a3      	strh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8000964:	051b      	lsls	r3, r3, #20
 8000966:	0f1b      	lsrs	r3, r3, #28
 8000968:	4313      	orrs	r3, r2
 800096a:	7163      	strb	r3, [r4, #5]
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 800096c:	79ab      	ldrb	r3, [r5, #6]
 800096e:	79a1      	ldrb	r1, [r4, #6]
 8000970:	09da      	lsrs	r2, r3, #7
 8000972:	4381      	bics	r1, r0
      Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 8000974:	119f      	asrs	r7, r3, #6
 8000976:	4007      	ands	r7, r0
 8000978:	430a      	orrs	r2, r1
 800097a:	2102      	movs	r1, #2
 800097c:	4087      	lsls	r7, r0
 800097e:	438a      	bics	r2, r1
      Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 8000980:	433a      	orrs	r2, r7
 8000982:	2704      	movs	r7, #4
 8000984:	1159      	asrs	r1, r3, #5
 8000986:	4001      	ands	r1, r0
 8000988:	0089      	lsls	r1, r1, #2
 800098a:	43ba      	bics	r2, r7
      Csd->DSRImpl         = (CSD_Tab[6] & 0x10) >> 4;
 800098c:	430a      	orrs	r2, r1
 800098e:	2108      	movs	r1, #8
 8000990:	111f      	asrs	r7, r3, #4
 8000992:	4038      	ands	r0, r7
 8000994:	438a      	bics	r2, r1
 8000996:	00c0      	lsls	r0, r0, #3
 8000998:	4302      	orrs	r2, r0
 800099a:	71a2      	strb	r2, [r4, #6]
      if(flag_SDHC == 0)
 800099c:	4a9c      	ldr	r2, [pc, #624]	; (8000c10 <BSP_SD_GetCardInfo+0x380>)
 800099e:	8811      	ldrh	r1, [r2, #0]
 80009a0:	79ea      	ldrb	r2, [r5, #7]
 80009a2:	2900      	cmp	r1, #0
 80009a4:	d000      	beq.n	80009a8 <BSP_SD_GetCardInfo+0x118>
 80009a6:	e0a7      	b.n	8000af8 <BSP_SD_GetCardInfo+0x268>
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 80009a8:	1098      	asrs	r0, r3, #2
 80009aa:	3103      	adds	r1, #3
 80009ac:	4008      	ands	r0, r1
 80009ae:	7a21      	ldrb	r1, [r4, #8]
 80009b0:	3e0d      	subs	r6, #13
 80009b2:	43b1      	bics	r1, r6
 80009b4:	4301      	orrs	r1, r0
 80009b6:	7221      	strb	r1, [r4, #8]
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 80009b8:	7a29      	ldrb	r1, [r5, #8]
                                    |  (CSD_Tab[7] << 2)
 80009ba:	0090      	lsls	r0, r2, #2
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 80009bc:	098a      	lsrs	r2, r1, #6
 80009be:	4302      	orrs	r2, r0
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 80009c0:	029b      	lsls	r3, r3, #10
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 80009c2:	4313      	orrs	r3, r2
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 80009c4:	4893      	ldr	r0, [pc, #588]	; (8000c14 <BSP_SD_GetCardInfo+0x384>)
 80009c6:	8922      	ldrh	r2, [r4, #8]
 80009c8:	051b      	lsls	r3, r3, #20
 80009ca:	4002      	ands	r2, r0
 80009cc:	0c9b      	lsrs	r3, r3, #18
 80009ce:	4313      	orrs	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 80009d0:	2207      	movs	r2, #7
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 80009d2:	8123      	strh	r3, [r4, #8]
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 80009d4:	7aa3      	ldrb	r3, [r4, #10]
 80009d6:	10c8      	asrs	r0, r1, #3
 80009d8:	4010      	ands	r0, r2
 80009da:	4393      	bics	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 80009dc:	4303      	orrs	r3, r0
 80009de:	4011      	ands	r1, r2
 80009e0:	2038      	movs	r0, #56	; 0x38
 80009e2:	40b1      	lsls	r1, r6
 80009e4:	4383      	bics	r3, r0
 80009e6:	430b      	orrs	r3, r1
 80009e8:	72a3      	strb	r3, [r4, #10]
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 80009ea:	7a6b      	ldrb	r3, [r5, #9]
 80009ec:	7ae1      	ldrb	r1, [r4, #11]
 80009ee:	095f      	lsrs	r7, r3, #5
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 80009f0:	109e      	asrs	r6, r3, #2
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 80009f2:	4391      	bics	r1, r2
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 80009f4:	4016      	ands	r6, r2
 80009f6:	4339      	orrs	r1, r7
 80009f8:	00f6      	lsls	r6, r6, #3
 80009fa:	4381      	bics	r1, r0
 80009fc:	4331      	orrs	r1, r6
 80009fe:	72e1      	strb	r1, [r4, #11]
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8000a00:	2106      	movs	r1, #6
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	400b      	ands	r3, r1
                                       |((CSD_Tab[10] & 0x80) >> 7);
 8000a06:	7aa9      	ldrb	r1, [r5, #10]
 8000a08:	40d1      	lsrs	r1, r2
 8000a0a:	430b      	orrs	r3, r1
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8000a0c:	7b21      	ldrb	r1, [r4, #12]
 8000a0e:	4391      	bics	r1, r2
 8000a10:	430b      	orrs	r3, r1
 8000a12:	7323      	strb	r3, [r4, #12]
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8000a14:	2001      	movs	r0, #1
 8000a16:	ae06      	add	r6, sp, #24
 8000a18:	7ab3      	ldrb	r3, [r6, #10]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a1a:	277e      	movs	r7, #126	; 0x7e
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8000a1c:	119d      	asrs	r5, r3, #6
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a1e:	4083      	lsls	r3, r0
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8000a20:	7c22      	ldrb	r2, [r4, #16]
 8000a22:	4005      	ands	r5, r0
 8000a24:	4382      	bics	r2, r0
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a26:	432a      	orrs	r2, r5
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000a28:	257f      	movs	r5, #127	; 0x7f
                              |((CSD_Tab[11] & 0x80) >> 7);
 8000a2a:	7af1      	ldrb	r1, [r6, #11]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a2c:	403b      	ands	r3, r7
                              |((CSD_Tab[11] & 0x80) >> 7);
 8000a2e:	09cf      	lsrs	r7, r1, #7
 8000a30:	433b      	orrs	r3, r7
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a32:	4083      	lsls	r3, r0
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000a34:	4029      	ands	r1, r5
 8000a36:	000f      	movs	r7, r1
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a38:	4002      	ands	r2, r0
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	7423      	strb	r3, [r4, #16]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000a3e:	7c63      	ldrb	r3, [r4, #17]
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8000a40:	7b31      	ldrb	r1, [r6, #12]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000a42:	43ab      	bics	r3, r5
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8000a44:	09ca      	lsrs	r2, r1, #7
 8000a46:	433b      	orrs	r3, r7
 8000a48:	01d2      	lsls	r2, r2, #7
 8000a4a:	402b      	ands	r3, r5
 8000a4c:	4313      	orrs	r3, r2
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8000a4e:	2203      	movs	r2, #3
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8000a50:	7463      	strb	r3, [r4, #17]
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8000a52:	114b      	asrs	r3, r1, #5
 8000a54:	4013      	ands	r3, r2
 8000a56:	469c      	mov	ip, r3
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8000a58:	4667      	mov	r7, ip
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8000a5a:	7ca3      	ldrb	r3, [r4, #18]
 8000a5c:	4393      	bics	r3, r2
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8000a5e:	433b      	orrs	r3, r7
 8000a60:	271c      	movs	r7, #28
 8000a62:	3219      	adds	r2, #25
 8000a64:	43bb      	bics	r3, r7
 8000a66:	400a      	ands	r2, r1
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	74a2      	strb	r2, [r4, #18]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000a6c:	220c      	movs	r2, #12
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8000a6e:	7b73      	ldrb	r3, [r6, #13]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000a70:	0089      	lsls	r1, r1, #2
 8000a72:	4011      	ands	r1, r2
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8000a74:	099a      	lsrs	r2, r3, #6
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000a76:	4311      	orrs	r1, r2
 8000a78:	468c      	mov	ip, r1
 8000a7a:	220f      	movs	r2, #15
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 8000a7c:	4667      	mov	r7, ip
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000a7e:	7ce1      	ldrb	r1, [r4, #19]
 8000a80:	4391      	bics	r1, r2
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 8000a82:	4339      	orrs	r1, r7
 8000a84:	2710      	movs	r7, #16
 8000a86:	115a      	asrs	r2, r3, #5
 8000a88:	4002      	ands	r2, r0
 8000a8a:	43b9      	bics	r1, r7
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	74e2      	strb	r2, [r4, #19]
      Csd->Reserved3         = (CSD_Tab[13] & 0x1F);
 8000a92:	221f      	movs	r2, #31
 8000a94:	7d21      	ldrb	r1, [r4, #20]
 8000a96:	4013      	ands	r3, r2
 8000a98:	4391      	bics	r1, r2
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	7bb2      	ldrb	r2, [r6, #14]
 8000aa0:	438b      	bics	r3, r1
 8000aa2:	09d7      	lsrs	r7, r2, #7
 8000aa4:	017f      	lsls	r7, r7, #5
      Csd->CopyFlag          = (CSD_Tab[14] & 0x40) >> 6;
 8000aa6:	433b      	orrs	r3, r7
 8000aa8:	2740      	movs	r7, #64	; 0x40
 8000aaa:	1191      	asrs	r1, r2, #6
 8000aac:	4001      	ands	r1, r0
 8000aae:	0189      	lsls	r1, r1, #6
 8000ab0:	43bb      	bics	r3, r7
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8000ab2:	430b      	orrs	r3, r1
 8000ab4:	1157      	asrs	r7, r2, #5
 8000ab6:	01ff      	lsls	r7, r7, #7
 8000ab8:	402b      	ands	r3, r5
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8000aba:	7d61      	ldrb	r1, [r4, #21]
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8000abc:	433b      	orrs	r3, r7
 8000abe:	7523      	strb	r3, [r4, #20]
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8000ac0:	4381      	bics	r1, r0
 8000ac2:	1113      	asrs	r3, r2, #4
 8000ac4:	4003      	ands	r3, r0
 8000ac6:	0008      	movs	r0, r1
      Csd->FileFormat        = (CSD_Tab[14] & 0x0C) >> 2;
 8000ac8:	2703      	movs	r7, #3
 8000aca:	4303      	orrs	r3, r0
 8000acc:	2006      	movs	r0, #6
 8000ace:	1091      	asrs	r1, r2, #2
 8000ad0:	4039      	ands	r1, r7
 8000ad2:	0049      	lsls	r1, r1, #1
 8000ad4:	4383      	bics	r3, r0
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 8000ad6:	430b      	orrs	r3, r1
 8000ad8:	403a      	ands	r2, r7
 8000ada:	2118      	movs	r1, #24
 8000adc:	40ba      	lsls	r2, r7
 8000ade:	438b      	bics	r3, r1
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	7562      	strb	r2, [r4, #21]
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 8000ae4:	7bf2      	ldrb	r2, [r6, #15]
 8000ae6:	7da3      	ldrb	r3, [r4, #22]
 8000ae8:	0851      	lsrs	r1, r2, #1
 8000aea:	43ab      	bics	r3, r5
      Csd->Reserved5         = (CSD_Tab[15] & 0x01);
 8000aec:	430b      	orrs	r3, r1
 8000aee:	01d2      	lsls	r2, r2, #7
 8000af0:	401d      	ands	r5, r3
 8000af2:	4315      	orrs	r5, r2
 8000af4:	75a5      	strb	r5, [r4, #22]
 8000af6:	e6db      	b.n	80008b0 <BSP_SD_GetCardInfo+0x20>
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8000af8:	213c      	movs	r1, #60	; 0x3c
 8000afa:	203f      	movs	r0, #63	; 0x3f
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	400b      	ands	r3, r1
 8000b00:	0991      	lsrs	r1, r2, #6
 8000b02:	430b      	orrs	r3, r1
 8000b04:	7a21      	ldrb	r1, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8000b06:	0412      	lsls	r2, r2, #16
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8000b08:	4381      	bics	r1, r0
 8000b0a:	430b      	orrs	r3, r1
 8000b0c:	7223      	strb	r3, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8000b0e:	892b      	ldrh	r3, [r5, #8]
 8000b10:	68a1      	ldr	r1, [r4, #8]
 8000b12:	ba5b      	rev16	r3, r3
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	431a      	orrs	r2, r3
 8000b18:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <BSP_SD_GetCardInfo+0x388>)
 8000b1a:	0292      	lsls	r2, r2, #10
 8000b1c:	0912      	lsrs	r2, r2, #4
 8000b1e:	400b      	ands	r3, r1
 8000b20:	431a      	orrs	r2, r3
 8000b22:	60a2      	str	r2, [r4, #8]
        Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80) >> 8);
 8000b24:	0e12      	lsrs	r2, r2, #24
 8000b26:	43b2      	bics	r2, r6
 8000b28:	72e2      	strb	r2, [r4, #11]
 8000b2a:	e773      	b.n	8000a14 <BSP_SD_GetCardInfo+0x184>
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8000b2c:	f7ff fdda 	bl	80006e4 <SD_WaitData.constprop.0>
 8000b30:	1e06      	subs	r6, r0, #0
 8000b32:	d000      	beq.n	8000b36 <BSP_SD_GetCardInfo+0x2a6>
 8000b34:	e6ce      	b.n	80008d4 <BSP_SD_GetCardInfo+0x44>
 8000b36:	0007      	movs	r7, r0
        CID_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000b38:	20ff      	movs	r0, #255	; 0xff
 8000b3a:	f000 fac3 	bl	80010c4 <SD_IO_WriteByte>
 8000b3e:	ad06      	add	r5, sp, #24
 8000b40:	5578      	strb	r0, [r7, r5]
      for (counter = 0; counter < 16; counter++)
 8000b42:	3701      	adds	r7, #1
 8000b44:	2f10      	cmp	r7, #16
 8000b46:	d1f7      	bne.n	8000b38 <BSP_SD_GetCardInfo+0x2a8>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000b48:	20ff      	movs	r0, #255	; 0xff
 8000b4a:	f000 fabb 	bl	80010c4 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000b4e:	20ff      	movs	r0, #255	; 0xff
 8000b50:	f000 fab8 	bl	80010c4 <SD_IO_WriteByte>
      Cid->ManufacturerID = CID_Tab[0];
 8000b54:	782b      	ldrb	r3, [r5, #0]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8000b56:	0021      	movs	r1, r4
      Cid->ManufacturerID = CID_Tab[0];
 8000b58:	7623      	strb	r3, [r4, #24]
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8000b5a:	786b      	ldrb	r3, [r5, #1]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8000b5c:	3128      	adds	r1, #40	; 0x28
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8000b5e:	021b      	lsls	r3, r3, #8
 8000b60:	8363      	strh	r3, [r4, #26]
      Cid->OEM_AppliID |= CID_Tab[2];
 8000b62:	8b63      	ldrh	r3, [r4, #26]
 8000b64:	78aa      	ldrb	r2, [r5, #2]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	8363      	strh	r3, [r4, #26]
      Cid->ProdName1 = CID_Tab[3] << 24;
 8000b6a:	78eb      	ldrb	r3, [r5, #3]
 8000b6c:	061b      	lsls	r3, r3, #24
 8000b6e:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[4] << 16;
 8000b70:	792b      	ldrb	r3, [r5, #4]
 8000b72:	69e2      	ldr	r2, [r4, #28]
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[5] << 8;
 8000b7a:	796b      	ldrb	r3, [r5, #5]
 8000b7c:	69e2      	ldr	r2, [r4, #28]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[6];
 8000b84:	69e2      	ldr	r2, [r4, #28]
 8000b86:	79ab      	ldrb	r3, [r5, #6]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61e3      	str	r3, [r4, #28]
      Cid->ProdName2 = CID_Tab[7];
 8000b8c:	79ea      	ldrb	r2, [r5, #7]
 8000b8e:	1c63      	adds	r3, r4, #1
 8000b90:	77da      	strb	r2, [r3, #31]
      Cid->ProdRev = CID_Tab[8];
 8000b92:	7a2a      	ldrb	r2, [r5, #8]
 8000b94:	1ca3      	adds	r3, r4, #2
 8000b96:	77da      	strb	r2, [r3, #31]
      Cid->ProdSN = CID_Tab[9] << 24;
 8000b98:	7a6b      	ldrb	r3, [r5, #9]
 8000b9a:	061b      	lsls	r3, r3, #24
 8000b9c:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[10] << 16;
 8000b9e:	7aab      	ldrb	r3, [r5, #10]
 8000ba0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ba2:	041b      	lsls	r3, r3, #16
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[11] << 8;
 8000ba8:	7aeb      	ldrb	r3, [r5, #11]
 8000baa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[12];
 8000bb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bb4:	7b2b      	ldrb	r3, [r5, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8000bba:	7b6b      	ldrb	r3, [r5, #13]
 8000bbc:	780a      	ldrb	r2, [r1, #0]
 8000bbe:	0918      	lsrs	r0, r3, #4
 8000bc0:	4302      	orrs	r2, r0
 8000bc2:	700a      	strb	r2, [r1, #0]
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 8000bc4:	22f0      	movs	r2, #240	; 0xf0
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	4013      	ands	r3, r2
 8000bcc:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->ManufactDate |= CID_Tab[14];
 8000bce:	7baa      	ldrb	r2, [r5, #14]
 8000bd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bd2:	4313      	orrs	r3, r2
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8000bd4:	0022      	movs	r2, r4
      Cid->ManufactDate |= CID_Tab[14];
 8000bd6:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8000bd8:	7beb      	ldrb	r3, [r5, #15]
 8000bda:	322c      	adds	r2, #44	; 0x2c
 8000bdc:	085b      	lsrs	r3, r3, #1
 8000bde:	7013      	strb	r3, [r2, #0]
      Cid->Reserved2 = 1;
 8000be0:	0023      	movs	r3, r4
 8000be2:	2201      	movs	r2, #1
 8000be4:	332d      	adds	r3, #45	; 0x2d
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	e675      	b.n	80008d6 <BSP_SD_GetCardInfo+0x46>
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000bea:	8923      	ldrh	r3, [r4, #8]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000bec:	7b22      	ldrb	r2, [r4, #12]
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000bee:	049b      	lsls	r3, r3, #18
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000bf0:	0752      	lsls	r2, r2, #29
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000bf2:	0d1b      	lsrs	r3, r3, #20
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000bf4:	0f52      	lsrs	r2, r2, #29
 8000bf6:	3202      	adds	r2, #2
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000bf8:	3301      	adds	r3, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000bfa:	4093      	lsls	r3, r2
    pCardInfo->LogBlockSize = 512;
 8000bfc:	2280      	movs	r2, #128	; 0x80
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8000bfe:	2101      	movs	r1, #1
    pCardInfo->LogBlockSize = 512;
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	63e2      	str	r2, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8000c04:	7962      	ldrb	r2, [r4, #5]
 8000c06:	0912      	lsrs	r2, r2, #4
 8000c08:	4091      	lsls	r1, r2
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8000c0a:	4093      	lsls	r3, r2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8000c0c:	6361      	str	r1, [r4, #52]	; 0x34
 8000c0e:	e679      	b.n	8000904 <BSP_SD_GetCardInfo+0x74>
 8000c10:	20000536 	.word	0x20000536
 8000c14:	ffffc003 	.word	0xffffc003
 8000c18:	f000003f 	.word	0xf000003f

08000c1c <BSP_SD_ReadBlocks>:
{
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000c22:	2300      	movs	r3, #0
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	ad04      	add	r5, sp, #16
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	0092      	lsls	r2, r2, #2
 8000c2c:	33ff      	adds	r3, #255	; 0xff
{
 8000c2e:	0007      	movs	r7, r0
 8000c30:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000c32:	0028      	movs	r0, r5
 8000c34:	2110      	movs	r1, #16
 8000c36:	f7ff fce7 	bl	8000608 <SD_SendCmd>
 8000c3a:	782e      	ldrb	r6, [r5, #0]
  SD_IO_CSState(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f000 fa2f 	bl	80010a0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000c42:	20ff      	movs	r0, #255	; 0xff
 8000c44:	f000 fa3e 	bl	80010c4 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d002      	beq.n	8000c52 <BSP_SD_ReadBlocks+0x36>
  uint8_t *ptr = NULL;
 8000c4c:	2500      	movs	r5, #0
  uint8_t retr = BSP_SD_ERROR;
 8000c4e:	2601      	movs	r6, #1
 8000c50:	e014      	b.n	8000c7c <BSP_SD_ReadBlocks+0x60>
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8000c52:	2080      	movs	r0, #128	; 0x80
 8000c54:	0080      	lsls	r0, r0, #2
 8000c56:	f001 fffb 	bl	8002c50 <malloc>
 8000c5a:	1e05      	subs	r5, r0, #0
  if( ptr == NULL )
 8000c5c:	d0f6      	beq.n	8000c4c <BSP_SD_ReadBlocks+0x30>
  memset(ptr, SD_DUMMY_BYTE, sizeof(uint8_t)*BlockSize);
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	21ff      	movs	r1, #255	; 0xff
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	f002 fa0c 	bl	8003080 <memset>
  addr = (ReadAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <BSP_SD_ReadBlocks+0xe0>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d001      	beq.n	8000c74 <BSP_SD_ReadBlocks+0x58>
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	435c      	muls	r4, r3
  while (NumOfBlocks--)
 8000c76:	9b03      	ldr	r3, [sp, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10d      	bne.n	8000c98 <BSP_SD_ReadBlocks+0x7c>
  SD_IO_CSState(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f000 fa0f 	bl	80010a0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000c82:	20ff      	movs	r0, #255	; 0xff
 8000c84:	f000 fa1e 	bl	80010c4 <SD_IO_WriteByte>
  if(ptr != NULL) free(ptr);
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d002      	beq.n	8000c92 <BSP_SD_ReadBlocks+0x76>
 8000c8c:	0028      	movs	r0, r5
 8000c8e:	f001 ffe9 	bl	8002c64 <free>
}
 8000c92:	0030      	movs	r0, r6
 8000c94:	b007      	add	sp, #28
 8000c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000c98:	2300      	movs	r3, #0
 8000c9a:	0022      	movs	r2, r4
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	2111      	movs	r1, #17
 8000ca0:	33ff      	adds	r3, #255	; 0xff
 8000ca2:	a804      	add	r0, sp, #16
 8000ca4:	f7ff fcb0 	bl	8000608 <SD_SendCmd>
    if ( response.r1 != SD_R1_NO_ERROR)
 8000ca8:	ab02      	add	r3, sp, #8
 8000caa:	7a1b      	ldrb	r3, [r3, #8]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1ce      	bne.n	8000c4e <BSP_SD_ReadBlocks+0x32>
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8000cb0:	f7ff fd18 	bl	80006e4 <SD_WaitData.constprop.0>
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d1ca      	bne.n	8000c4e <BSP_SD_ReadBlocks+0x32>
      SD_IO_WriteReadData(ptr, (uint8_t*)pData + offset, BlockSize);
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	0039      	movs	r1, r7
 8000cbc:	0092      	lsls	r2, r2, #2
 8000cbe:	0028      	movs	r0, r5
 8000cc0:	f000 f9fc 	bl	80010bc <SD_IO_WriteReadData>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <BSP_SD_ReadBlocks+0xe0>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d113      	bne.n	8000cf4 <BSP_SD_ReadBlocks+0xd8>
 8000ccc:	3401      	adds	r4, #1
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000cce:	20ff      	movs	r0, #255	; 0xff
 8000cd0:	f000 f9f8 	bl	80010c4 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000cd4:	20ff      	movs	r0, #255	; 0xff
 8000cd6:	f000 f9f5 	bl	80010c4 <SD_IO_WriteByte>
    SD_IO_CSState(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 f9e0 	bl	80010a0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000ce0:	20ff      	movs	r0, #255	; 0xff
 8000ce2:	f000 f9ef 	bl	80010c4 <SD_IO_WriteByte>
 8000ce6:	9b03      	ldr	r3, [sp, #12]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	9303      	str	r3, [sp, #12]
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	18ff      	adds	r7, r7, r3
 8000cf2:	e7c0      	b.n	8000c76 <BSP_SD_ReadBlocks+0x5a>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	18e4      	adds	r4, r4, r3
 8000cfa:	e7e8      	b.n	8000cce <BSP_SD_ReadBlocks+0xb2>
 8000cfc:	20000536 	.word	0x20000536

08000d00 <BSP_SD_WriteBlocks>:
{
 8000d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d02:	b087      	sub	sp, #28
 8000d04:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000d06:	2300      	movs	r3, #0
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	ad04      	add	r5, sp, #16
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	0092      	lsls	r2, r2, #2
 8000d10:	33ff      	adds	r3, #255	; 0xff
{
 8000d12:	0007      	movs	r7, r0
 8000d14:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000d16:	0028      	movs	r0, r5
 8000d18:	2110      	movs	r1, #16
 8000d1a:	f7ff fc75 	bl	8000608 <SD_SendCmd>
 8000d1e:	782d      	ldrb	r5, [r5, #0]
  SD_IO_CSState(1);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 f9bd 	bl	80010a0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000d26:	20ff      	movs	r0, #255	; 0xff
 8000d28:	f000 f9cc 	bl	80010c4 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d009      	beq.n	8000d44 <BSP_SD_WriteBlocks+0x44>
  uint8_t retr = BSP_SD_ERROR;
 8000d30:	2501      	movs	r5, #1
  SD_IO_CSState(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f000 f9b4 	bl	80010a0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000d38:	20ff      	movs	r0, #255	; 0xff
 8000d3a:	f000 f9c3 	bl	80010c4 <SD_IO_WriteByte>
}
 8000d3e:	0028      	movs	r0, r5
 8000d40:	b007      	add	sp, #28
 8000d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8000d44:	2080      	movs	r0, #128	; 0x80
 8000d46:	0080      	lsls	r0, r0, #2
 8000d48:	f001 ff82 	bl	8002c50 <malloc>
 8000d4c:	1e06      	subs	r6, r0, #0
  if (ptr == NULL)
 8000d4e:	d0ef      	beq.n	8000d30 <BSP_SD_WriteBlocks+0x30>
  addr = (WriteAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 8000d50:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <BSP_SD_WriteBlocks+0x114>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d001      	beq.n	8000d5c <BSP_SD_WriteBlocks+0x5c>
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	435c      	muls	r4, r3
 8000d5e:	9702      	str	r7, [sp, #8]
  while (NumOfBlocks--)
 8000d60:	9b03      	ldr	r3, [sp, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d103      	bne.n	8000d6e <BSP_SD_WriteBlocks+0x6e>
  if(ptr != NULL) free(ptr);
 8000d66:	0030      	movs	r0, r6
 8000d68:	f001 ff7c 	bl	8002c64 <free>
 8000d6c:	e7e1      	b.n	8000d32 <BSP_SD_WriteBlocks+0x32>
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000d6e:	2300      	movs	r3, #0
 8000d70:	af04      	add	r7, sp, #16
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	0022      	movs	r2, r4
 8000d76:	33ff      	adds	r3, #255	; 0xff
 8000d78:	2118      	movs	r1, #24
 8000d7a:	0038      	movs	r0, r7
 8000d7c:	f7ff fc44 	bl	8000608 <SD_SendCmd>
    if (response.r1 != SD_R1_NO_ERROR)
 8000d80:	783b      	ldrb	r3, [r7, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d144      	bne.n	8000e10 <BSP_SD_WriteBlocks+0x110>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000d86:	20ff      	movs	r0, #255	; 0xff
 8000d88:	f000 f99c 	bl	80010c4 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000d8c:	20ff      	movs	r0, #255	; 0xff
 8000d8e:	f000 f999 	bl	80010c4 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE);
 8000d92:	20fe      	movs	r0, #254	; 0xfe
 8000d94:	f000 f996 	bl	80010c4 <SD_IO_WriteByte>
    SD_IO_WriteReadData((uint8_t*)pData + offset, ptr, BlockSize);
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	0031      	movs	r1, r6
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	9802      	ldr	r0, [sp, #8]
 8000da0:	f000 f98c 	bl	80010bc <SD_IO_WriteReadData>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <BSP_SD_WriteBlocks+0x114>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d12d      	bne.n	8000e08 <BSP_SD_WriteBlocks+0x108>
 8000dac:	3401      	adds	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000dae:	20ff      	movs	r0, #255	; 0xff
 8000db0:	f000 f988 	bl	80010c4 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000db4:	20ff      	movs	r0, #255	; 0xff
 8000db6:	f000 f985 	bl	80010c4 <SD_IO_WriteByte>
  dataresponse = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000dba:	20ff      	movs	r0, #255	; 0xff
 8000dbc:	f000 f982 	bl	80010c4 <SD_IO_WriteByte>
 8000dc0:	0007      	movs	r7, r0
  SD_IO_WriteByte(SD_DUMMY_BYTE); /* read the busy response byte*/
 8000dc2:	20ff      	movs	r0, #255	; 0xff
 8000dc4:	f000 f97e 	bl	80010c4 <SD_IO_WriteByte>
  switch (dataresponse & 0x1F)
 8000dc8:	231f      	movs	r3, #31
 8000dca:	401f      	ands	r7, r3
 8000dcc:	2f05      	cmp	r7, #5
 8000dce:	d11f      	bne.n	8000e10 <BSP_SD_WriteBlocks+0x110>
    SD_IO_CSState(1);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f000 f965 	bl	80010a0 <SD_IO_CSState>
    SD_IO_CSState(0);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f962 	bl	80010a0 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 8000ddc:	20ff      	movs	r0, #255	; 0xff
 8000dde:	f000 f971 	bl	80010c4 <SD_IO_WriteByte>
 8000de2:	0007      	movs	r7, r0
 8000de4:	28ff      	cmp	r0, #255	; 0xff
 8000de6:	d1f9      	bne.n	8000ddc <BSP_SD_WriteBlocks+0xdc>
    SD_IO_CSState(1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f000 f959 	bl	80010a0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000dee:	0038      	movs	r0, r7
 8000df0:	f000 f968 	bl	80010c4 <SD_IO_WriteByte>
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	4694      	mov	ip, r2
 8000dfa:	9b03      	ldr	r3, [sp, #12]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	9303      	str	r3, [sp, #12]
 8000e00:	9b02      	ldr	r3, [sp, #8]
 8000e02:	4463      	add	r3, ip
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	e7ab      	b.n	8000d60 <BSP_SD_WriteBlocks+0x60>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	18e4      	adds	r4, r4, r3
 8000e0e:	e7ce      	b.n	8000dae <BSP_SD_WriteBlocks+0xae>
  uint8_t retr = BSP_SD_ERROR;
 8000e10:	2501      	movs	r5, #1
 8000e12:	e7a8      	b.n	8000d66 <BSP_SD_WriteBlocks+0x66>
 8000e14:	20000536 	.word	0x20000536

08000e18 <BSP_SD_GetCardState>:
{
 8000e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  retr = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, SD_ANSWER_R2_EXPECTED);
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	ac02      	add	r4, sp, #8
 8000e1e:	2200      	movs	r2, #0
 8000e20:	210d      	movs	r1, #13
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	0020      	movs	r0, r4
 8000e26:	33fd      	adds	r3, #253	; 0xfd
 8000e28:	f7ff fbee 	bl	8000608 <SD_SendCmd>
  SD_IO_CSState(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 f937 	bl	80010a0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000e32:	20ff      	movs	r0, #255	; 0xff
 8000e34:	f000 f946 	bl	80010c4 <SD_IO_WriteByte>
  if(( retr.r1 == SD_R1_NO_ERROR) && ( retr.r2 == SD_R2_NO_ERROR))
 8000e38:	7823      	ldrb	r3, [r4, #0]
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d103      	bne.n	8000e48 <BSP_SD_GetCardState+0x30>
 8000e40:	7860      	ldrb	r0, [r4, #1]
 8000e42:	1e43      	subs	r3, r0, #1
 8000e44:	4198      	sbcs	r0, r3
 8000e46:	b2c0      	uxtb	r0, r0
}
 8000e48:	b004      	add	sp, #16
 8000e4a:	bd10      	pop	{r4, pc}

08000e4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_MspInit+0x2c>)
{
 8000e50:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000e54:	4301      	orrs	r1, r0
 8000e56:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4002      	ands	r2, r0
 8000e60:	9200      	str	r2, [sp, #0]
 8000e62:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e66:	430a      	orrs	r2, r1
 8000e68:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	b002      	add	sp, #8
 8000e74:	4770      	bx	lr
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40021000 	.word	0x40021000

08000e7c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_RTC_MspInit+0x2c>)
 8000e7e:	6802      	ldr	r2, [r0, #0]
{
 8000e80:	b082      	sub	sp, #8
  if(hrtc->Instance==RTC)
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d10e      	bne.n	8000ea4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_RTC_MspInit+0x30>)
 8000e8a:	0212      	lsls	r2, r2, #8
 8000e8c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000e8e:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e90:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 8000e92:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e96:	00c9      	lsls	r1, r1, #3
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ea4:	b002      	add	sp, #8
 8000ea6:	4770      	bx	lr
 8000ea8:	40002800 	.word	0x40002800
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb0:	b510      	push	{r4, lr}
 8000eb2:	0004      	movs	r4, r0
 8000eb4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	2214      	movs	r2, #20
 8000eb8:	2100      	movs	r1, #0
 8000eba:	a803      	add	r0, sp, #12
 8000ebc:	f002 f8e0 	bl	8003080 <memset>
  if(hspi->Instance==SPI1)
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_SPI_MspInit+0x50>)
 8000ec2:	6822      	ldr	r2, [r4, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d118      	bne.n	8000efa <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ec8:	2080      	movs	r0, #128	; 0x80
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_SPI_MspInit+0x54>)
 8000ecc:	0140      	lsls	r0, r0, #5
 8000ece:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000ed0:	4301      	orrs	r1, r0
 8000ed2:	6419      	str	r1, [r3, #64]	; 0x40
 8000ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed6:	4002      	ands	r2, r0
 8000ed8:	9201      	str	r2, [sp, #4]
 8000eda:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	2202      	movs	r2, #2
 8000ede:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <HAL_SPI_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4311      	orrs	r1, r2
 8000ee4:	6359      	str	r1, [r3, #52]	; 0x34
 8000ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4013      	ands	r3, r2
 8000eec:	9302      	str	r3, [sp, #8]
 8000eee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ef0:	2338      	movs	r3, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ef4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f000 fa03 	bl	8001300 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000efa:	b008      	add	sp, #32
 8000efc:	bd10      	pop	{r4, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	40013000 	.word	0x40013000
 8000f04:	40021000 	.word	0x40021000
 8000f08:	50000400 	.word	0x50000400

08000f0c <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_SPI_MspDeInit+0x20>)
 8000f0e:	6802      	ldr	r2, [r0, #0]
{
 8000f10:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d108      	bne.n	8000f28 <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000f16:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_SPI_MspDeInit+0x24>)
 8000f18:	4906      	ldr	r1, [pc, #24]	; (8000f34 <HAL_SPI_MspDeInit+0x28>)
 8000f1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <HAL_SPI_MspDeInit+0x2c>)
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000f1e:	400b      	ands	r3, r1
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8000f22:	2138      	movs	r1, #56	; 0x38
 8000f24:	f000 fa94 	bl	8001450 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000f28:	bd10      	pop	{r4, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40013000 	.word	0x40013000
 8000f30:	40021000 	.word	0x40021000
 8000f34:	ffffefff 	.word	0xffffefff
 8000f38:	50000400 	.word	0x50000400

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b510      	push	{r4, lr}
 8000f3e:	0004      	movs	r4, r0
 8000f40:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	2214      	movs	r2, #20
 8000f44:	2100      	movs	r1, #0
 8000f46:	a803      	add	r0, sp, #12
 8000f48:	f002 f89a 	bl	8003080 <memset>
  if(huart->Instance==USART2)
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_UART_MspInit+0x54>)
 8000f4e:	6822      	ldr	r2, [r4, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d11b      	bne.n	8000f8c <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f54:	2080      	movs	r0, #128	; 0x80
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_UART_MspInit+0x58>)
 8000f58:	0280      	lsls	r0, r0, #10
 8000f5a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f5c:	4301      	orrs	r1, r0
 8000f5e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f62:	4002      	ands	r2, r0
 8000f64:	9201      	str	r2, [sp, #4]
 8000f66:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	2201      	movs	r2, #1
 8000f6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4311      	orrs	r1, r2
 8000f70:	6359      	str	r1, [r3, #52]	; 0x34
 8000f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4013      	ands	r3, r2
 8000f78:	9302      	str	r3, [sp, #8]
 8000f7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f7c:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	3b0a      	subs	r3, #10
 8000f84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f86:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f000 f9ba 	bl	8001300 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f8c:	b008      	add	sp, #32
 8000f8e:	bd10      	pop	{r4, pc}
 8000f90:	40004400 	.word	0x40004400
 8000f94:	40021000 	.word	0x40021000

08000f98 <NMI_Handler>:
 8000f98:	4770      	bx	lr

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler>

08000f9c <SVC_Handler>:
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa2:	f000 f93f 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa6:	bd10      	pop	{r4, pc}

08000fa8 <SPIx_Init>:
/**
  * @brief  Initialize SPI HAL.
  * @retval None
  */
static void SPIx_Init(void)
{
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8000faa:	4c2d      	ldr	r4, [pc, #180]	; (8001060 <SPIx_Init+0xb8>)
{
 8000fac:	b089      	sub	sp, #36	; 0x24
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8000fae:	0020      	movs	r0, r4
 8000fb0:	f001 f9a8 	bl	8002304 <HAL_SPI_GetState>
 8000fb4:	1e06      	subs	r6, r0, #0
 8000fb6:	d150      	bne.n	800105a <SPIx_Init+0xb2>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <SPIx_Init+0xbc>)
          - PCLK1 max frequency is 48 MHz 
       */ 
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fba:	2702      	movs	r7, #2
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8000fbc:	6023      	str	r3, [r4, #0]
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	61e3      	str	r3, [r4, #28]
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000fc2:	3b07      	subs	r3, #7
 8000fc4:	6163      	str	r3, [r4, #20]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    hnucleo_Spi.Init.CRCPolynomial = 7;
 8000fc6:	3306      	adds	r3, #6
 8000fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hnucleo_Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fca:	23e0      	movs	r3, #224	; 0xe0
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	60e3      	str	r3, [r4, #12]
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8000fd0:	2380      	movs	r3, #128	; 0x80
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8000fd2:	4d25      	ldr	r5, [pc, #148]	; (8001068 <SPIx_Init+0xc0>)
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8000fd4:	009b      	lsls	r3, r3, #2
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000fd6:	2214      	movs	r2, #20
 8000fd8:	0001      	movs	r1, r0
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8000fda:	60a0      	str	r0, [r4, #8]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fdc:	62a0      	str	r0, [r4, #40]	; 0x28
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fde:	6320      	str	r0, [r4, #48]	; 0x30
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe0:	6220      	str	r0, [r4, #32]
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8000fe2:	61a3      	str	r3, [r4, #24]
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe4:	6260      	str	r0, [r4, #36]	; 0x24
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8000fe6:	3bfc      	subs	r3, #252	; 0xfc
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fe8:	6360      	str	r0, [r4, #52]	; 0x34
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000fea:	a803      	add	r0, sp, #12
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8000fec:	6063      	str	r3, [r4, #4]
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fee:	6127      	str	r7, [r4, #16]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000ff0:	f002 f846 	bl	8003080 <memset>
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8000ff4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8000ff6:	a903      	add	r1, sp, #12
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8000ff8:	433b      	orrs	r3, r7
 8000ffa:	636b      	str	r3, [r5, #52]	; 0x34
 8000ffc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8000ffe:	481b      	ldr	r0, [pc, #108]	; (800106c <SPIx_Init+0xc4>)
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001000:	403b      	ands	r3, r7
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	9b00      	ldr	r3, [sp, #0]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8001006:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001008:	433b      	orrs	r3, r7
 800100a:	636b      	str	r3, [r5, #52]	; 0x34
 800100c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  gpioinitstruct.Mode = GPIO_MODE_AF_PP;
 800100e:	9704      	str	r7, [sp, #16]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8001010:	403b      	ands	r3, r7
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	9b01      	ldr	r3, [sp, #4]
  gpioinitstruct.Pin = NUCLEO_SPIx_SCK_PIN;
 8001016:	2308      	movs	r3, #8
 8001018:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Pull  = GPIO_PULLUP;
 800101a:	3b07      	subs	r3, #7
 800101c:	9305      	str	r3, [sp, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	19db      	adds	r3, r3, r7
 8001020:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8001022:	f000 f96d 	bl	8001300 <HAL_GPIO_Init>
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001026:	2320      	movs	r3, #32
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001028:	a903      	add	r1, sp, #12
 800102a:	4810      	ldr	r0, [pc, #64]	; (800106c <SPIx_Init+0xc4>)
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 800102c:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 800102e:	9607      	str	r6, [sp, #28]
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 8001030:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001032:	f000 f965 	bl	8001300 <HAL_GPIO_Init>
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8001036:	2310      	movs	r3, #16
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001038:	a903      	add	r1, sp, #12
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <SPIx_Init+0xc4>)
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 800103c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 800103e:	f000 f95f 	bl	8001300 <HAL_GPIO_Init>
  NUCLEO_SPIx_CLK_ENABLE();
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001046:	0149      	lsls	r1, r1, #5
 8001048:	430a      	orrs	r2, r1
 800104a:	642a      	str	r2, [r5, #64]	; 0x40
 800104c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    
    SPIx_MspInit();
    HAL_SPI_Init(&hnucleo_Spi);
 800104e:	0020      	movs	r0, r4
  NUCLEO_SPIx_CLK_ENABLE();
 8001050:	400b      	ands	r3, r1
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	9b02      	ldr	r3, [sp, #8]
    HAL_SPI_Init(&hnucleo_Spi);
 8001056:	f000 ffad 	bl	8001fb4 <HAL_SPI_Init>
  }
}
 800105a:	b009      	add	sp, #36	; 0x24
 800105c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	20000538 	.word	0x20000538
 8001064:	40013000 	.word	0x40013000
 8001068:	40021000 	.word	0x40021000
 800106c:	50000400 	.word	0x50000400

08001070 <SPIx_WriteReadData>:
  * @param  DataOut: read value
  * @param  DataLength: value data length
  * @retval None
  */
static void SPIx_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8001070:	b513      	push	{r0, r1, r4, lr}
 8001072:	0013      	movs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLength, SpixTimeout);
 8001074:	4a08      	ldr	r2, [pc, #32]	; (8001098 <SPIx_WriteReadData+0x28>)
 8001076:	4c09      	ldr	r4, [pc, #36]	; (800109c <SPIx_WriteReadData+0x2c>)
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	9200      	str	r2, [sp, #0]
 800107c:	000a      	movs	r2, r1
 800107e:	0001      	movs	r1, r0
 8001080:	0020      	movs	r0, r4
 8001082:	f001 f80d 	bl	80020a0 <HAL_SPI_TransmitReceive>

  /* Check the communication status */
  if(status != HAL_OK)
 8001086:	2800      	cmp	r0, #0
 8001088:	d004      	beq.n	8001094 <SPIx_WriteReadData+0x24>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 800108a:	0020      	movs	r0, r4
 800108c:	f000 fff0 	bl	8002070 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 8001090:	f7ff ff8a 	bl	8000fa8 <SPIx_Init>
}
 8001094:	bd13      	pop	{r0, r1, r4, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	20000000 	.word	0x20000000
 800109c:	20000538 	.word	0x20000538

080010a0 <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  val: pin value.
  * @retval None
  */
void SD_IO_CSState(uint8_t val)
{
 80010a0:	b510      	push	{r4, lr}
 80010a2:	0002      	movs	r2, r0
  if(val == 1) 
 80010a4:	2801      	cmp	r0, #1
 80010a6:	d104      	bne.n	80010b2 <SD_IO_CSState+0x12>
  {
    SD_CS_HIGH();
  }
  else
  {
    SD_CS_LOW();
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <SD_IO_CSState+0x18>)
 80010ac:	f000 fa46 	bl	800153c <HAL_GPIO_WritePin>
  }
}
 80010b0:	bd10      	pop	{r4, pc}
    SD_CS_LOW();
 80010b2:	2200      	movs	r2, #0
 80010b4:	e7f8      	b.n	80010a8 <SD_IO_CSState+0x8>
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	50000c00 	.word	0x50000c00

080010bc <SD_IO_WriteReadData>:
  * @param  DataOut: Pointer to data buffer for read data
  * @param  DataLength: number of bytes to write
  * @retval None
  */
void SD_IO_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 80010bc:	b510      	push	{r4, lr}
  /* Send the byte */
  SPIx_WriteReadData(DataIn, DataOut, DataLength);
 80010be:	f7ff ffd7 	bl	8001070 <SPIx_WriteReadData>
}
 80010c2:	bd10      	pop	{r4, pc}

080010c4 <SD_IO_WriteByte>:
  * @brief  Write a byte on the SD.
  * @param  Data: byte to send.
  * @retval Data written
  */
uint8_t SD_IO_WriteByte(uint8_t Data)
{
 80010c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tmp;

  /* Send the byte */
  SPIx_WriteReadData(&Data,&tmp,1);
 80010c6:	240f      	movs	r4, #15
{
 80010c8:	466b      	mov	r3, sp
  SPIx_WriteReadData(&Data,&tmp,1);
 80010ca:	446c      	add	r4, sp
{
 80010cc:	71d8      	strb	r0, [r3, #7]
 80010ce:	3307      	adds	r3, #7
  SPIx_WriteReadData(&Data,&tmp,1);
 80010d0:	0018      	movs	r0, r3
 80010d2:	2201      	movs	r2, #1
 80010d4:	0021      	movs	r1, r4
 80010d6:	f7ff ffcb 	bl	8001070 <SPIx_WriteReadData>
  return tmp;
 80010da:	7820      	ldrb	r0, [r4, #0]
  }
 80010dc:	b004      	add	sp, #16
 80010de:	bd10      	pop	{r4, pc}

080010e0 <SD_IO_Init>:
{
 80010e0:	b510      	push	{r4, lr}
 80010e2:	b088      	sub	sp, #32
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80010e4:	2214      	movs	r2, #20
 80010e6:	2100      	movs	r1, #0
 80010e8:	a803      	add	r0, sp, #12
 80010ea:	f001 ffc9 	bl	8003080 <memset>
  SD_CS_GPIO_CLK_ENABLE();
 80010ee:	2008      	movs	r0, #8
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <SD_IO_Init+0x7c>)
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2401      	movs	r4, #1
  SD_CS_GPIO_CLK_ENABLE();
 80010f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010f6:	4301      	orrs	r1, r0
 80010f8:	6359      	str	r1, [r3, #52]	; 0x34
  LCD_CS_GPIO_CLK_ENABLE();
 80010fa:	2102      	movs	r1, #2
  SD_CS_GPIO_CLK_ENABLE();
 80010fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010fe:	4002      	ands	r2, r0
 8001100:	9201      	str	r2, [sp, #4]
 8001102:	9a01      	ldr	r2, [sp, #4]
  LCD_CS_GPIO_CLK_ENABLE();
 8001104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  SD_CS_HIGH();
 8001106:	4816      	ldr	r0, [pc, #88]	; (8001160 <SD_IO_Init+0x80>)
  LCD_CS_GPIO_CLK_ENABLE();
 8001108:	430a      	orrs	r2, r1
 800110a:	635a      	str	r2, [r3, #52]	; 0x34
 800110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  SD_CS_HIGH();
 800110e:	2201      	movs	r2, #1
  LCD_CS_GPIO_CLK_ENABLE();
 8001110:	400b      	ands	r3, r1
 8001112:	9302      	str	r3, [sp, #8]
  SD_CS_HIGH();
 8001114:	313e      	adds	r1, #62	; 0x3e
  LCD_CS_GPIO_CLK_ENABLE();
 8001116:	9b02      	ldr	r3, [sp, #8]
  SD_CS_HIGH();
 8001118:	f000 fa10 	bl	800153c <HAL_GPIO_WritePin>
  LCD_CS_HIGH();
 800111c:	2201      	movs	r2, #1
 800111e:	4811      	ldr	r0, [pc, #68]	; (8001164 <SD_IO_Init+0x84>)
 8001120:	0011      	movs	r1, r2
 8001122:	f000 fa0b 	bl	800153c <HAL_GPIO_WritePin>
  gpioinitstruct.Pin = SD_CS_PIN;
 8001126:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001128:	a903      	add	r1, sp, #12
  gpioinitstruct.Pin = SD_CS_PIN;
 800112a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <SD_IO_Init+0x80>)
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	3b3d      	subs	r3, #61	; 0x3d
 8001130:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	9404      	str	r4, [sp, #16]
  gpioinitstruct.Pull = GPIO_PULLUP;
 8001134:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001136:	f000 f8e3 	bl	8001300 <HAL_GPIO_Init>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 800113a:	a903      	add	r1, sp, #12
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <SD_IO_Init+0x80>)
  gpioinitstruct.Pin   = LCD_CS_PIN;
 800113e:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001140:	f000 f8de 	bl	8001300 <HAL_GPIO_Init>
  SPIx_Init();
 8001144:	f7ff ff30 	bl	8000fa8 <SPIx_Init>
 8001148:	3409      	adds	r4, #9
 800114a:	3c01      	subs	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800114c:	20ff      	movs	r0, #255	; 0xff
 800114e:	b2e4      	uxtb	r4, r4
 8001150:	f7ff ffb8 	bl	80010c4 <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 8001154:	2c00      	cmp	r4, #0
 8001156:	d1f8      	bne.n	800114a <SD_IO_Init+0x6a>
}
 8001158:	b008      	add	sp, #32
 800115a:	bd10      	pop	{r4, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	50000c00 	.word	0x50000c00
 8001164:	50000400 	.word	0x50000400

08001168 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <_sbrk+0x2c>)
{
 800116a:	b510      	push	{r4, lr}
	if (heap_end == 0)
 800116c:	6819      	ldr	r1, [r3, #0]
{
 800116e:	0002      	movs	r2, r0
	if (heap_end == 0)
 8001170:	2900      	cmp	r1, #0
 8001172:	d101      	bne.n	8001178 <_sbrk+0x10>
		heap_end = &end;
 8001174:	4908      	ldr	r1, [pc, #32]	; (8001198 <_sbrk+0x30>)
 8001176:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001178:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800117a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800117c:	1882      	adds	r2, r0, r2
 800117e:	428a      	cmp	r2, r1
 8001180:	d906      	bls.n	8001190 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001182:	f001 fd3b 	bl	8002bfc <__errno>
 8001186:	230c      	movs	r3, #12
 8001188:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800118a:	2001      	movs	r0, #1
 800118c:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800118e:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8001190:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001192:	e7fc      	b.n	800118e <_sbrk+0x26>
 8001194:	2000059c 	.word	0x2000059c
 8001198:	20000b78 	.word	0x20000b78

0800119c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <SystemInit+0xc>)
 80011a0:	0512      	lsls	r2, r2, #20
 80011a2:	609a      	str	r2, [r3, #8]
#endif
}
 80011a4:	4770      	bx	lr
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_InitTick+0x44>)
{
 80011ae:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 80011b0:	6819      	ldr	r1, [r3, #0]
{
 80011b2:	0005      	movs	r5, r0
  if (uwTickFreq != 0U)
 80011b4:	2900      	cmp	r1, #0
 80011b6:	d101      	bne.n	80011bc <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80011ba:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80011bc:	20fa      	movs	r0, #250	; 0xfa
 80011be:	0080      	lsls	r0, r0, #2
 80011c0:	f7fe ffb2 	bl	8000128 <__udivsi3>
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_InitTick+0x48>)
 80011c6:	0001      	movs	r1, r0
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	f7fe ffad 	bl	8000128 <__udivsi3>
 80011ce:	f000 f87d 	bl	80012cc <HAL_SYSTICK_Config>
 80011d2:	1e04      	subs	r4, r0, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	2d03      	cmp	r5, #3
 80011d8:	d8ee      	bhi.n	80011b8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011da:	0002      	movs	r2, r0
 80011dc:	2001      	movs	r0, #1
 80011de:	0029      	movs	r1, r5
 80011e0:	4240      	negs	r0, r0
 80011e2:	f000 f843 	bl	800126c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <HAL_InitTick+0x4c>)
 80011e8:	0020      	movs	r0, r4
 80011ea:	601d      	str	r5, [r3, #0]
 80011ec:	e7e5      	b.n	80011ba <HAL_InitTick+0xe>
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004
 80011f8:	2000000c 	.word	0x2000000c

080011fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_Init+0x24>)
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	6811      	ldr	r1, [r2, #0]
{
 8001204:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001206:	430b      	orrs	r3, r1
 8001208:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff ffce 	bl	80011ac <HAL_InitTick>
 8001210:	1e04      	subs	r4, r0, #0
 8001212:	d103      	bne.n	800121c <HAL_Init+0x20>
  HAL_MspInit();
 8001214:	f7ff fe1a 	bl	8000e4c <HAL_MspInit>
}
 8001218:	0020      	movs	r0, r4
 800121a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800121c:	2401      	movs	r4, #1
 800121e:	e7fb      	b.n	8001218 <HAL_Init+0x1c>
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001224:	4a03      	ldr	r2, [pc, #12]	; (8001234 <HAL_IncTick+0x10>)
 8001226:	4904      	ldr	r1, [pc, #16]	; (8001238 <HAL_IncTick+0x14>)
 8001228:	6813      	ldr	r3, [r2, #0]
 800122a:	6809      	ldr	r1, [r1, #0]
 800122c:	185b      	adds	r3, r3, r1
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	4770      	bx	lr
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	20000700 	.word	0x20000700
 8001238:	20000008 	.word	0x20000008

0800123c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800123c:	4b01      	ldr	r3, [pc, #4]	; (8001244 <HAL_GetTick+0x8>)
 800123e:	6818      	ldr	r0, [r3, #0]
}
 8001240:	4770      	bx	lr
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	20000700 	.word	0x20000700

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b570      	push	{r4, r5, r6, lr}
 800124a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff fff6 	bl	800123c <HAL_GetTick>
 8001250:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	1c63      	adds	r3, r4, #1
 8001254:	d002      	beq.n	800125c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <HAL_Delay+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125c:	f7ff ffee 	bl	800123c <HAL_GetTick>
 8001260:	1b40      	subs	r0, r0, r5
 8001262:	4284      	cmp	r4, r0
 8001264:	d8fa      	bhi.n	800125c <HAL_Delay+0x14>
  {
  }
}
 8001266:	bd70      	pop	{r4, r5, r6, pc}
 8001268:	20000008 	.word	0x20000008

0800126c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b570      	push	{r4, r5, r6, lr}
 800126e:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001270:	2800      	cmp	r0, #0
 8001272:	db12      	blt.n	800129a <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001274:	0883      	lsrs	r3, r0, #2
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <HAL_NVIC_SetPriority+0x58>)
 8001278:	2403      	movs	r4, #3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	189b      	adds	r3, r3, r2
 800127e:	22ff      	movs	r2, #255	; 0xff
 8001280:	4020      	ands	r0, r4
 8001282:	40a0      	lsls	r0, r4
 8001284:	0014      	movs	r4, r2
 8001286:	25c0      	movs	r5, #192	; 0xc0
 8001288:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800128a:	4011      	ands	r1, r2
 800128c:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128e:	00ad      	lsls	r5, r5, #2
 8001290:	595e      	ldr	r6, [r3, r5]
 8001292:	43a6      	bics	r6, r4
 8001294:	4331      	orrs	r1, r6
 8001296:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001298:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129a:	2403      	movs	r4, #3
 800129c:	230f      	movs	r3, #15
 800129e:	b2c0      	uxtb	r0, r0
 80012a0:	4003      	ands	r3, r0
 80012a2:	4020      	ands	r0, r4
 80012a4:	40a0      	lsls	r0, r4
 80012a6:	34fc      	adds	r4, #252	; 0xfc
 80012a8:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012aa:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ac:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ae:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b0:	3b08      	subs	r3, #8
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <HAL_NVIC_SetPriority+0x5c>)
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	189b      	adds	r3, r3, r2
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	43aa      	bics	r2, r5
 80012be:	4311      	orrs	r1, r2
 80012c0:	61d9      	str	r1, [r3, #28]
 80012c2:	e7e9      	b.n	8001298 <HAL_NVIC_SetPriority+0x2c>
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_SYSTICK_Config+0x28>)
 80012ce:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d0:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d80d      	bhi.n	80012f2 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d6:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012dc:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012de:	6a03      	ldr	r3, [r0, #32]
 80012e0:	0609      	lsls	r1, r1, #24
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	430b      	orrs	r3, r1
 80012e8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ea:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ec:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ee:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80012f2:	4770      	bx	lr
 80012f4:	00ffffff 	.word	0x00ffffff
 80012f8:	e000e010 	.word	0xe000e010
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	680b      	ldr	r3, [r1, #0]
{
 8001304:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8001308:	2300      	movs	r3, #0
{
 800130a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130c:	9a02      	ldr	r2, [sp, #8]
 800130e:	40da      	lsrs	r2, r3
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 8001312:	b005      	add	sp, #20
 8001314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001316:	2201      	movs	r2, #1
 8001318:	409a      	lsls	r2, r3
 800131a:	9203      	str	r2, [sp, #12]
 800131c:	9903      	ldr	r1, [sp, #12]
 800131e:	9a02      	ldr	r2, [sp, #8]
 8001320:	400a      	ands	r2, r1
 8001322:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8001324:	d100      	bne.n	8001328 <HAL_GPIO_Init+0x28>
 8001326:	e085      	b.n	8001434 <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001328:	9a01      	ldr	r2, [sp, #4]
 800132a:	2110      	movs	r1, #16
 800132c:	6852      	ldr	r2, [r2, #4]
 800132e:	0016      	movs	r6, r2
 8001330:	438e      	bics	r6, r1
 8001332:	2e02      	cmp	r6, #2
 8001334:	d10e      	bne.n	8001354 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001336:	2507      	movs	r5, #7
 8001338:	401d      	ands	r5, r3
 800133a:	00ad      	lsls	r5, r5, #2
 800133c:	3901      	subs	r1, #1
 800133e:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8001340:	08dc      	lsrs	r4, r3, #3
 8001342:	00a4      	lsls	r4, r4, #2
 8001344:	1904      	adds	r4, r0, r4
 8001346:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001348:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134a:	9901      	ldr	r1, [sp, #4]
 800134c:	6909      	ldr	r1, [r1, #16]
 800134e:	40a9      	lsls	r1, r5
 8001350:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8001352:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001354:	2403      	movs	r4, #3
 8001356:	005f      	lsls	r7, r3, #1
 8001358:	40bc      	lsls	r4, r7
 800135a:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 800135c:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800135e:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001360:	4025      	ands	r5, r4
 8001362:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001364:	2503      	movs	r5, #3
 8001366:	4015      	ands	r5, r2
 8001368:	40bd      	lsls	r5, r7
 800136a:	4661      	mov	r1, ip
 800136c:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800136e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001370:	2e01      	cmp	r6, #1
 8001372:	d80f      	bhi.n	8001394 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001374:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8001376:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001378:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800137a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800137c:	40bd      	lsls	r5, r7
 800137e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001380:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001382:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001384:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001386:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001388:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800138a:	2101      	movs	r1, #1
 800138c:	400d      	ands	r5, r1
 800138e:	409d      	lsls	r5, r3
 8001390:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001392:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001394:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001396:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001398:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800139a:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800139c:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800139e:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a0:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013a2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80013a4:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a6:	420a      	tst	r2, r1
 80013a8:	d044      	beq.n	8001434 <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013aa:	2603      	movs	r6, #3
 80013ac:	240f      	movs	r4, #15
 80013ae:	4922      	ldr	r1, [pc, #136]	; (8001438 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 80013b0:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013b2:	401e      	ands	r6, r3
 80013b4:	00ad      	lsls	r5, r5, #2
 80013b6:	00f6      	lsls	r6, r6, #3
 80013b8:	186d      	adds	r5, r5, r1
 80013ba:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013bc:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 80013be:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013c0:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013c2:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013c4:	2400      	movs	r4, #0
 80013c6:	4288      	cmp	r0, r1
 80013c8:	d00c      	beq.n	80013e4 <HAL_GPIO_Init+0xe4>
 80013ca:	491c      	ldr	r1, [pc, #112]	; (800143c <HAL_GPIO_Init+0x13c>)
 80013cc:	3401      	adds	r4, #1
 80013ce:	4288      	cmp	r0, r1
 80013d0:	d008      	beq.n	80013e4 <HAL_GPIO_Init+0xe4>
 80013d2:	491b      	ldr	r1, [pc, #108]	; (8001440 <HAL_GPIO_Init+0x140>)
 80013d4:	3401      	adds	r4, #1
 80013d6:	4288      	cmp	r0, r1
 80013d8:	d004      	beq.n	80013e4 <HAL_GPIO_Init+0xe4>
 80013da:	491a      	ldr	r1, [pc, #104]	; (8001444 <HAL_GPIO_Init+0x144>)
 80013dc:	3403      	adds	r4, #3
 80013de:	4288      	cmp	r0, r1
 80013e0:	d100      	bne.n	80013e4 <HAL_GPIO_Init+0xe4>
 80013e2:	3c02      	subs	r4, #2
 80013e4:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 80013e6:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013e8:	433c      	orrs	r4, r7
          temp |= iocurrent;
 80013ea:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 80013ec:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 80013ee:	4c16      	ldr	r4, [pc, #88]	; (8001448 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 80013f0:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 80013f2:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 80013f4:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f6:	03d1      	lsls	r1, r2, #15
 80013f8:	d401      	bmi.n	80013fe <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 80013fa:	003e      	movs	r6, r7
 80013fc:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 80013fe:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8001400:	4e12      	ldr	r6, [pc, #72]	; (800144c <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 8001402:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 8001404:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 8001406:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001408:	0391      	lsls	r1, r2, #14
 800140a:	d401      	bmi.n	8001410 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 800140c:	402c      	ands	r4, r5
 800140e:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8001410:	4c09      	ldr	r4, [pc, #36]	; (8001438 <HAL_GPIO_Init+0x138>)
 8001412:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8001414:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8001416:	9e00      	ldr	r6, [sp, #0]
 8001418:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800141a:	02d1      	lsls	r1, r2, #11
 800141c:	d401      	bmi.n	8001422 <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 800141e:	003e      	movs	r6, r7
 8001420:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 8001422:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8001424:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8001426:	9f00      	ldr	r7, [sp, #0]
 8001428:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142a:	0292      	lsls	r2, r2, #10
 800142c:	d401      	bmi.n	8001432 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 800142e:	402e      	ands	r6, r5
 8001430:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 8001432:	6067      	str	r7, [r4, #4]
    position++;
 8001434:	3301      	adds	r3, #1
 8001436:	e769      	b.n	800130c <HAL_GPIO_Init+0xc>
 8001438:	40021800 	.word	0x40021800
 800143c:	50000400 	.word	0x50000400
 8001440:	50000800 	.word	0x50000800
 8001444:	50000c00 	.word	0x50000c00
 8001448:	40021804 	.word	0x40021804
 800144c:	40021808 	.word	0x40021808

08001450 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001450:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 8001452:	2300      	movs	r3, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001454:	2703      	movs	r7, #3
{
 8001456:	b085      	sub	sp, #20
 8001458:	9102      	str	r1, [sp, #8]
  while ((GPIO_Pin >> position) != 0x00u)
 800145a:	9a02      	ldr	r2, [sp, #8]
 800145c:	40da      	lsrs	r2, r3
 800145e:	d101      	bne.n	8001464 <HAL_GPIO_DeInit+0x14>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
    }

    position++;
  }
}
 8001460:	b005      	add	sp, #20
 8001462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001464:	2201      	movs	r2, #1
 8001466:	409a      	lsls	r2, r3
 8001468:	9902      	ldr	r1, [sp, #8]
 800146a:	9200      	str	r2, [sp, #0]
 800146c:	4011      	ands	r1, r2
    if (iocurrent != 0x00u)
 800146e:	d056      	beq.n	800151e <HAL_GPIO_DeInit+0xce>
 8001470:	4c2c      	ldr	r4, [pc, #176]	; (8001524 <HAL_GPIO_DeInit+0xd4>)
      tmp = EXTI->EXTICR[position >> 2u];
 8001472:	089a      	lsrs	r2, r3, #2
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001474:	001d      	movs	r5, r3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	1912      	adds	r2, r2, r4
 800147a:	240f      	movs	r4, #15
 800147c:	403d      	ands	r5, r7
 800147e:	00ed      	lsls	r5, r5, #3
 8001480:	40ac      	lsls	r4, r5
      tmp = EXTI->EXTICR[position >> 2u];
 8001482:	6e16      	ldr	r6, [r2, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001484:	9401      	str	r4, [sp, #4]
 8001486:	4026      	ands	r6, r4
 8001488:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800148a:	26a0      	movs	r6, #160	; 0xa0
 800148c:	2400      	movs	r4, #0
 800148e:	05f6      	lsls	r6, r6, #23
 8001490:	42b0      	cmp	r0, r6
 8001492:	d00f      	beq.n	80014b4 <HAL_GPIO_DeInit+0x64>
 8001494:	4c24      	ldr	r4, [pc, #144]	; (8001528 <HAL_GPIO_DeInit+0xd8>)
 8001496:	46a4      	mov	ip, r4
 8001498:	2401      	movs	r4, #1
 800149a:	4560      	cmp	r0, ip
 800149c:	d00a      	beq.n	80014b4 <HAL_GPIO_DeInit+0x64>
 800149e:	4c23      	ldr	r4, [pc, #140]	; (800152c <HAL_GPIO_DeInit+0xdc>)
 80014a0:	46a4      	mov	ip, r4
 80014a2:	2402      	movs	r4, #2
 80014a4:	4560      	cmp	r0, ip
 80014a6:	d005      	beq.n	80014b4 <HAL_GPIO_DeInit+0x64>
 80014a8:	4c21      	ldr	r4, [pc, #132]	; (8001530 <HAL_GPIO_DeInit+0xe0>)
 80014aa:	46a4      	mov	ip, r4
 80014ac:	003c      	movs	r4, r7
 80014ae:	4560      	cmp	r0, ip
 80014b0:	d000      	beq.n	80014b4 <HAL_GPIO_DeInit+0x64>
 80014b2:	2405      	movs	r4, #5
 80014b4:	40ac      	lsls	r4, r5
 80014b6:	9d03      	ldr	r5, [sp, #12]
 80014b8:	42a5      	cmp	r5, r4
 80014ba:	d113      	bne.n	80014e4 <HAL_GPIO_DeInit+0x94>
        EXTI->IMR1 &= ~(iocurrent);
 80014bc:	43c9      	mvns	r1, r1
 80014be:	4e1d      	ldr	r6, [pc, #116]	; (8001534 <HAL_GPIO_DeInit+0xe4>)
 80014c0:	4c18      	ldr	r4, [pc, #96]	; (8001524 <HAL_GPIO_DeInit+0xd4>)
 80014c2:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 80014c4:	400d      	ands	r5, r1
 80014c6:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 80014c8:	4e1b      	ldr	r6, [pc, #108]	; (8001538 <HAL_GPIO_DeInit+0xe8>)
 80014ca:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 80014cc:	400d      	ands	r5, r1
 80014ce:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 80014d0:	6825      	ldr	r5, [r4, #0]
 80014d2:	400d      	ands	r5, r1
 80014d4:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80014d6:	6865      	ldr	r5, [r4, #4]
 80014d8:	4029      	ands	r1, r5
 80014da:	6061      	str	r1, [r4, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80014dc:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80014de:	9c01      	ldr	r4, [sp, #4]
 80014e0:	43a1      	bics	r1, r4
 80014e2:	6611      	str	r1, [r2, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80014e4:	003c      	movs	r4, r7
 80014e6:	0059      	lsls	r1, r3, #1
 80014e8:	408c      	lsls	r4, r1
 80014ea:	6802      	ldr	r2, [r0, #0]
 80014ec:	0021      	movs	r1, r4
 80014ee:	4322      	orrs	r2, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80014f0:	2407      	movs	r4, #7
 80014f2:	260f      	movs	r6, #15
 80014f4:	401c      	ands	r4, r3
 80014f6:	00a4      	lsls	r4, r4, #2
 80014f8:	40a6      	lsls	r6, r4
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014fa:	43c9      	mvns	r1, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80014fc:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80014fe:	08da      	lsrs	r2, r3, #3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	1882      	adds	r2, r0, r2
 8001504:	6a15      	ldr	r5, [r2, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001506:	9c00      	ldr	r4, [sp, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001508:	43b5      	bics	r5, r6
 800150a:	6215      	str	r5, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800150c:	6882      	ldr	r2, [r0, #8]
 800150e:	400a      	ands	r2, r1
 8001510:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001512:	6842      	ldr	r2, [r0, #4]
 8001514:	43a2      	bics	r2, r4
 8001516:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001518:	68c2      	ldr	r2, [r0, #12]
 800151a:	4011      	ands	r1, r2
 800151c:	60c1      	str	r1, [r0, #12]
    position++;
 800151e:	3301      	adds	r3, #1
 8001520:	e79b      	b.n	800145a <HAL_GPIO_DeInit+0xa>
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	40021800 	.word	0x40021800
 8001528:	50000400 	.word	0x50000400
 800152c:	50000800 	.word	0x50000800
 8001530:	50000c00 	.word	0x50000c00
 8001534:	40021804 	.word	0x40021804
 8001538:	40021808 	.word	0x40021808

0800153c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800153c:	2a00      	cmp	r2, #0
 800153e:	d001      	beq.n	8001544 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001540:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001542:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001544:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001546:	e7fc      	b.n	8001542 <HAL_GPIO_WritePin+0x6>

08001548 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001548:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800154a:	4c10      	ldr	r4, [pc, #64]	; (800158c <HAL_PWREx_ControlVoltageScaling+0x44>)
 800154c:	4910      	ldr	r1, [pc, #64]	; (8001590 <HAL_PWREx_ControlVoltageScaling+0x48>)
 800154e:	6823      	ldr	r3, [r4, #0]
{
 8001550:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001552:	400b      	ands	r3, r1
 8001554:	4303      	orrs	r3, r0
 8001556:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001558:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800155a:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	429a      	cmp	r2, r3
 8001560:	d10c      	bne.n	800157c <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	2306      	movs	r3, #6
 800156a:	4358      	muls	r0, r3
 800156c:	f7fe fddc 	bl	8000128 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001570:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001572:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001574:	00d2      	lsls	r2, r2, #3
 8001576:	6960      	ldr	r0, [r4, #20]
 8001578:	4010      	ands	r0, r2
 800157a:	d100      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x36>
}
 800157c:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 8001582:	3b01      	subs	r3, #1
 8001584:	e7f7      	b.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8001586:	2003      	movs	r0, #3
 8001588:	e7f8      	b.n	800157c <HAL_PWREx_ControlVoltageScaling+0x34>
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	40007000 	.word	0x40007000
 8001590:	fffff9ff 	.word	0xfffff9ff
 8001594:	20000004 	.word	0x20000004
 8001598:	000f4240 	.word	0x000f4240

0800159c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159e:	0004      	movs	r4, r0
 80015a0:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d102      	bne.n	80015ac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80015a6:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 80015a8:	b005      	add	sp, #20
 80015aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ac:	6803      	ldr	r3, [r0, #0]
 80015ae:	07db      	lsls	r3, r3, #31
 80015b0:	d410      	bmi.n	80015d4 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	079b      	lsls	r3, r3, #30
 80015b6:	d45c      	bmi.n	8001672 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	071b      	lsls	r3, r3, #28
 80015bc:	d500      	bpl.n	80015c0 <HAL_RCC_OscConfig+0x24>
 80015be:	e0c2      	b.n	8001746 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	075b      	lsls	r3, r3, #29
 80015c4:	d500      	bpl.n	80015c8 <HAL_RCC_OscConfig+0x2c>
 80015c6:	e0f4      	b.n	80017b2 <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015c8:	69e2      	ldr	r2, [r4, #28]
 80015ca:	2a00      	cmp	r2, #0
 80015cc:	d000      	beq.n	80015d0 <HAL_RCC_OscConfig+0x34>
 80015ce:	e173      	b.n	80018b8 <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 80015d0:	2000      	movs	r0, #0
 80015d2:	e7e9      	b.n	80015a8 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d4:	2238      	movs	r2, #56	; 0x38
 80015d6:	4dac      	ldr	r5, [pc, #688]	; (8001888 <HAL_RCC_OscConfig+0x2ec>)
 80015d8:	68ab      	ldr	r3, [r5, #8]
 80015da:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015dc:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015de:	2b10      	cmp	r3, #16
 80015e0:	d109      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e2:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015e4:	0793      	lsls	r3, r2, #30
 80015e6:	d108      	bne.n	80015fa <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	039b      	lsls	r3, r3, #14
 80015ec:	d5e1      	bpl.n	80015b2 <HAL_RCC_OscConfig+0x16>
 80015ee:	6863      	ldr	r3, [r4, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1de      	bne.n	80015b2 <HAL_RCC_OscConfig+0x16>
 80015f4:	e7d7      	b.n	80015a6 <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d0f6      	beq.n	80015e8 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fa:	2280      	movs	r2, #128	; 0x80
 80015fc:	6863      	ldr	r3, [r4, #4]
 80015fe:	0252      	lsls	r2, r2, #9
 8001600:	4293      	cmp	r3, r2
 8001602:	d111      	bne.n	8001628 <HAL_RCC_OscConfig+0x8c>
 8001604:	682a      	ldr	r2, [r5, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800160a:	f7ff fe17 	bl	800123c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001610:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001612:	02b6      	lsls	r6, r6, #10
 8001614:	682b      	ldr	r3, [r5, #0]
 8001616:	4233      	tst	r3, r6
 8001618:	d1cb      	bne.n	80015b2 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161a:	f7ff fe0f 	bl	800123c <HAL_GetTick>
 800161e:	1bc0      	subs	r0, r0, r7
 8001620:	2864      	cmp	r0, #100	; 0x64
 8001622:	d9f7      	bls.n	8001614 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8001624:	2003      	movs	r0, #3
 8001626:	e7bf      	b.n	80015a8 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	21a0      	movs	r1, #160	; 0xa0
 800162a:	02c9      	lsls	r1, r1, #11
 800162c:	428b      	cmp	r3, r1
 800162e:	d108      	bne.n	8001642 <HAL_RCC_OscConfig+0xa6>
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	6829      	ldr	r1, [r5, #0]
 8001634:	02db      	lsls	r3, r3, #11
 8001636:	430b      	orrs	r3, r1
 8001638:	602b      	str	r3, [r5, #0]
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	431a      	orrs	r2, r3
 800163e:	602a      	str	r2, [r5, #0]
 8001640:	e7e3      	b.n	800160a <HAL_RCC_OscConfig+0x6e>
 8001642:	682a      	ldr	r2, [r5, #0]
 8001644:	4991      	ldr	r1, [pc, #580]	; (800188c <HAL_RCC_OscConfig+0x2f0>)
 8001646:	400a      	ands	r2, r1
 8001648:	602a      	str	r2, [r5, #0]
 800164a:	682a      	ldr	r2, [r5, #0]
 800164c:	4990      	ldr	r1, [pc, #576]	; (8001890 <HAL_RCC_OscConfig+0x2f4>)
 800164e:	400a      	ands	r2, r1
 8001650:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1d9      	bne.n	800160a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8001656:	f7ff fdf1 	bl	800123c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800165c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165e:	02b6      	lsls	r6, r6, #10
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	4233      	tst	r3, r6
 8001664:	d0a5      	beq.n	80015b2 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001666:	f7ff fde9 	bl	800123c <HAL_GetTick>
 800166a:	1bc0      	subs	r0, r0, r7
 800166c:	2864      	cmp	r0, #100	; 0x64
 800166e:	d9f7      	bls.n	8001660 <HAL_RCC_OscConfig+0xc4>
 8001670:	e7d8      	b.n	8001624 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001672:	2338      	movs	r3, #56	; 0x38
 8001674:	4d84      	ldr	r5, [pc, #528]	; (8001888 <HAL_RCC_OscConfig+0x2ec>)
 8001676:	68aa      	ldr	r2, [r5, #8]
 8001678:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800167a:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800167c:	2b10      	cmp	r3, #16
 800167e:	d129      	bne.n	80016d4 <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001680:	2103      	movs	r1, #3
 8001682:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001684:	2a02      	cmp	r2, #2
 8001686:	d127      	bne.n	80016d8 <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001688:	682a      	ldr	r2, [r5, #0]
 800168a:	0552      	lsls	r2, r2, #21
 800168c:	d503      	bpl.n	8001696 <HAL_RCC_OscConfig+0xfa>
 800168e:	68e2      	ldr	r2, [r4, #12]
 8001690:	2a00      	cmp	r2, #0
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0xfa>
 8001694:	e787      	b.n	80015a6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	6869      	ldr	r1, [r5, #4]
 8001698:	6962      	ldr	r2, [r4, #20]
 800169a:	487e      	ldr	r0, [pc, #504]	; (8001894 <HAL_RCC_OscConfig+0x2f8>)
 800169c:	0212      	lsls	r2, r2, #8
 800169e:	4001      	ands	r1, r0
 80016a0:	430a      	orrs	r2, r1
 80016a2:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10d      	bne.n	80016c4 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	4a7b      	ldr	r2, [pc, #492]	; (8001898 <HAL_RCC_OscConfig+0x2fc>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	6922      	ldr	r2, [r4, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016b4:	682b      	ldr	r3, [r5, #0]
 80016b6:	4a79      	ldr	r2, [pc, #484]	; (800189c <HAL_RCC_OscConfig+0x300>)
 80016b8:	049b      	lsls	r3, r3, #18
 80016ba:	0f5b      	lsrs	r3, r3, #29
 80016bc:	40da      	lsrs	r2, r3
 80016be:	0013      	movs	r3, r2
 80016c0:	4a77      	ldr	r2, [pc, #476]	; (80018a0 <HAL_RCC_OscConfig+0x304>)
 80016c2:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016c4:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <HAL_RCC_OscConfig+0x308>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	f7ff fd70 	bl	80011ac <HAL_InitTick>
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d100      	bne.n	80016d2 <HAL_RCC_OscConfig+0x136>
 80016d0:	e772      	b.n	80015b8 <HAL_RCC_OscConfig+0x1c>
 80016d2:	e768      	b.n	80015a6 <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0d7      	beq.n	8001688 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d8:	68e3      	ldr	r3, [r4, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d020      	beq.n	8001720 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016de:	682b      	ldr	r3, [r5, #0]
 80016e0:	4a6d      	ldr	r2, [pc, #436]	; (8001898 <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016e4:	4013      	ands	r3, r2
 80016e6:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e8:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016ea:	4313      	orrs	r3, r2
 80016ec:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	682a      	ldr	r2, [r5, #0]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4313      	orrs	r3, r2
 80016f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016f8:	f7ff fda0 	bl	800123c <HAL_GetTick>
 80016fc:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fe:	682b      	ldr	r3, [r5, #0]
 8001700:	4233      	tst	r3, r6
 8001702:	d007      	beq.n	8001714 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	686a      	ldr	r2, [r5, #4]
 8001706:	6963      	ldr	r3, [r4, #20]
 8001708:	4962      	ldr	r1, [pc, #392]	; (8001894 <HAL_RCC_OscConfig+0x2f8>)
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	400a      	ands	r2, r1
 800170e:	4313      	orrs	r3, r2
 8001710:	606b      	str	r3, [r5, #4]
 8001712:	e751      	b.n	80015b8 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff fd92 	bl	800123c <HAL_GetTick>
 8001718:	1bc0      	subs	r0, r0, r7
 800171a:	2802      	cmp	r0, #2
 800171c:	d9ef      	bls.n	80016fe <HAL_RCC_OscConfig+0x162>
 800171e:	e781      	b.n	8001624 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	4a61      	ldr	r2, [pc, #388]	; (80018a8 <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001724:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8001726:	4013      	ands	r3, r2
 8001728:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800172a:	f7ff fd87 	bl	800123c <HAL_GetTick>
 800172e:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001730:	00f6      	lsls	r6, r6, #3
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	4233      	tst	r3, r6
 8001736:	d100      	bne.n	800173a <HAL_RCC_OscConfig+0x19e>
 8001738:	e73e      	b.n	80015b8 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff fd7f 	bl	800123c <HAL_GetTick>
 800173e:	1bc0      	subs	r0, r0, r7
 8001740:	2802      	cmp	r0, #2
 8001742:	d9f6      	bls.n	8001732 <HAL_RCC_OscConfig+0x196>
 8001744:	e76e      	b.n	8001624 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001746:	2138      	movs	r1, #56	; 0x38
 8001748:	4b4f      	ldr	r3, [pc, #316]	; (8001888 <HAL_RCC_OscConfig+0x2ec>)
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	001d      	movs	r5, r3
 800174e:	400a      	ands	r2, r1
 8001750:	2a18      	cmp	r2, #24
 8001752:	d108      	bne.n	8001766 <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001756:	079b      	lsls	r3, r3, #30
 8001758:	d400      	bmi.n	800175c <HAL_RCC_OscConfig+0x1c0>
 800175a:	e731      	b.n	80015c0 <HAL_RCC_OscConfig+0x24>
 800175c:	69a3      	ldr	r3, [r4, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d000      	beq.n	8001764 <HAL_RCC_OscConfig+0x1c8>
 8001762:	e72d      	b.n	80015c0 <HAL_RCC_OscConfig+0x24>
 8001764:	e71f      	b.n	80015a6 <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001766:	69a2      	ldr	r2, [r4, #24]
 8001768:	2301      	movs	r3, #1
 800176a:	2a00      	cmp	r2, #0
 800176c:	d010      	beq.n	8001790 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 800176e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001770:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 8001772:	4313      	orrs	r3, r2
 8001774:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001776:	f7ff fd61 	bl	800123c <HAL_GetTick>
 800177a:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800177e:	4233      	tst	r3, r6
 8001780:	d000      	beq.n	8001784 <HAL_RCC_OscConfig+0x1e8>
 8001782:	e71d      	b.n	80015c0 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fd5a 	bl	800123c <HAL_GetTick>
 8001788:	1bc0      	subs	r0, r0, r7
 800178a:	2802      	cmp	r0, #2
 800178c:	d9f6      	bls.n	800177c <HAL_RCC_OscConfig+0x1e0>
 800178e:	e749      	b.n	8001624 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8001790:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001792:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8001794:	439a      	bics	r2, r3
 8001796:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001798:	f7ff fd50 	bl	800123c <HAL_GetTick>
 800179c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80017a0:	4233      	tst	r3, r6
 80017a2:	d100      	bne.n	80017a6 <HAL_RCC_OscConfig+0x20a>
 80017a4:	e70c      	b.n	80015c0 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff fd49 	bl	800123c <HAL_GetTick>
 80017aa:	1bc0      	subs	r0, r0, r7
 80017ac:	2802      	cmp	r0, #2
 80017ae:	d9f6      	bls.n	800179e <HAL_RCC_OscConfig+0x202>
 80017b0:	e738      	b.n	8001624 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80017b2:	2138      	movs	r1, #56	; 0x38
 80017b4:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_RCC_OscConfig+0x2ec>)
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	001d      	movs	r5, r3
 80017ba:	400a      	ands	r2, r1
 80017bc:	2a20      	cmp	r2, #32
 80017be:	d108      	bne.n	80017d2 <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	079b      	lsls	r3, r3, #30
 80017c4:	d400      	bmi.n	80017c8 <HAL_RCC_OscConfig+0x22c>
 80017c6:	e6ff      	b.n	80015c8 <HAL_RCC_OscConfig+0x2c>
 80017c8:	68a3      	ldr	r3, [r4, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d000      	beq.n	80017d0 <HAL_RCC_OscConfig+0x234>
 80017ce:	e6fb      	b.n	80015c8 <HAL_RCC_OscConfig+0x2c>
 80017d0:	e6e9      	b.n	80015a6 <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d6:	0552      	lsls	r2, r2, #21
 80017d8:	4213      	tst	r3, r2
 80017da:	d100      	bne.n	80017de <HAL_RCC_OscConfig+0x242>
 80017dc:	e0ed      	b.n	80019ba <HAL_RCC_OscConfig+0x41e>
    FlagStatus       pwrclkchanged = RESET;
 80017de:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e0:	2780      	movs	r7, #128	; 0x80
 80017e2:	4e32      	ldr	r6, [pc, #200]	; (80018ac <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 80017e4:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e6:	6833      	ldr	r3, [r6, #0]
 80017e8:	007f      	lsls	r7, r7, #1
 80017ea:	423b      	tst	r3, r7
 80017ec:	d015      	beq.n	800181a <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ee:	68a3      	ldr	r3, [r4, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d122      	bne.n	800183a <HAL_RCC_OscConfig+0x29e>
 80017f4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80017f6:	4313      	orrs	r3, r2
 80017f8:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 80017fa:	f7ff fd1f 	bl	800123c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fe:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001800:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001802:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001804:	423b      	tst	r3, r7
 8001806:	d038      	beq.n	800187a <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 8001808:	9b00      	ldr	r3, [sp, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d000      	beq.n	8001810 <HAL_RCC_OscConfig+0x274>
 800180e:	e6db      	b.n	80015c8 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001810:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001812:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x314>)
 8001814:	4013      	ands	r3, r2
 8001816:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001818:	e6d6      	b.n	80015c8 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800181a:	6833      	ldr	r3, [r6, #0]
 800181c:	433b      	orrs	r3, r7
 800181e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001820:	f7ff fd0c 	bl	800123c <HAL_GetTick>
 8001824:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001826:	6833      	ldr	r3, [r6, #0]
 8001828:	423b      	tst	r3, r7
 800182a:	d1e0      	bne.n	80017ee <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182c:	f7ff fd06 	bl	800123c <HAL_GetTick>
 8001830:	9b01      	ldr	r3, [sp, #4]
 8001832:	1ac0      	subs	r0, r0, r3
 8001834:	2802      	cmp	r0, #2
 8001836:	d9f6      	bls.n	8001826 <HAL_RCC_OscConfig+0x28a>
 8001838:	e6f4      	b.n	8001624 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800183c:	2b05      	cmp	r3, #5
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x2b0>
 8001840:	3b01      	subs	r3, #1
 8001842:	4313      	orrs	r3, r2
 8001844:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001846:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001848:	2301      	movs	r3, #1
 800184a:	e7d4      	b.n	80017f6 <HAL_RCC_OscConfig+0x25a>
 800184c:	2101      	movs	r1, #1
 800184e:	438a      	bics	r2, r1
 8001850:	65ea      	str	r2, [r5, #92]	; 0x5c
 8001852:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001854:	3103      	adds	r1, #3
 8001856:	438a      	bics	r2, r1
 8001858:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1cd      	bne.n	80017fa <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 800185e:	f7ff fced 	bl	800123c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001862:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001864:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001866:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001868:	423b      	tst	r3, r7
 800186a:	d0cd      	beq.n	8001808 <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff fce6 	bl	800123c <HAL_GetTick>
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_RCC_OscConfig+0x318>)
 8001872:	1b80      	subs	r0, r0, r6
 8001874:	4298      	cmp	r0, r3
 8001876:	d9f6      	bls.n	8001866 <HAL_RCC_OscConfig+0x2ca>
 8001878:	e6d4      	b.n	8001624 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff fcdf 	bl	800123c <HAL_GetTick>
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_RCC_OscConfig+0x318>)
 8001880:	1b80      	subs	r0, r0, r6
 8001882:	4298      	cmp	r0, r3
 8001884:	d9bd      	bls.n	8001802 <HAL_RCC_OscConfig+0x266>
 8001886:	e6cd      	b.n	8001624 <HAL_RCC_OscConfig+0x88>
 8001888:	40021000 	.word	0x40021000
 800188c:	fffeffff 	.word	0xfffeffff
 8001890:	fffbffff 	.word	0xfffbffff
 8001894:	ffff80ff 	.word	0xffff80ff
 8001898:	ffffc7ff 	.word	0xffffc7ff
 800189c:	00f42400 	.word	0x00f42400
 80018a0:	20000004 	.word	0x20000004
 80018a4:	2000000c 	.word	0x2000000c
 80018a8:	fffffeff 	.word	0xfffffeff
 80018ac:	40007000 	.word	0x40007000
 80018b0:	efffffff 	.word	0xefffffff
 80018b4:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b8:	2038      	movs	r0, #56	; 0x38
 80018ba:	4b44      	ldr	r3, [pc, #272]	; (80019cc <HAL_RCC_OscConfig+0x430>)
 80018bc:	6899      	ldr	r1, [r3, #8]
 80018be:	001d      	movs	r5, r3
 80018c0:	4001      	ands	r1, r0
 80018c2:	2910      	cmp	r1, #16
 80018c4:	d052      	beq.n	800196c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_DISABLE();
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4941      	ldr	r1, [pc, #260]	; (80019d0 <HAL_RCC_OscConfig+0x434>)
 80018ca:	400b      	ands	r3, r1
 80018cc:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ce:	2a02      	cmp	r2, #2
 80018d0:	d135      	bne.n	800193e <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 80018d2:	f7ff fcb3 	bl	800123c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80018d8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018da:	04b6      	lsls	r6, r6, #18
 80018dc:	682b      	ldr	r3, [r5, #0]
 80018de:	4233      	tst	r3, r6
 80018e0:	d127      	bne.n	8001932 <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018e4:	6a23      	ldr	r3, [r4, #32]
 80018e6:	68ea      	ldr	r2, [r5, #12]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	493a      	ldr	r1, [pc, #232]	; (80019d4 <HAL_RCC_OscConfig+0x438>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	4313      	orrs	r3, r2
 80018f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018f2:	4313      	orrs	r3, r2
 80018f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018f6:	4313      	orrs	r3, r2
 80018f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fa:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fc:	0212      	lsls	r2, r2, #8
 80018fe:	4313      	orrs	r3, r2
 8001900:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	682a      	ldr	r2, [r5, #0]
 8001906:	045b      	lsls	r3, r3, #17
 8001908:	4313      	orrs	r3, r2
 800190a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	68ea      	ldr	r2, [r5, #12]
 8001910:	055b      	lsls	r3, r3, #21
 8001912:	4313      	orrs	r3, r2
 8001914:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001916:	f7ff fc91 	bl	800123c <HAL_GetTick>
 800191a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191c:	04a4      	lsls	r4, r4, #18
 800191e:	682b      	ldr	r3, [r5, #0]
 8001920:	4223      	tst	r3, r4
 8001922:	d000      	beq.n	8001926 <HAL_RCC_OscConfig+0x38a>
 8001924:	e654      	b.n	80015d0 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff fc89 	bl	800123c <HAL_GetTick>
 800192a:	1b80      	subs	r0, r0, r6
 800192c:	2802      	cmp	r0, #2
 800192e:	d9f6      	bls.n	800191e <HAL_RCC_OscConfig+0x382>
 8001930:	e678      	b.n	8001624 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff fc83 	bl	800123c <HAL_GetTick>
 8001936:	1bc0      	subs	r0, r0, r7
 8001938:	2802      	cmp	r0, #2
 800193a:	d9cf      	bls.n	80018dc <HAL_RCC_OscConfig+0x340>
 800193c:	e672      	b.n	8001624 <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800193e:	2203      	movs	r2, #3
 8001940:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001942:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001944:	4393      	bics	r3, r2
 8001946:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001948:	68eb      	ldr	r3, [r5, #12]
 800194a:	4a23      	ldr	r2, [pc, #140]	; (80019d8 <HAL_RCC_OscConfig+0x43c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194c:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800194e:	4013      	ands	r3, r2
 8001950:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001952:	f7ff fc73 	bl	800123c <HAL_GetTick>
 8001956:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	4223      	tst	r3, r4
 800195c:	d100      	bne.n	8001960 <HAL_RCC_OscConfig+0x3c4>
 800195e:	e637      	b.n	80015d0 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff fc6c 	bl	800123c <HAL_GetTick>
 8001964:	1b80      	subs	r0, r0, r6
 8001966:	2802      	cmp	r0, #2
 8001968:	d9f6      	bls.n	8001958 <HAL_RCC_OscConfig+0x3bc>
 800196a:	e65b      	b.n	8001624 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800196c:	2a01      	cmp	r2, #1
 800196e:	d100      	bne.n	8001972 <HAL_RCC_OscConfig+0x3d6>
 8001970:	e619      	b.n	80015a6 <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 8001972:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001974:	2303      	movs	r3, #3
 8001976:	6a22      	ldr	r2, [r4, #32]
 8001978:	4003      	ands	r3, r0
 800197a:	4293      	cmp	r3, r2
 800197c:	d000      	beq.n	8001980 <HAL_RCC_OscConfig+0x3e4>
 800197e:	e612      	b.n	80015a6 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001980:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001984:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	4293      	cmp	r3, r2
 8001988:	d000      	beq.n	800198c <HAL_RCC_OscConfig+0x3f0>
 800198a:	e60c      	b.n	80015a6 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198c:	22fe      	movs	r2, #254	; 0xfe
 800198e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001990:	01d2      	lsls	r2, r2, #7
 8001992:	4002      	ands	r2, r0
 8001994:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d000      	beq.n	800199c <HAL_RCC_OscConfig+0x400>
 800199a:	e604      	b.n	80015a6 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800199c:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800199e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019a0:	039b      	lsls	r3, r3, #14
 80019a2:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d000      	beq.n	80019aa <HAL_RCC_OscConfig+0x40e>
 80019a8:	e5fd      	b.n	80015a6 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019ac:	0f40      	lsrs	r0, r0, #29
 80019ae:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019b0:	1ac0      	subs	r0, r0, r3
 80019b2:	1e43      	subs	r3, r0, #1
 80019b4:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80019b6:	b2c0      	uxtb	r0, r0
 80019b8:	e5f6      	b.n	80015a8 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80019bc:	4313      	orrs	r3, r2
 80019be:	63eb      	str	r3, [r5, #60]	; 0x3c
 80019c0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80019c2:	4013      	ands	r3, r2
 80019c4:	9303      	str	r3, [sp, #12]
 80019c6:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e709      	b.n	80017e0 <HAL_RCC_OscConfig+0x244>
 80019cc:	40021000 	.word	0x40021000
 80019d0:	feffffff 	.word	0xfeffffff
 80019d4:	1fc1808c 	.word	0x1fc1808c
 80019d8:	effeffff 	.word	0xeffeffff

080019dc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019dc:	2338      	movs	r3, #56	; 0x38
 80019de:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x80>)
{
 80019e0:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019e2:	6891      	ldr	r1, [r2, #8]
 80019e4:	0014      	movs	r4, r2
 80019e6:	4219      	tst	r1, r3
 80019e8:	d108      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019ea:	2101      	movs	r1, #1
 80019ec:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019ee:	481c      	ldr	r0, [pc, #112]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019f0:	049b      	lsls	r3, r3, #18
 80019f2:	0f5b      	lsrs	r3, r3, #29
 80019f4:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 80019f6:	f7fe fb97 	bl	8000128 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80019fa:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019fc:	6891      	ldr	r1, [r2, #8]
 80019fe:	4019      	ands	r1, r3
 8001a00:	2908      	cmp	r1, #8
 8001a02:	d025      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a04:	6891      	ldr	r1, [r2, #8]
 8001a06:	4019      	ands	r1, r3
 8001a08:	2910      	cmp	r1, #16
 8001a0a:	d115      	bne.n	8001a38 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a0c:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a0e:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a10:	43db      	mvns	r3, r3
 8001a12:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a14:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a16:	0649      	lsls	r1, r1, #25
 8001a18:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a1a:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a1c:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a1e:	4015      	ands	r5, r2
    switch (pllsource)
 8001a20:	079b      	lsls	r3, r3, #30
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a24:	480f      	ldr	r0, [pc, #60]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a26:	f7fe fb7f 	bl	8000128 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a2a:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a2c:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a2e:	0f49      	lsrs	r1, r1, #29
 8001a30:	3101      	adds	r1, #1
 8001a32:	e7e0      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a34:	480a      	ldr	r0, [pc, #40]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x84>)
 8001a36:	e7f6      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a38:	6891      	ldr	r1, [r2, #8]
 8001a3a:	4019      	ands	r1, r3
 8001a3c:	2920      	cmp	r1, #32
 8001a3e:	d009      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a40:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8001a42:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b18      	cmp	r3, #24
 8001a48:	d1d7      	bne.n	80019fa <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8001a4a:	20fa      	movs	r0, #250	; 0xfa
 8001a4c:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8001a4e:	e7d4      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x88>)
 8001a52:	e7d2      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 8001a54:	2080      	movs	r0, #128	; 0x80
 8001a56:	0200      	lsls	r0, r0, #8
 8001a58:	e7cf      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x1e>
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	00f42400 	.word	0x00f42400
 8001a64:	007a1200 	.word	0x007a1200

08001a68 <HAL_RCC_ClockConfig>:
{
 8001a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a6a:	0005      	movs	r5, r0
 8001a6c:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001a72:	2001      	movs	r0, #1
}
 8001a74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a76:	2707      	movs	r7, #7
 8001a78:	4c4a      	ldr	r4, [pc, #296]	; (8001ba4 <HAL_RCC_ClockConfig+0x13c>)
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	403b      	ands	r3, r7
 8001a7e:	428b      	cmp	r3, r1
 8001a80:	d32a      	bcc.n	8001ad8 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a82:	6829      	ldr	r1, [r5, #0]
 8001a84:	078b      	lsls	r3, r1, #30
 8001a86:	d43b      	bmi.n	8001b00 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a88:	07cb      	lsls	r3, r1, #31
 8001a8a:	d448      	bmi.n	8001b1e <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	2707      	movs	r7, #7
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	403b      	ands	r3, r7
 8001a92:	429e      	cmp	r6, r3
 8001a94:	d20a      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	43bb      	bics	r3, r7
 8001a9a:	4333      	orrs	r3, r6
 8001a9c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001a9e:	f7ff fbcd 	bl	800123c <HAL_GetTick>
 8001aa2:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	403b      	ands	r3, r7
 8001aa8:	429e      	cmp	r6, r3
 8001aaa:	d16b      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	4c3e      	ldr	r4, [pc, #248]	; (8001ba8 <HAL_RCC_ClockConfig+0x140>)
 8001ab0:	075b      	lsls	r3, r3, #29
 8001ab2:	d46f      	bmi.n	8001b94 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ab4:	f7ff ff92 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 8001ab8:	68a3      	ldr	r3, [r4, #8]
 8001aba:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <HAL_RCC_ClockConfig+0x144>)
 8001abc:	051b      	lsls	r3, r3, #20
 8001abe:	0f1b      	lsrs	r3, r3, #28
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	589b      	ldr	r3, [r3, r2]
 8001ac4:	221f      	movs	r2, #31
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	40d8      	lsrs	r0, r3
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <HAL_RCC_ClockConfig+0x148>)
 8001acc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_ClockConfig+0x14c>)
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	f7ff fb6b 	bl	80011ac <HAL_InitTick>
 8001ad6:	e7cd      	b.n	8001a74 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	43bb      	bics	r3, r7
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001ae0:	f7ff fbac 	bl	800123c <HAL_GetTick>
 8001ae4:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	403b      	ands	r3, r7
 8001aea:	429e      	cmp	r6, r3
 8001aec:	d0c9      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aee:	f7ff fba5 	bl	800123c <HAL_GetTick>
 8001af2:	9b01      	ldr	r3, [sp, #4]
 8001af4:	1ac0      	subs	r0, r0, r3
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_RCC_ClockConfig+0x150>)
 8001af8:	4298      	cmp	r0, r3
 8001afa:	d9f4      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001afc:	2003      	movs	r0, #3
 8001afe:	e7b9      	b.n	8001a74 <HAL_RCC_ClockConfig+0xc>
 8001b00:	4a29      	ldr	r2, [pc, #164]	; (8001ba8 <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b02:	074b      	lsls	r3, r1, #29
 8001b04:	d504      	bpl.n	8001b10 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b06:	23e0      	movs	r3, #224	; 0xe0
 8001b08:	6890      	ldr	r0, [r2, #8]
 8001b0a:	01db      	lsls	r3, r3, #7
 8001b0c:	4303      	orrs	r3, r0
 8001b0e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	6893      	ldr	r3, [r2, #8]
 8001b12:	482a      	ldr	r0, [pc, #168]	; (8001bbc <HAL_RCC_ClockConfig+0x154>)
 8001b14:	4003      	ands	r3, r0
 8001b16:	68a8      	ldr	r0, [r5, #8]
 8001b18:	4303      	orrs	r3, r0
 8001b1a:	6093      	str	r3, [r2, #8]
 8001b1c:	e7b4      	b.n	8001a88 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	686a      	ldr	r2, [r5, #4]
 8001b20:	4f21      	ldr	r7, [pc, #132]	; (8001ba8 <HAL_RCC_ClockConfig+0x140>)
 8001b22:	2a01      	cmp	r2, #1
 8001b24:	d119      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	039b      	lsls	r3, r3, #14
 8001b2a:	d5a2      	bpl.n	8001a72 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b2c:	2107      	movs	r1, #7
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	438b      	bics	r3, r1
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8001b36:	f7ff fb81 	bl	800123c <HAL_GetTick>
 8001b3a:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3c:	2338      	movs	r3, #56	; 0x38
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	401a      	ands	r2, r3
 8001b42:	686b      	ldr	r3, [r5, #4]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d0a0      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4a:	f7ff fb77 	bl	800123c <HAL_GetTick>
 8001b4e:	9b01      	ldr	r3, [sp, #4]
 8001b50:	1ac0      	subs	r0, r0, r3
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_RCC_ClockConfig+0x150>)
 8001b54:	4298      	cmp	r0, r3
 8001b56:	d9f1      	bls.n	8001b3c <HAL_RCC_ClockConfig+0xd4>
 8001b58:	e7d0      	b.n	8001afc <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5a:	2a02      	cmp	r2, #2
 8001b5c:	d103      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	019b      	lsls	r3, r3, #6
 8001b62:	d4e3      	bmi.n	8001b2c <HAL_RCC_ClockConfig+0xc4>
 8001b64:	e785      	b.n	8001a72 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b66:	2a00      	cmp	r2, #0
 8001b68:	d103      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	055b      	lsls	r3, r3, #21
 8001b6e:	d4dd      	bmi.n	8001b2c <HAL_RCC_ClockConfig+0xc4>
 8001b70:	e77f      	b.n	8001a72 <HAL_RCC_ClockConfig+0xa>
 8001b72:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b74:	2a03      	cmp	r2, #3
 8001b76:	d103      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7a:	4219      	tst	r1, r3
 8001b7c:	d1d6      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xc4>
 8001b7e:	e778      	b.n	8001a72 <HAL_RCC_ClockConfig+0xa>
 8001b80:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001b82:	e7fa      	b.n	8001b7a <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7ff fb5a 	bl	800123c <HAL_GetTick>
 8001b88:	9b01      	ldr	r3, [sp, #4]
 8001b8a:	1ac0      	subs	r0, r0, r3
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x150>)
 8001b8e:	4298      	cmp	r0, r3
 8001b90:	d988      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
 8001b92:	e7b3      	b.n	8001afc <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b94:	68a3      	ldr	r3, [r4, #8]
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <HAL_RCC_ClockConfig+0x158>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	68ea      	ldr	r2, [r5, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60a3      	str	r3, [r4, #8]
 8001ba0:	e788      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x4c>
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08003300 	.word	0x08003300
 8001bb0:	20000004 	.word	0x20000004
 8001bb4:	2000000c 	.word	0x2000000c
 8001bb8:	00001388 	.word	0x00001388
 8001bbc:	fffff0ff 	.word	0xfffff0ff
 8001bc0:	ffff8fff 	.word	0xffff8fff

08001bc4 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001bc6:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	045b      	lsls	r3, r3, #17
 8001bcc:	0f5b      	lsrs	r3, r3, #29
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	589b      	ldr	r3, [r3, r2]
 8001bd2:	221f      	movs	r2, #31
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd8:	6810      	ldr	r0, [r2, #0]
 8001bda:	40d8      	lsrs	r0, r3
}
 8001bdc:	4770      	bx	lr
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08003340 	.word	0x08003340
 8001be8:	20000004 	.word	0x20000004

08001bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bf0:	682b      	ldr	r3, [r5, #0]
{
 8001bf2:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bf4:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bf6:	039b      	lsls	r3, r3, #14
 8001bf8:	d54f      	bpl.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	4c4b      	ldr	r4, [pc, #300]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001bfe:	0552      	lsls	r2, r2, #21
 8001c00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001c02:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c04:	4213      	tst	r3, r2
 8001c06:	d108      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001c0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c10:	4013      	ands	r3, r2
 8001c12:	9303      	str	r3, [sp, #12]
 8001c14:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001c16:	2301      	movs	r3, #1
 8001c18:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c1a:	2780      	movs	r7, #128	; 0x80
 8001c1c:	4e44      	ldr	r6, [pc, #272]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001c1e:	007f      	lsls	r7, r7, #1
 8001c20:	6833      	ldr	r3, [r6, #0]
 8001c22:	433b      	orrs	r3, r7
 8001c24:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c26:	f7ff fb09 	bl	800123c <HAL_GetTick>
 8001c2a:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c2c:	6833      	ldr	r3, [r6, #0]
 8001c2e:	423b      	tst	r3, r7
 8001c30:	d025      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c32:	23c0      	movs	r3, #192	; 0xc0
 8001c34:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c3a:	d00f      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001c3c:	69aa      	ldr	r2, [r5, #24]
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00c      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c42:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c44:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x148>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c46:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c48:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c4a:	2280      	movs	r2, #128	; 0x80
 8001c4c:	0252      	lsls	r2, r2, #9
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c54:	4938      	ldr	r1, [pc, #224]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c56:	400a      	ands	r2, r1
 8001c58:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c5a:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c5c:	07db      	lsls	r3, r3, #31
 8001c5e:	d506      	bpl.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff faec 	bl	800123c <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c64:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001c66:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c6a:	423b      	tst	r3, r7
 8001c6c:	d057      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x132>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c6e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c70:	4a30      	ldr	r2, [pc, #192]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x148>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c72:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c74:	4013      	ands	r3, r2
 8001c76:	69aa      	ldr	r2, [r5, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001c7c:	e006      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7ff fadd 	bl	800123c <HAL_GetTick>
 8001c82:	9b01      	ldr	r3, [sp, #4]
 8001c84:	1ac0      	subs	r0, r0, r3
 8001c86:	2802      	cmp	r0, #2
 8001c88:	d9d0      	bls.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8001c8a:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c8c:	9b00      	ldr	r3, [sp, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d103      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c94:	4a29      	ldr	r2, [pc, #164]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c9a:	682a      	ldr	r2, [r5, #0]
 8001c9c:	07d3      	lsls	r3, r2, #31
 8001c9e:	d506      	bpl.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ca0:	2403      	movs	r4, #3
 8001ca2:	4922      	ldr	r1, [pc, #136]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001ca4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001ca6:	43a3      	bics	r3, r4
 8001ca8:	686c      	ldr	r4, [r5, #4]
 8001caa:	4323      	orrs	r3, r4
 8001cac:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cae:	0793      	lsls	r3, r2, #30
 8001cb0:	d506      	bpl.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cb2:	240c      	movs	r4, #12
 8001cb4:	491d      	ldr	r1, [pc, #116]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001cb6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001cb8:	43a3      	bics	r3, r4
 8001cba:	68ac      	ldr	r4, [r5, #8]
 8001cbc:	4323      	orrs	r3, r4
 8001cbe:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cc0:	0653      	lsls	r3, r2, #25
 8001cc2:	d506      	bpl.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cc4:	4919      	ldr	r1, [pc, #100]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001cc6:	4c1e      	ldr	r4, [pc, #120]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001cc8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001cca:	4023      	ands	r3, r4
 8001ccc:	68ec      	ldr	r4, [r5, #12]
 8001cce:	4323      	orrs	r3, r4
 8001cd0:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cd2:	0453      	lsls	r3, r2, #17
 8001cd4:	d50f      	bpl.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cd6:	4915      	ldr	r1, [pc, #84]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001cd8:	696c      	ldr	r4, [r5, #20]
 8001cda:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	4323      	orrs	r3, r4
 8001ce2:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	05db      	lsls	r3, r3, #23
 8001ce8:	429c      	cmp	r4, r3
 8001cea:	d104      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	68cc      	ldr	r4, [r1, #12]
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	4323      	orrs	r3, r4
 8001cf4:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001cf6:	0513      	lsls	r3, r2, #20
 8001cf8:	d50f      	bpl.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001cfa:	490c      	ldr	r1, [pc, #48]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001cfc:	4c11      	ldr	r4, [pc, #68]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001cfe:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001d00:	692a      	ldr	r2, [r5, #16]
 8001d02:	4023      	ands	r3, r4
 8001d04:	4313      	orrs	r3, r2
 8001d06:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	01db      	lsls	r3, r3, #7
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d104      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	68ca      	ldr	r2, [r1, #12]
 8001d14:	025b      	lsls	r3, r3, #9
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 8001d1a:	b005      	add	sp, #20
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fa8d 	bl	800123c <HAL_GetTick>
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d24:	1b80      	subs	r0, r0, r6
 8001d26:	4298      	cmp	r0, r3
 8001d28:	d99e      	bls.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d2a:	e7ae      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40007000 	.word	0x40007000
 8001d34:	fffffcff 	.word	0xfffffcff
 8001d38:	fffeffff 	.word	0xfffeffff
 8001d3c:	efffffff 	.word	0xefffffff
 8001d40:	ffffcfff 	.word	0xffffcfff
 8001d44:	ffff3fff 	.word	0xffff3fff
 8001d48:	00001388 	.word	0x00001388

08001d4c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001d4c:	21a0      	movs	r1, #160	; 0xa0
 8001d4e:	6802      	ldr	r2, [r0, #0]
{
 8001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001d52:	68d3      	ldr	r3, [r2, #12]
{
 8001d54:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001d56:	438b      	bics	r3, r1
 8001d58:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001d5a:	f7ff fa6f 	bl	800123c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d5e:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8001d60:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001d62:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d64:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	422b      	tst	r3, r5
 8001d6c:	d001      	beq.n	8001d72 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001d6e:	2000      	movs	r0, #0
}
 8001d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d72:	f7ff fa63 	bl	800123c <HAL_GetTick>
 8001d76:	1b80      	subs	r0, r0, r6
 8001d78:	42b8      	cmp	r0, r7
 8001d7a:	d9f4      	bls.n	8001d66 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	e7f7      	b.n	8001d70 <HAL_RTC_WaitForSynchro+0x24>

08001d80 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001d82:	2740      	movs	r7, #64	; 0x40
 8001d84:	6803      	ldr	r3, [r0, #0]
{
 8001d86:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001d88:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 8001d8a:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001d8c:	423a      	tst	r2, r7
 8001d8e:	d10c      	bne.n	8001daa <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	68d9      	ldr	r1, [r3, #12]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001d98:	f7ff fa50 	bl	800123c <HAL_GetTick>
 8001d9c:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001d9e:	682b      	ldr	r3, [r5, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	423b      	tst	r3, r7
 8001da4:	d101      	bne.n	8001daa <RTC_EnterInitMode+0x2a>
 8001da6:	2c03      	cmp	r4, #3
 8001da8:	d101      	bne.n	8001dae <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 8001daa:	0020      	movs	r0, r4
 8001dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001dae:	f7ff fa45 	bl	800123c <HAL_GetTick>
 8001db2:	23fa      	movs	r3, #250	; 0xfa
 8001db4:	1b80      	subs	r0, r0, r6
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4298      	cmp	r0, r3
 8001dba:	d9f0      	bls.n	8001d9e <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001dbc:	002b      	movs	r3, r5
 8001dbe:	2403      	movs	r4, #3
 8001dc0:	3329      	adds	r3, #41	; 0x29
 8001dc2:	701c      	strb	r4, [r3, #0]
 8001dc4:	e7eb      	b.n	8001d9e <RTC_EnterInitMode+0x1e>
	...

08001dc8 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001dc8:	2280      	movs	r2, #128	; 0x80
{
 8001dca:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001dcc:	4c0f      	ldr	r4, [pc, #60]	; (8001e0c <RTC_ExitInitMode+0x44>)
{
 8001dce:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001dd0:	68e3      	ldr	r3, [r4, #12]
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001dd6:	69a3      	ldr	r3, [r4, #24]
 8001dd8:	3a60      	subs	r2, #96	; 0x60
 8001dda:	4213      	tst	r3, r2
 8001ddc:	d107      	bne.n	8001dee <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001dde:	f7ff ffb5 	bl	8001d4c <HAL_RTC_WaitForSynchro>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d002      	beq.n	8001dec <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001de6:	2003      	movs	r0, #3
 8001de8:	3529      	adds	r5, #41	; 0x29
 8001dea:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8001dec:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001dee:	69a3      	ldr	r3, [r4, #24]
 8001df0:	4393      	bics	r3, r2
 8001df2:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001df4:	f7ff ffaa 	bl	8001d4c <HAL_RTC_WaitForSynchro>
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	d002      	beq.n	8001e02 <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	3529      	adds	r5, #41	; 0x29
 8001e00:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e02:	2320      	movs	r3, #32
 8001e04:	69a2      	ldr	r2, [r4, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61a3      	str	r3, [r4, #24]
 8001e0a:	e7ef      	b.n	8001dec <RTC_ExitInitMode+0x24>
 8001e0c:	40002800 	.word	0x40002800

08001e10 <HAL_RTC_Init>:
{
 8001e10:	b570      	push	{r4, r5, r6, lr}
 8001e12:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e14:	2001      	movs	r0, #1
  if(hrtc != NULL)
 8001e16:	2c00      	cmp	r4, #0
 8001e18:	d047      	beq.n	8001eaa <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e1a:	0025      	movs	r5, r4
 8001e1c:	3529      	adds	r5, #41	; 0x29
 8001e1e:	782b      	ldrb	r3, [r5, #0]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d108      	bne.n	8001e38 <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 8001e26:	0022      	movs	r2, r4
 8001e28:	3228      	adds	r2, #40	; 0x28
 8001e2a:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001e2c:	2388      	movs	r3, #136	; 0x88
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 8001e32:	0020      	movs	r0, r4
 8001e34:	f7ff f822 	bl	8000e7c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001e38:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e3a:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001e3c:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e3e:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 8001e40:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
 8001e44:	3a77      	subs	r2, #119	; 0x77
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8001e48:	f7ff ff9a 	bl	8001d80 <RTC_EnterInitMode>
    if(status == HAL_OK)
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d125      	bne.n	8001e9c <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	4916      	ldr	r1, [pc, #88]	; (8001eac <HAL_RTC_Init+0x9c>)
 8001e54:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e56:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001e58:	400a      	ands	r2, r1
 8001e5a:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e5c:	68a2      	ldr	r2, [r4, #8]
 8001e5e:	6999      	ldr	r1, [r3, #24]
 8001e60:	4302      	orrs	r2, r0
 8001e62:	69e0      	ldr	r0, [r4, #28]
 8001e64:	4302      	orrs	r2, r0
 8001e66:	430a      	orrs	r2, r1
 8001e68:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001e6a:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 8001e6c:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001e6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e70:	68e2      	ldr	r2, [r4, #12]
 8001e72:	6919      	ldr	r1, [r3, #16]
 8001e74:	0412      	lsls	r2, r2, #16
 8001e76:	430a      	orrs	r2, r1
 8001e78:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8001e7a:	f7ff ffa5 	bl	8001dc8 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	d10c      	bne.n	8001e9c <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001e82:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001e84:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001e86:	6993      	ldr	r3, [r2, #24]
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	08db      	lsrs	r3, r3, #3
 8001e8c:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e90:	6991      	ldr	r1, [r2, #24]
 8001e92:	4333      	orrs	r3, r6
 8001e94:	69a6      	ldr	r6, [r4, #24]
 8001e96:	4333      	orrs	r3, r6
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e9c:	22ff      	movs	r2, #255	; 0xff
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	702b      	strb	r3, [r5, #0]
}
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	fb8fffbf 	.word	0xfb8fffbf

08001eb0 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001eb0:	21e0      	movs	r1, #224	; 0xe0
 8001eb2:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001eb4:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	438a      	bics	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ebc:	2282      	movs	r2, #130	; 0x82
 8001ebe:	6841      	ldr	r1, [r0, #4]
 8001ec0:	0052      	lsls	r2, r2, #1
 8001ec2:	4291      	cmp	r1, r2
 8001ec4:	d10c      	bne.n	8001ee0 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	6882      	ldr	r2, [r0, #8]
 8001eca:	0209      	lsls	r1, r1, #8
 8001ecc:	428a      	cmp	r2, r1
 8001ece:	d003      	beq.n	8001ed8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	00c9      	lsls	r1, r1, #3
 8001ed4:	428a      	cmp	r2, r1
 8001ed6:	d103      	bne.n	8001ee0 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ed8:	2140      	movs	r1, #64	; 0x40
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	438a      	bics	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001ee4:	0189      	lsls	r1, r1, #6
 8001ee6:	428a      	cmp	r2, r1
 8001ee8:	d106      	bne.n	8001ef8 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8001eea:	6819      	ldr	r1, [r3, #0]
 8001eec:	4c07      	ldr	r4, [pc, #28]	; (8001f0c <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8001eee:	4021      	ands	r1, r4
 8001ef0:	6019      	str	r1, [r3, #0]
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ef8:	0003      	movs	r3, r0
 8001efa:	2201      	movs	r2, #1
 8001efc:	335d      	adds	r3, #93	; 0x5d
 8001efe:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f00:	2300      	movs	r3, #0
 8001f02:	305c      	adds	r0, #92	; 0x5c
 8001f04:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8001f06:	2003      	movs	r0, #3
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	ffffdfff 	.word	0xffffdfff

08001f10 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f12:	0004      	movs	r4, r0
 8001f14:	000d      	movs	r5, r1
 8001f16:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f18:	2680      	movs	r6, #128	; 0x80
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	6898      	ldr	r0, [r3, #8]
 8001f1e:	4030      	ands	r0, r6
 8001f20:	d009      	beq.n	8001f36 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8001f22:	1c6a      	adds	r2, r5, #1
 8001f24:	d0fa      	beq.n	8001f1c <SPI_WaitFlagStateUntilTimeout.constprop.10+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001f26:	f7ff f989 	bl	800123c <HAL_GetTick>
 8001f2a:	1bc0      	subs	r0, r0, r7
 8001f2c:	4285      	cmp	r5, r0
 8001f2e:	d8f4      	bhi.n	8001f1a <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
 8001f30:	0020      	movs	r0, r4
 8001f32:	f7ff ffbd 	bl	8001eb0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f38 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f3a:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001f3c:	0005      	movs	r5, r0
 8001f3e:	000c      	movs	r4, r1
 8001f40:	0016      	movs	r6, r2
 8001f42:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f44:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8001f46:	682b      	ldr	r3, [r5, #0]
 8001f48:	6898      	ldr	r0, [r3, #8]
 8001f4a:	4020      	ands	r0, r4
 8001f4c:	d00d      	beq.n	8001f6a <SPI_WaitFifoStateUntilTimeout.constprop.11+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f4e:	42bc      	cmp	r4, r7
 8001f50:	d100      	bne.n	8001f54 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001f52:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001f54:	1c72      	adds	r2, r6, #1
 8001f56:	d0f7      	beq.n	8001f48 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001f58:	f7ff f970 	bl	800123c <HAL_GetTick>
 8001f5c:	9b01      	ldr	r3, [sp, #4]
 8001f5e:	1ac0      	subs	r0, r0, r3
 8001f60:	4286      	cmp	r6, r0
 8001f62:	d8f0      	bhi.n	8001f46 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xe>
 8001f64:	0028      	movs	r0, r5
 8001f66:	f7ff ffa3 	bl	8001eb0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001f6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f6c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f6e:	0013      	movs	r3, r2
{
 8001f70:	000d      	movs	r5, r1
 8001f72:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f74:	000a      	movs	r2, r1
 8001f76:	21c0      	movs	r1, #192	; 0xc0
 8001f78:	0149      	lsls	r1, r1, #5
{
 8001f7a:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f7c:	f7ff ffdc 	bl	8001f38 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d005      	beq.n	8001f90 <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f84:	2320      	movs	r3, #32
 8001f86:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001f88:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	6623      	str	r3, [r4, #96]	; 0x60
 8001f8e:	e00f      	b.n	8001fb0 <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f90:	0032      	movs	r2, r6
 8001f92:	0029      	movs	r1, r5
 8001f94:	0020      	movs	r0, r4
 8001f96:	f7ff ffbb 	bl	8001f10 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d1f2      	bne.n	8001f84 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f9e:	21c0      	movs	r1, #192	; 0xc0
 8001fa0:	0033      	movs	r3, r6
 8001fa2:	002a      	movs	r2, r5
 8001fa4:	00c9      	lsls	r1, r1, #3
 8001fa6:	0020      	movs	r0, r4
 8001fa8:	f7ff ffc6 	bl	8001f38 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001fac:	2800      	cmp	r0, #0
 8001fae:	d1e9      	bne.n	8001f84 <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001fb4 <HAL_SPI_Init>:
{
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001fb8:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001fba:	2c00      	cmp	r4, #0
 8001fbc:	d04b      	beq.n	8002056 <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fbe:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fc0:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fc4:	355d      	adds	r5, #93	; 0x5d
 8001fc6:	782b      	ldrb	r3, [r5, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8001fce:	0022      	movs	r2, r4
 8001fd0:	325c      	adds	r2, #92	; 0x5c
 8001fd2:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8001fd4:	0020      	movs	r0, r4
 8001fd6:	f7fe ff6b 	bl	8000eb0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001fda:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001fe0:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001fe2:	680b      	ldr	r3, [r1, #0]
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
 8001fea:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fec:	68e2      	ldr	r2, [r4, #12]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d931      	bls.n	8002058 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ff4:	26f0      	movs	r6, #240	; 0xf0
 8001ff6:	0136      	lsls	r6, r6, #4
 8001ff8:	42b2      	cmp	r2, r6
 8001ffa:	d133      	bne.n	8002064 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ffc:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001ffe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002000:	2800      	cmp	r0, #0
 8002002:	d103      	bne.n	800200c <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002004:	429a      	cmp	r2, r3
 8002006:	d92f      	bls.n	8002068 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002008:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800200a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800200c:	68a7      	ldr	r7, [r4, #8]
 800200e:	6863      	ldr	r3, [r4, #4]
 8002010:	69a0      	ldr	r0, [r4, #24]
 8002012:	433b      	orrs	r3, r7
 8002014:	6927      	ldr	r7, [r4, #16]
 8002016:	433b      	orrs	r3, r7
 8002018:	6967      	ldr	r7, [r4, #20]
 800201a:	433b      	orrs	r3, r7
 800201c:	69e7      	ldr	r7, [r4, #28]
 800201e:	433b      	orrs	r3, r7
 8002020:	6a27      	ldr	r7, [r4, #32]
 8002022:	433b      	orrs	r3, r7
 8002024:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002026:	433b      	orrs	r3, r7
 8002028:	2780      	movs	r7, #128	; 0x80
 800202a:	00bf      	lsls	r7, r7, #2
 800202c:	4007      	ands	r7, r0
 800202e:	433b      	orrs	r3, r7
 8002030:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002034:	0c00      	lsrs	r0, r0, #16
 8002036:	431a      	orrs	r2, r3
 8002038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800203a:	431a      	orrs	r2, r3
 800203c:	2304      	movs	r3, #4
 800203e:	4018      	ands	r0, r3
 8002040:	4310      	orrs	r0, r2
 8002042:	4306      	orrs	r6, r0
 8002044:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002046:	69cb      	ldr	r3, [r1, #28]
 8002048:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800204a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800204c:	4013      	ands	r3, r2
 800204e:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002050:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002052:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002054:	702b      	strb	r3, [r5, #0]
}
 8002056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002058:	2680      	movs	r6, #128	; 0x80
 800205a:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800205c:	429a      	cmp	r2, r3
 800205e:	d0ce      	beq.n	8001ffe <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002060:	62a0      	str	r0, [r4, #40]	; 0x28
 8002062:	e7cc      	b.n	8001ffe <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002064:	0006      	movs	r6, r0
 8002066:	e7fb      	b.n	8002060 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002068:	2301      	movs	r3, #1
 800206a:	e7ce      	b.n	800200a <HAL_SPI_Init+0x56>
 800206c:	fffff7ff 	.word	0xfffff7ff

08002070 <HAL_SPI_DeInit>:
{
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002074:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002076:	2c00      	cmp	r4, #0
 8002078:	d010      	beq.n	800209c <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 800207a:	0025      	movs	r5, r4
 800207c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002082:	355d      	adds	r5, #93	; 0x5d
 8002084:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8002086:	6813      	ldr	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002088:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 800208a:	438b      	bics	r3, r1
 800208c:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800208e:	f7fe ff3d 	bl	8000f0c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002092:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 8002094:	345c      	adds	r4, #92	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002096:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 8002098:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 800209a:	7020      	strb	r0, [r4, #0]
}
 800209c:	bd70      	pop	{r4, r5, r6, pc}
	...

080020a0 <HAL_SPI_TransmitReceive>:
{
 80020a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020a2:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80020a4:	0003      	movs	r3, r0
{
 80020a6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 80020a8:	335c      	adds	r3, #92	; 0x5c
 80020aa:	781a      	ldrb	r2, [r3, #0]
{
 80020ac:	0004      	movs	r4, r0
 80020ae:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 80020b0:	2502      	movs	r5, #2
 80020b2:	2a01      	cmp	r2, #1
 80020b4:	d100      	bne.n	80020b8 <HAL_SPI_TransmitReceive+0x18>
 80020b6:	e0ac      	b.n	8002212 <HAL_SPI_TransmitReceive+0x172>
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80020bc:	f7ff f8be 	bl	800123c <HAL_GetTick>
  tmp_state           = hspi->State;
 80020c0:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80020c2:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 80020c4:	335d      	adds	r3, #93	; 0x5d
 80020c6:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80020c8:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80020ca:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d00b      	beq.n	80020e8 <HAL_SPI_TransmitReceive+0x48>
 80020d0:	2282      	movs	r2, #130	; 0x82
 80020d2:	0052      	lsls	r2, r2, #1
 80020d4:	4291      	cmp	r1, r2
 80020d6:	d000      	beq.n	80020da <HAL_SPI_TransmitReceive+0x3a>
 80020d8:	e094      	b.n	8002204 <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020da:	68a2      	ldr	r2, [r4, #8]
 80020dc:	2a00      	cmp	r2, #0
 80020de:	d000      	beq.n	80020e2 <HAL_SPI_TransmitReceive+0x42>
 80020e0:	e090      	b.n	8002204 <HAL_SPI_TransmitReceive+0x164>
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d000      	beq.n	80020e8 <HAL_SPI_TransmitReceive+0x48>
 80020e6:	e08d      	b.n	8002204 <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 80020e8:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020ea:	2f00      	cmp	r7, #0
 80020ec:	d100      	bne.n	80020f0 <HAL_SPI_TransmitReceive+0x50>
 80020ee:	e089      	b.n	8002204 <HAL_SPI_TransmitReceive+0x164>
 80020f0:	9b01      	ldr	r3, [sp, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d100      	bne.n	80020f8 <HAL_SPI_TransmitReceive+0x58>
 80020f6:	e085      	b.n	8002204 <HAL_SPI_TransmitReceive+0x164>
 80020f8:	2e00      	cmp	r6, #0
 80020fa:	d100      	bne.n	80020fe <HAL_SPI_TransmitReceive+0x5e>
 80020fc:	e082      	b.n	8002204 <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020fe:	0023      	movs	r3, r4
 8002100:	335d      	adds	r3, #93	; 0x5d
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	2a04      	cmp	r2, #4
 8002106:	d001      	beq.n	800210c <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002108:	2205      	movs	r2, #5
 800210a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800210c:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800210e:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002110:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002112:	0022      	movs	r2, r4
 8002114:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002116:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8002118:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800211a:	1da2      	adds	r2, r4, #6
 800211c:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800211e:	22e0      	movs	r2, #224	; 0xe0
 8002120:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8002122:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002124:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002126:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002128:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800212a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800212c:	00d2      	lsls	r2, r2, #3
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	4290      	cmp	r0, r2
 8002132:	d801      	bhi.n	8002138 <HAL_SPI_TransmitReceive+0x98>
 8002134:	2e01      	cmp	r6, #1
 8002136:	d931      	bls.n	800219c <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4d71      	ldr	r5, [pc, #452]	; (8002300 <HAL_SPI_TransmitReceive+0x260>)
 800213c:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800213e:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002140:	2240      	movs	r2, #64	; 0x40
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	681d      	ldr	r5, [r3, #0]
 8002146:	4215      	tst	r5, r2
 8002148:	d102      	bne.n	8002150 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 800214a:	681d      	ldr	r5, [r3, #0]
 800214c:	432a      	orrs	r2, r5
 800214e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002150:	22e0      	movs	r2, #224	; 0xe0
 8002152:	00d2      	lsls	r2, r2, #3
 8002154:	4290      	cmp	r0, r2
 8002156:	d95e      	bls.n	8002216 <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002158:	2900      	cmp	r1, #0
 800215a:	d001      	beq.n	8002160 <HAL_SPI_TransmitReceive+0xc0>
 800215c:	2e01      	cmp	r6, #1
 800215e:	d107      	bne.n	8002170 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002160:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002162:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002164:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002166:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002168:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800216a:	3b01      	subs	r3, #1
 800216c:	b29b      	uxth	r3, r3
 800216e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002170:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002172:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002174:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002176:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002178:	2b00      	cmp	r3, #0
 800217a:	d114      	bne.n	80021a6 <HAL_SPI_TransmitReceive+0x106>
 800217c:	0023      	movs	r3, r4
 800217e:	3308      	adds	r3, #8
 8002180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10f      	bne.n	80021a6 <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002186:	9a00      	ldr	r2, [sp, #0]
 8002188:	9908      	ldr	r1, [sp, #32]
 800218a:	0020      	movs	r0, r4
 800218c:	f7ff feee 	bl	8001f6c <SPI_EndRxTxTransaction>
 8002190:	1e05      	subs	r5, r0, #0
 8002192:	d037      	beq.n	8002204 <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002194:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8002196:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002198:	6623      	str	r3, [r4, #96]	; 0x60
 800219a:	e033      	b.n	8002204 <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	685d      	ldr	r5, [r3, #4]
 80021a0:	0152      	lsls	r2, r2, #5
 80021a2:	432a      	orrs	r2, r5
 80021a4:	e7cb      	b.n	800213e <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021a6:	6822      	ldr	r2, [r4, #0]
 80021a8:	6893      	ldr	r3, [r2, #8]
 80021aa:	423b      	tst	r3, r7
 80021ac:	d00e      	beq.n	80021cc <HAL_SPI_TransmitReceive+0x12c>
 80021ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00b      	beq.n	80021cc <HAL_SPI_TransmitReceive+0x12c>
 80021b4:	2d01      	cmp	r5, #1
 80021b6:	d109      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 80021b8:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021bc:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021be:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80021c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021cc:	6893      	ldr	r3, [r2, #8]
 80021ce:	4233      	tst	r3, r6
 80021d0:	d00e      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x150>
 80021d2:	0021      	movs	r1, r4
 80021d4:	3108      	adds	r1, #8
 80021d6:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 80021dc:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021e0:	68d2      	ldr	r2, [r2, #12]
 80021e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021e4:	3302      	adds	r3, #2
 80021e6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80021e8:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021f0:	f7ff f824 	bl	800123c <HAL_GetTick>
 80021f4:	9b00      	ldr	r3, [sp, #0]
 80021f6:	1ac0      	subs	r0, r0, r3
 80021f8:	9b08      	ldr	r3, [sp, #32]
 80021fa:	4283      	cmp	r3, r0
 80021fc:	d8bb      	bhi.n	8002176 <HAL_SPI_TransmitReceive+0xd6>
 80021fe:	3301      	adds	r3, #1
 8002200:	d0b9      	beq.n	8002176 <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 8002202:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002204:	0023      	movs	r3, r4
 8002206:	2201      	movs	r2, #1
 8002208:	335d      	adds	r3, #93	; 0x5d
 800220a:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800220c:	2300      	movs	r3, #0
 800220e:	345c      	adds	r4, #92	; 0x5c
 8002210:	7023      	strb	r3, [r4, #0]
}
 8002212:	0028      	movs	r0, r5
 8002214:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002216:	2900      	cmp	r1, #0
 8002218:	d001      	beq.n	800221e <HAL_SPI_TransmitReceive+0x17e>
 800221a:	2e01      	cmp	r6, #1
 800221c:	d10a      	bne.n	8002234 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 800221e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002220:	2a01      	cmp	r2, #1
 8002222:	d951      	bls.n	80022c8 <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002224:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002226:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002228:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800222a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800222c:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800222e:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8002230:	b29b      	uxth	r3, r3
 8002232:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002234:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002236:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002238:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800223a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <HAL_SPI_TransmitReceive+0x1ac>
 8002240:	0023      	movs	r3, r4
 8002242:	3308      	adds	r3, #8
 8002244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002246:	2b00      	cmp	r3, #0
 8002248:	d100      	bne.n	800224c <HAL_SPI_TransmitReceive+0x1ac>
 800224a:	e79c      	b.n	8002186 <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800224c:	6822      	ldr	r2, [r4, #0]
 800224e:	6893      	ldr	r3, [r2, #8]
 8002250:	423b      	tst	r3, r7
 8002252:	d011      	beq.n	8002278 <HAL_SPI_TransmitReceive+0x1d8>
 8002254:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00e      	beq.n	8002278 <HAL_SPI_TransmitReceive+0x1d8>
 800225a:	2d01      	cmp	r5, #1
 800225c:	d10c      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 800225e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002260:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002262:	2901      	cmp	r1, #1
 8002264:	d938      	bls.n	80022d8 <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002266:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002268:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800226a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800226c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800226e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002270:	3b02      	subs	r3, #2
        txallowed = 0U;
 8002272:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8002274:	b29b      	uxth	r3, r3
 8002276:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002278:	6821      	ldr	r1, [r4, #0]
 800227a:	688b      	ldr	r3, [r1, #8]
 800227c:	4233      	tst	r3, r6
 800227e:	d019      	beq.n	80022b4 <HAL_SPI_TransmitReceive+0x214>
 8002280:	0023      	movs	r3, r4
 8002282:	3308      	adds	r3, #8
 8002284:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002286:	2a00      	cmp	r2, #0
 8002288:	d014      	beq.n	80022b4 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 800228a:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 800228c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800228e:	2801      	cmp	r0, #1
 8002290:	d92a      	bls.n	80022e8 <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002292:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 8002294:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002296:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002298:	3202      	adds	r2, #2
 800229a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800229c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800229e:	3a02      	subs	r2, #2
 80022a0:	b292      	uxth	r2, r2
 80022a2:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 80022a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d804      	bhi.n	80022b4 <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	684a      	ldr	r2, [r1, #4]
 80022ae:	015b      	lsls	r3, r3, #5
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022b4:	f7fe ffc2 	bl	800123c <HAL_GetTick>
 80022b8:	9b00      	ldr	r3, [sp, #0]
 80022ba:	1ac0      	subs	r0, r0, r3
 80022bc:	9b08      	ldr	r3, [sp, #32]
 80022be:	4283      	cmp	r3, r0
 80022c0:	d8bb      	bhi.n	800223a <HAL_SPI_TransmitReceive+0x19a>
 80022c2:	3301      	adds	r3, #1
 80022c4:	d0b9      	beq.n	800223a <HAL_SPI_TransmitReceive+0x19a>
 80022c6:	e79c      	b.n	8002202 <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022c8:	783a      	ldrb	r2, [r7, #0]
 80022ca:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80022cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022ce:	3301      	adds	r3, #1
 80022d0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80022d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022d4:	3b01      	subs	r3, #1
 80022d6:	e7ab      	b.n	8002230 <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80022dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022de:	3301      	adds	r3, #1
 80022e0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80022e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022e4:	3b01      	subs	r3, #1
 80022e6:	e7c4      	b.n	8002272 <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022e8:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 80022ea:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022ec:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 80022ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80022f0:	3201      	adds	r2, #1
 80022f2:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80022f4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80022f6:	3a01      	subs	r2, #1
 80022f8:	b292      	uxth	r2, r2
 80022fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022fc:	e7da      	b.n	80022b4 <HAL_SPI_TransmitReceive+0x214>
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	ffffefff 	.word	0xffffefff

08002304 <HAL_SPI_GetState>:
  return hspi->State;
 8002304:	305d      	adds	r0, #93	; 0x5d
 8002306:	7800      	ldrb	r0, [r0, #0]
 8002308:	b2c0      	uxtb	r0, r0
}
 800230a:	4770      	bx	lr

0800230c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002310:	6902      	ldr	r2, [r0, #16]
 8002312:	6883      	ldr	r3, [r0, #8]
 8002314:	69c1      	ldr	r1, [r0, #28]
 8002316:	4313      	orrs	r3, r2
 8002318:	6942      	ldr	r2, [r0, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 800231a:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800231c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800231e:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002320:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002322:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002324:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002326:	4d9f      	ldr	r5, [pc, #636]	; (80025a4 <UART_SetConfig+0x298>)
 8002328:	4028      	ands	r0, r5
 800232a:	4303      	orrs	r3, r0
 800232c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800232e:	6853      	ldr	r3, [r2, #4]
 8002330:	489d      	ldr	r0, [pc, #628]	; (80025a8 <UART_SetConfig+0x29c>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002332:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002334:	4003      	ands	r3, r0
 8002336:	68e0      	ldr	r0, [r4, #12]
 8002338:	4303      	orrs	r3, r0
 800233a:	6053      	str	r3, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 800233c:	69a3      	ldr	r3, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800233e:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8002340:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002342:	4d9a      	ldr	r5, [pc, #616]	; (80025ac <UART_SetConfig+0x2a0>)
 8002344:	4028      	ands	r0, r5

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002346:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002348:	4303      	orrs	r3, r0
 800234a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800234c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800234e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002350:	43a8      	bics	r0, r5
 8002352:	4318      	orrs	r0, r3
 8002354:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002356:	4896      	ldr	r0, [pc, #600]	; (80025b0 <UART_SetConfig+0x2a4>)
 8002358:	4282      	cmp	r2, r0
 800235a:	d113      	bne.n	8002384 <UART_SetConfig+0x78>
 800235c:	2003      	movs	r0, #3
 800235e:	4a95      	ldr	r2, [pc, #596]	; (80025b4 <UART_SetConfig+0x2a8>)
 8002360:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002362:	4002      	ands	r2, r0
 8002364:	4894      	ldr	r0, [pc, #592]	; (80025b8 <UART_SetConfig+0x2ac>)
 8002366:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002368:	2280      	movs	r2, #128	; 0x80
 800236a:	0212      	lsls	r2, r2, #8
 800236c:	4291      	cmp	r1, r2
 800236e:	d100      	bne.n	8002372 <UART_SetConfig+0x66>
 8002370:	e1b7      	b.n	80026e2 <UART_SetConfig+0x3d6>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8002372:	2808      	cmp	r0, #8
 8002374:	d817      	bhi.n	80023a6 <UART_SetConfig+0x9a>
 8002376:	f7fd fec3 	bl	8000100 <__gnu_thumb1_case_uqi>
 800237a:	1684      	.short	0x1684
 800237c:	16f216be 	.word	0x16f216be
 8002380:	1616      	.short	0x1616
 8002382:	f5          	.byte	0xf5
 8002383:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002384:	488d      	ldr	r0, [pc, #564]	; (80025bc <UART_SetConfig+0x2b0>)
 8002386:	4282      	cmp	r2, r0
 8002388:	d105      	bne.n	8002396 <UART_SetConfig+0x8a>
 800238a:	200c      	movs	r0, #12
 800238c:	4a89      	ldr	r2, [pc, #548]	; (80025b4 <UART_SetConfig+0x2a8>)
 800238e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002390:	4002      	ands	r2, r0
 8002392:	488b      	ldr	r0, [pc, #556]	; (80025c0 <UART_SetConfig+0x2b4>)
 8002394:	e7e7      	b.n	8002366 <UART_SetConfig+0x5a>
 8002396:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <UART_SetConfig+0x2b8>)
 8002398:	429a      	cmp	r2, r3
 800239a:	d100      	bne.n	800239e <UART_SetConfig+0x92>
 800239c:	e150      	b.n	8002640 <UART_SetConfig+0x334>
 800239e:	4b8a      	ldr	r3, [pc, #552]	; (80025c8 <UART_SetConfig+0x2bc>)
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d100      	bne.n	80023a6 <UART_SetConfig+0x9a>
 80023a4:	e14c      	b.n	8002640 <UART_SetConfig+0x334>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 80023a6:	2001      	movs	r0, #1
 80023a8:	e191      	b.n	80026ce <UART_SetConfig+0x3c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d02f      	beq.n	800240e <UART_SetConfig+0x102>
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d019      	beq.n	80023e6 <UART_SetConfig+0xda>
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d019      	beq.n	80023ea <UART_SetConfig+0xde>
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d019      	beq.n	80023ee <UART_SetConfig+0xe2>
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d019      	beq.n	80023f2 <UART_SetConfig+0xe6>
 80023be:	2b05      	cmp	r3, #5
 80023c0:	d019      	beq.n	80023f6 <UART_SetConfig+0xea>
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d019      	beq.n	80023fa <UART_SetConfig+0xee>
 80023c6:	2b07      	cmp	r3, #7
 80023c8:	d019      	beq.n	80023fe <UART_SetConfig+0xf2>
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d019      	beq.n	8002402 <UART_SetConfig+0xf6>
 80023ce:	2b09      	cmp	r3, #9
 80023d0:	d019      	beq.n	8002406 <UART_SetConfig+0xfa>
 80023d2:	2b0a      	cmp	r3, #10
 80023d4:	d019      	beq.n	800240a <UART_SetConfig+0xfe>
 80023d6:	2b0b      	cmp	r3, #11
 80023d8:	d119      	bne.n	800240e <UART_SetConfig+0x102>
 80023da:	487c      	ldr	r0, [pc, #496]	; (80025cc <UART_SetConfig+0x2c0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023dc:	6863      	ldr	r3, [r4, #4]
 80023de:	6861      	ldr	r1, [r4, #4]
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	1818      	adds	r0, r3, r0
 80023e4:	e160      	b.n	80026a8 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023e6:	487a      	ldr	r0, [pc, #488]	; (80025d0 <UART_SetConfig+0x2c4>)
 80023e8:	e7f8      	b.n	80023dc <UART_SetConfig+0xd0>
 80023ea:	487a      	ldr	r0, [pc, #488]	; (80025d4 <UART_SetConfig+0x2c8>)
 80023ec:	e7f6      	b.n	80023dc <UART_SetConfig+0xd0>
 80023ee:	487a      	ldr	r0, [pc, #488]	; (80025d8 <UART_SetConfig+0x2cc>)
 80023f0:	e7f4      	b.n	80023dc <UART_SetConfig+0xd0>
 80023f2:	487a      	ldr	r0, [pc, #488]	; (80025dc <UART_SetConfig+0x2d0>)
 80023f4:	e7f2      	b.n	80023dc <UART_SetConfig+0xd0>
 80023f6:	487a      	ldr	r0, [pc, #488]	; (80025e0 <UART_SetConfig+0x2d4>)
 80023f8:	e7f0      	b.n	80023dc <UART_SetConfig+0xd0>
 80023fa:	487a      	ldr	r0, [pc, #488]	; (80025e4 <UART_SetConfig+0x2d8>)
 80023fc:	e7ee      	b.n	80023dc <UART_SetConfig+0xd0>
 80023fe:	487a      	ldr	r0, [pc, #488]	; (80025e8 <UART_SetConfig+0x2dc>)
 8002400:	e7ec      	b.n	80023dc <UART_SetConfig+0xd0>
 8002402:	487a      	ldr	r0, [pc, #488]	; (80025ec <UART_SetConfig+0x2e0>)
 8002404:	e7ea      	b.n	80023dc <UART_SetConfig+0xd0>
 8002406:	487a      	ldr	r0, [pc, #488]	; (80025f0 <UART_SetConfig+0x2e4>)
 8002408:	e7e8      	b.n	80023dc <UART_SetConfig+0xd0>
 800240a:	487a      	ldr	r0, [pc, #488]	; (80025f4 <UART_SetConfig+0x2e8>)
 800240c:	e7e6      	b.n	80023dc <UART_SetConfig+0xd0>
 800240e:	487a      	ldr	r0, [pc, #488]	; (80025f8 <UART_SetConfig+0x2ec>)
 8002410:	e7e4      	b.n	80023dc <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetSysClockFreq();
 8002412:	f7ff fae3 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 8002416:	e11a      	b.n	800264e <UART_SetConfig+0x342>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002418:	2b00      	cmp	r3, #0
 800241a:	d018      	beq.n	800244e <UART_SetConfig+0x142>
 800241c:	2b01      	cmp	r3, #1
 800241e:	d019      	beq.n	8002454 <UART_SetConfig+0x148>
 8002420:	2b02      	cmp	r3, #2
 8002422:	d01a      	beq.n	800245a <UART_SetConfig+0x14e>
 8002424:	2b03      	cmp	r3, #3
 8002426:	d01b      	beq.n	8002460 <UART_SetConfig+0x154>
 8002428:	2b04      	cmp	r3, #4
 800242a:	d01b      	beq.n	8002464 <UART_SetConfig+0x158>
 800242c:	2b05      	cmp	r3, #5
 800242e:	d01c      	beq.n	800246a <UART_SetConfig+0x15e>
 8002430:	2b06      	cmp	r3, #6
 8002432:	d01c      	beq.n	800246e <UART_SetConfig+0x162>
 8002434:	2080      	movs	r0, #128	; 0x80
 8002436:	2b07      	cmp	r3, #7
 8002438:	d01b      	beq.n	8002472 <UART_SetConfig+0x166>
 800243a:	2b08      	cmp	r3, #8
 800243c:	d01b      	beq.n	8002476 <UART_SetConfig+0x16a>
 800243e:	2b09      	cmp	r3, #9
 8002440:	d01b      	beq.n	800247a <UART_SetConfig+0x16e>
 8002442:	2b0a      	cmp	r3, #10
 8002444:	d01b      	beq.n	800247e <UART_SetConfig+0x172>
 8002446:	2b0b      	cmp	r3, #11
 8002448:	d102      	bne.n	8002450 <UART_SetConfig+0x144>
 800244a:	0040      	lsls	r0, r0, #1
 800244c:	e7c6      	b.n	80023dc <UART_SetConfig+0xd0>
 800244e:	2080      	movs	r0, #128	; 0x80
 8002450:	0240      	lsls	r0, r0, #9
 8002452:	e7c3      	b.n	80023dc <UART_SetConfig+0xd0>
 8002454:	2080      	movs	r0, #128	; 0x80
 8002456:	0200      	lsls	r0, r0, #8
 8002458:	e7c0      	b.n	80023dc <UART_SetConfig+0xd0>
 800245a:	2080      	movs	r0, #128	; 0x80
 800245c:	01c0      	lsls	r0, r0, #7
 800245e:	e7bd      	b.n	80023dc <UART_SetConfig+0xd0>
 8002460:	4866      	ldr	r0, [pc, #408]	; (80025fc <UART_SetConfig+0x2f0>)
 8002462:	e7bb      	b.n	80023dc <UART_SetConfig+0xd0>
 8002464:	2080      	movs	r0, #128	; 0x80
 8002466:	0180      	lsls	r0, r0, #6
 8002468:	e7b8      	b.n	80023dc <UART_SetConfig+0xd0>
 800246a:	4865      	ldr	r0, [pc, #404]	; (8002600 <UART_SetConfig+0x2f4>)
 800246c:	e7b6      	b.n	80023dc <UART_SetConfig+0xd0>
 800246e:	4865      	ldr	r0, [pc, #404]	; (8002604 <UART_SetConfig+0x2f8>)
 8002470:	e7b4      	b.n	80023dc <UART_SetConfig+0xd0>
 8002472:	0140      	lsls	r0, r0, #5
 8002474:	e7b2      	b.n	80023dc <UART_SetConfig+0xd0>
 8002476:	0100      	lsls	r0, r0, #4
 8002478:	e7b0      	b.n	80023dc <UART_SetConfig+0xd0>
 800247a:	00c0      	lsls	r0, r0, #3
 800247c:	e7ae      	b.n	80023dc <UART_SetConfig+0xd0>
 800247e:	0080      	lsls	r0, r0, #2
 8002480:	e7ac      	b.n	80023dc <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002482:	f7ff fb9f 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002488:	2101      	movs	r1, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d021      	beq.n	80024d2 <UART_SetConfig+0x1c6>
 800248e:	1849      	adds	r1, r1, r1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d01e      	beq.n	80024d2 <UART_SetConfig+0x1c6>
 8002494:	3102      	adds	r1, #2
 8002496:	2b02      	cmp	r3, #2
 8002498:	d01b      	beq.n	80024d2 <UART_SetConfig+0x1c6>
 800249a:	3102      	adds	r1, #2
 800249c:	2b03      	cmp	r3, #3
 800249e:	d018      	beq.n	80024d2 <UART_SetConfig+0x1c6>
 80024a0:	3102      	adds	r1, #2
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d015      	beq.n	80024d2 <UART_SetConfig+0x1c6>
 80024a6:	3102      	adds	r1, #2
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d012      	beq.n	80024d2 <UART_SetConfig+0x1c6>
 80024ac:	3102      	adds	r1, #2
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d00f      	beq.n	80024d2 <UART_SetConfig+0x1c6>
 80024b2:	3104      	adds	r1, #4
 80024b4:	2b07      	cmp	r3, #7
 80024b6:	d00c      	beq.n	80024d2 <UART_SetConfig+0x1c6>
 80024b8:	3110      	adds	r1, #16
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d009      	beq.n	80024d2 <UART_SetConfig+0x1c6>
 80024be:	3120      	adds	r1, #32
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	d006      	beq.n	80024d2 <UART_SetConfig+0x1c6>
 80024c4:	3140      	adds	r1, #64	; 0x40
 80024c6:	2b0a      	cmp	r3, #10
 80024c8:	d003      	beq.n	80024d2 <UART_SetConfig+0x1c6>
 80024ca:	397f      	subs	r1, #127	; 0x7f
 80024cc:	2b0b      	cmp	r3, #11
 80024ce:	d100      	bne.n	80024d2 <UART_SetConfig+0x1c6>
 80024d0:	31ff      	adds	r1, #255	; 0xff
 80024d2:	6865      	ldr	r5, [r4, #4]
 80024d4:	f7fd fe28 	bl	8000128 <__udivsi3>
 80024d8:	0029      	movs	r1, r5
 80024da:	086b      	lsrs	r3, r5, #1
 80024dc:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024de:	f7fd fe23 	bl	8000128 <__udivsi3>
 80024e2:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024e4:	0003      	movs	r3, r0
 80024e6:	4a48      	ldr	r2, [pc, #288]	; (8002608 <UART_SetConfig+0x2fc>)
 80024e8:	3b10      	subs	r3, #16
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d900      	bls.n	80024f0 <UART_SetConfig+0x1e4>
 80024ee:	e75a      	b.n	80023a6 <UART_SetConfig+0x9a>
      huart->Instance->BRR = usartdiv;
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	60d8      	str	r0, [r3, #12]
 80024f4:	e0ea      	b.n	80026cc <UART_SetConfig+0x3c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d02f      	beq.n	800255a <UART_SetConfig+0x24e>
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d019      	beq.n	8002532 <UART_SetConfig+0x226>
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d019      	beq.n	8002536 <UART_SetConfig+0x22a>
 8002502:	2b03      	cmp	r3, #3
 8002504:	d019      	beq.n	800253a <UART_SetConfig+0x22e>
 8002506:	2b04      	cmp	r3, #4
 8002508:	d019      	beq.n	800253e <UART_SetConfig+0x232>
 800250a:	2b05      	cmp	r3, #5
 800250c:	d019      	beq.n	8002542 <UART_SetConfig+0x236>
 800250e:	2b06      	cmp	r3, #6
 8002510:	d019      	beq.n	8002546 <UART_SetConfig+0x23a>
 8002512:	2b07      	cmp	r3, #7
 8002514:	d019      	beq.n	800254a <UART_SetConfig+0x23e>
 8002516:	2b08      	cmp	r3, #8
 8002518:	d019      	beq.n	800254e <UART_SetConfig+0x242>
 800251a:	2b09      	cmp	r3, #9
 800251c:	d019      	beq.n	8002552 <UART_SetConfig+0x246>
 800251e:	2b0a      	cmp	r3, #10
 8002520:	d019      	beq.n	8002556 <UART_SetConfig+0x24a>
 8002522:	2b0b      	cmp	r3, #11
 8002524:	d119      	bne.n	800255a <UART_SetConfig+0x24e>
 8002526:	4839      	ldr	r0, [pc, #228]	; (800260c <UART_SetConfig+0x300>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002528:	6863      	ldr	r3, [r4, #4]
 800252a:	6861      	ldr	r1, [r4, #4]
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	1818      	adds	r0, r3, r0
 8002530:	e7d5      	b.n	80024de <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002532:	4828      	ldr	r0, [pc, #160]	; (80025d4 <UART_SetConfig+0x2c8>)
 8002534:	e7f8      	b.n	8002528 <UART_SetConfig+0x21c>
 8002536:	4829      	ldr	r0, [pc, #164]	; (80025dc <UART_SetConfig+0x2d0>)
 8002538:	e7f6      	b.n	8002528 <UART_SetConfig+0x21c>
 800253a:	482a      	ldr	r0, [pc, #168]	; (80025e4 <UART_SetConfig+0x2d8>)
 800253c:	e7f4      	b.n	8002528 <UART_SetConfig+0x21c>
 800253e:	482a      	ldr	r0, [pc, #168]	; (80025e8 <UART_SetConfig+0x2dc>)
 8002540:	e7f2      	b.n	8002528 <UART_SetConfig+0x21c>
 8002542:	4833      	ldr	r0, [pc, #204]	; (8002610 <UART_SetConfig+0x304>)
 8002544:	e7f0      	b.n	8002528 <UART_SetConfig+0x21c>
 8002546:	4833      	ldr	r0, [pc, #204]	; (8002614 <UART_SetConfig+0x308>)
 8002548:	e7ee      	b.n	8002528 <UART_SetConfig+0x21c>
 800254a:	4828      	ldr	r0, [pc, #160]	; (80025ec <UART_SetConfig+0x2e0>)
 800254c:	e7ec      	b.n	8002528 <UART_SetConfig+0x21c>
 800254e:	4828      	ldr	r0, [pc, #160]	; (80025f0 <UART_SetConfig+0x2e4>)
 8002550:	e7ea      	b.n	8002528 <UART_SetConfig+0x21c>
 8002552:	4828      	ldr	r0, [pc, #160]	; (80025f4 <UART_SetConfig+0x2e8>)
 8002554:	e7e8      	b.n	8002528 <UART_SetConfig+0x21c>
 8002556:	481d      	ldr	r0, [pc, #116]	; (80025cc <UART_SetConfig+0x2c0>)
 8002558:	e7e6      	b.n	8002528 <UART_SetConfig+0x21c>
 800255a:	481d      	ldr	r0, [pc, #116]	; (80025d0 <UART_SetConfig+0x2c4>)
 800255c:	e7e4      	b.n	8002528 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 800255e:	f7ff fa3d 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 8002562:	e790      	b.n	8002486 <UART_SetConfig+0x17a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002564:	2b00      	cmp	r3, #0
 8002566:	d018      	beq.n	800259a <UART_SetConfig+0x28e>
 8002568:	2b01      	cmp	r3, #1
 800256a:	d018      	beq.n	800259e <UART_SetConfig+0x292>
 800256c:	2b02      	cmp	r3, #2
 800256e:	d053      	beq.n	8002618 <UART_SetConfig+0x30c>
 8002570:	2b03      	cmp	r3, #3
 8002572:	d054      	beq.n	800261e <UART_SetConfig+0x312>
 8002574:	2b04      	cmp	r3, #4
 8002576:	d054      	beq.n	8002622 <UART_SetConfig+0x316>
 8002578:	2b05      	cmp	r3, #5
 800257a:	d055      	beq.n	8002628 <UART_SetConfig+0x31c>
 800257c:	2b06      	cmp	r3, #6
 800257e:	d055      	beq.n	800262c <UART_SetConfig+0x320>
 8002580:	2080      	movs	r0, #128	; 0x80
 8002582:	2b07      	cmp	r3, #7
 8002584:	d054      	beq.n	8002630 <UART_SetConfig+0x324>
 8002586:	2b08      	cmp	r3, #8
 8002588:	d054      	beq.n	8002634 <UART_SetConfig+0x328>
 800258a:	2b09      	cmp	r3, #9
 800258c:	d054      	beq.n	8002638 <UART_SetConfig+0x32c>
 800258e:	2b0a      	cmp	r3, #10
 8002590:	d054      	beq.n	800263c <UART_SetConfig+0x330>
 8002592:	2b0b      	cmp	r3, #11
 8002594:	d0c8      	beq.n	8002528 <UART_SetConfig+0x21c>
 8002596:	0200      	lsls	r0, r0, #8
 8002598:	e7c6      	b.n	8002528 <UART_SetConfig+0x21c>
 800259a:	2080      	movs	r0, #128	; 0x80
 800259c:	e7fb      	b.n	8002596 <UART_SetConfig+0x28a>
 800259e:	2080      	movs	r0, #128	; 0x80
 80025a0:	01c0      	lsls	r0, r0, #7
 80025a2:	e7c1      	b.n	8002528 <UART_SetConfig+0x21c>
 80025a4:	cfff69f3 	.word	0xcfff69f3
 80025a8:	ffffcfff 	.word	0xffffcfff
 80025ac:	11fff4ff 	.word	0x11fff4ff
 80025b0:	40013800 	.word	0x40013800
 80025b4:	40021000 	.word	0x40021000
 80025b8:	08003360 	.word	0x08003360
 80025bc:	40004400 	.word	0x40004400
 80025c0:	08003364 	.word	0x08003364
 80025c4:	40004800 	.word	0x40004800
 80025c8:	40004c00 	.word	0x40004c00
 80025cc:	0001e848 	.word	0x0001e848
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	007a1200 	.word	0x007a1200
 80025d8:	00516154 	.word	0x00516154
 80025dc:	003d0900 	.word	0x003d0900
 80025e0:	0030d400 	.word	0x0030d400
 80025e4:	0028b0aa 	.word	0x0028b0aa
 80025e8:	001e8480 	.word	0x001e8480
 80025ec:	000f4240 	.word	0x000f4240
 80025f0:	0007a120 	.word	0x0007a120
 80025f4:	0003d090 	.word	0x0003d090
 80025f8:	01e84800 	.word	0x01e84800
 80025fc:	00002aaa 	.word	0x00002aaa
 8002600:	00001998 	.word	0x00001998
 8002604:	00001554 	.word	0x00001554
 8002608:	0000ffef 	.word	0x0000ffef
 800260c:	0000f424 	.word	0x0000f424
 8002610:	00186a00 	.word	0x00186a00
 8002614:	00145855 	.word	0x00145855
 8002618:	2080      	movs	r0, #128	; 0x80
 800261a:	0180      	lsls	r0, r0, #6
 800261c:	e784      	b.n	8002528 <UART_SetConfig+0x21c>
 800261e:	4838      	ldr	r0, [pc, #224]	; (8002700 <UART_SetConfig+0x3f4>)
 8002620:	e782      	b.n	8002528 <UART_SetConfig+0x21c>
 8002622:	2080      	movs	r0, #128	; 0x80
 8002624:	0140      	lsls	r0, r0, #5
 8002626:	e77f      	b.n	8002528 <UART_SetConfig+0x21c>
 8002628:	4836      	ldr	r0, [pc, #216]	; (8002704 <UART_SetConfig+0x3f8>)
 800262a:	e77d      	b.n	8002528 <UART_SetConfig+0x21c>
 800262c:	4836      	ldr	r0, [pc, #216]	; (8002708 <UART_SetConfig+0x3fc>)
 800262e:	e77b      	b.n	8002528 <UART_SetConfig+0x21c>
 8002630:	0100      	lsls	r0, r0, #4
 8002632:	e779      	b.n	8002528 <UART_SetConfig+0x21c>
 8002634:	00c0      	lsls	r0, r0, #3
 8002636:	e777      	b.n	8002528 <UART_SetConfig+0x21c>
 8002638:	0080      	lsls	r0, r0, #2
 800263a:	e775      	b.n	8002528 <UART_SetConfig+0x21c>
 800263c:	0040      	lsls	r0, r0, #1
 800263e:	e773      	b.n	8002528 <UART_SetConfig+0x21c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	4299      	cmp	r1, r3
 8002646:	d000      	beq.n	800264a <UART_SetConfig+0x33e>
 8002648:	e71b      	b.n	8002482 <UART_SetConfig+0x176>
        pclk = HAL_RCC_GetPCLK1Freq();
 800264a:	f7ff fabb 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800264e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002650:	2101      	movs	r1, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d021      	beq.n	800269a <UART_SetConfig+0x38e>
 8002656:	1849      	adds	r1, r1, r1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d01e      	beq.n	800269a <UART_SetConfig+0x38e>
 800265c:	3102      	adds	r1, #2
 800265e:	2b02      	cmp	r3, #2
 8002660:	d01b      	beq.n	800269a <UART_SetConfig+0x38e>
 8002662:	3102      	adds	r1, #2
 8002664:	2b03      	cmp	r3, #3
 8002666:	d018      	beq.n	800269a <UART_SetConfig+0x38e>
 8002668:	3102      	adds	r1, #2
 800266a:	2b04      	cmp	r3, #4
 800266c:	d015      	beq.n	800269a <UART_SetConfig+0x38e>
 800266e:	3102      	adds	r1, #2
 8002670:	2b05      	cmp	r3, #5
 8002672:	d012      	beq.n	800269a <UART_SetConfig+0x38e>
 8002674:	3102      	adds	r1, #2
 8002676:	2b06      	cmp	r3, #6
 8002678:	d00f      	beq.n	800269a <UART_SetConfig+0x38e>
 800267a:	3104      	adds	r1, #4
 800267c:	2b07      	cmp	r3, #7
 800267e:	d00c      	beq.n	800269a <UART_SetConfig+0x38e>
 8002680:	3110      	adds	r1, #16
 8002682:	2b08      	cmp	r3, #8
 8002684:	d009      	beq.n	800269a <UART_SetConfig+0x38e>
 8002686:	3120      	adds	r1, #32
 8002688:	2b09      	cmp	r3, #9
 800268a:	d006      	beq.n	800269a <UART_SetConfig+0x38e>
 800268c:	3140      	adds	r1, #64	; 0x40
 800268e:	2b0a      	cmp	r3, #10
 8002690:	d003      	beq.n	800269a <UART_SetConfig+0x38e>
 8002692:	397f      	subs	r1, #127	; 0x7f
 8002694:	2b0b      	cmp	r3, #11
 8002696:	d100      	bne.n	800269a <UART_SetConfig+0x38e>
 8002698:	31ff      	adds	r1, #255	; 0xff
 800269a:	f7fd fd45 	bl	8000128 <__udivsi3>
 800269e:	6865      	ldr	r5, [r4, #4]
 80026a0:	0040      	lsls	r0, r0, #1
 80026a2:	0029      	movs	r1, r5
 80026a4:	086b      	lsrs	r3, r5, #1
 80026a6:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026a8:	f7fd fd3e 	bl	8000128 <__udivsi3>
 80026ac:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026ae:	0003      	movs	r3, r0
 80026b0:	4a16      	ldr	r2, [pc, #88]	; (800270c <UART_SetConfig+0x400>)
 80026b2:	3b10      	subs	r3, #16
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d900      	bls.n	80026ba <UART_SetConfig+0x3ae>
 80026b8:	e675      	b.n	80023a6 <UART_SetConfig+0x9a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026ba:	230f      	movs	r3, #15
 80026bc:	0002      	movs	r2, r0
 80026be:	439a      	bics	r2, r3
 80026c0:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026c2:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 80026c4:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026c6:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 80026c8:	4318      	orrs	r0, r3
 80026ca:	60d0      	str	r0, [r2, #12]
 80026cc:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80026ce:	0022      	movs	r2, r4
 80026d0:	2301      	movs	r3, #1
 80026d2:	326a      	adds	r2, #106	; 0x6a
 80026d4:	8013      	strh	r3, [r2, #0]
  huart->NbRxDataToProcess = 1;
 80026d6:	3a02      	subs	r2, #2
 80026d8:	8013      	strh	r3, [r2, #0]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 80026de:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 80026e0:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 80026e2:	2808      	cmp	r0, #8
 80026e4:	d900      	bls.n	80026e8 <UART_SetConfig+0x3dc>
 80026e6:	e65e      	b.n	80023a6 <UART_SetConfig+0x9a>
 80026e8:	f7fd fd14 	bl	8000114 <__gnu_thumb1_case_shi>
 80026ec:	fe5dffaf 	.word	0xfe5dffaf
 80026f0:	fe5dfe5f 	.word	0xfe5dfe5f
 80026f4:	fe5dfe93 	.word	0xfe5dfe93
 80026f8:	fe5dfe5d 	.word	0xfe5dfe5d
 80026fc:	fe96      	.short	0xfe96
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	00001555 	.word	0x00001555
 8002704:	00000ccc 	.word	0x00000ccc
 8002708:	00000aaa 	.word	0x00000aaa
 800270c:	0000ffef 	.word	0x0000ffef

08002710 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002710:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8002712:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002714:	07da      	lsls	r2, r3, #31
 8002716:	d506      	bpl.n	8002726 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002718:	6801      	ldr	r1, [r0, #0]
 800271a:	4c28      	ldr	r4, [pc, #160]	; (80027bc <UART_AdvFeatureConfig+0xac>)
 800271c:	684a      	ldr	r2, [r1, #4]
 800271e:	4022      	ands	r2, r4
 8002720:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002722:	4322      	orrs	r2, r4
 8002724:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002726:	079a      	lsls	r2, r3, #30
 8002728:	d506      	bpl.n	8002738 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800272a:	6801      	ldr	r1, [r0, #0]
 800272c:	4c24      	ldr	r4, [pc, #144]	; (80027c0 <UART_AdvFeatureConfig+0xb0>)
 800272e:	684a      	ldr	r2, [r1, #4]
 8002730:	4022      	ands	r2, r4
 8002732:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002734:	4322      	orrs	r2, r4
 8002736:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002738:	075a      	lsls	r2, r3, #29
 800273a:	d506      	bpl.n	800274a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800273c:	6801      	ldr	r1, [r0, #0]
 800273e:	4c21      	ldr	r4, [pc, #132]	; (80027c4 <UART_AdvFeatureConfig+0xb4>)
 8002740:	684a      	ldr	r2, [r1, #4]
 8002742:	4022      	ands	r2, r4
 8002744:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002746:	4322      	orrs	r2, r4
 8002748:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800274a:	071a      	lsls	r2, r3, #28
 800274c:	d506      	bpl.n	800275c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800274e:	6801      	ldr	r1, [r0, #0]
 8002750:	4c1d      	ldr	r4, [pc, #116]	; (80027c8 <UART_AdvFeatureConfig+0xb8>)
 8002752:	684a      	ldr	r2, [r1, #4]
 8002754:	4022      	ands	r2, r4
 8002756:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002758:	4322      	orrs	r2, r4
 800275a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800275c:	06da      	lsls	r2, r3, #27
 800275e:	d506      	bpl.n	800276e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002760:	6801      	ldr	r1, [r0, #0]
 8002762:	4c1a      	ldr	r4, [pc, #104]	; (80027cc <UART_AdvFeatureConfig+0xbc>)
 8002764:	688a      	ldr	r2, [r1, #8]
 8002766:	4022      	ands	r2, r4
 8002768:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800276a:	4322      	orrs	r2, r4
 800276c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800276e:	069a      	lsls	r2, r3, #26
 8002770:	d506      	bpl.n	8002780 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002772:	6801      	ldr	r1, [r0, #0]
 8002774:	4c16      	ldr	r4, [pc, #88]	; (80027d0 <UART_AdvFeatureConfig+0xc0>)
 8002776:	688a      	ldr	r2, [r1, #8]
 8002778:	4022      	ands	r2, r4
 800277a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800277c:	4322      	orrs	r2, r4
 800277e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002780:	065a      	lsls	r2, r3, #25
 8002782:	d510      	bpl.n	80027a6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002784:	6801      	ldr	r1, [r0, #0]
 8002786:	4d13      	ldr	r5, [pc, #76]	; (80027d4 <UART_AdvFeatureConfig+0xc4>)
 8002788:	684a      	ldr	r2, [r1, #4]
 800278a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800278c:	402a      	ands	r2, r5
 800278e:	4322      	orrs	r2, r4
 8002790:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	0352      	lsls	r2, r2, #13
 8002796:	4294      	cmp	r4, r2
 8002798:	d105      	bne.n	80027a6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800279a:	684a      	ldr	r2, [r1, #4]
 800279c:	4c0e      	ldr	r4, [pc, #56]	; (80027d8 <UART_AdvFeatureConfig+0xc8>)
 800279e:	4022      	ands	r2, r4
 80027a0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80027a2:	4322      	orrs	r2, r4
 80027a4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	d506      	bpl.n	80027b8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027aa:	6802      	ldr	r2, [r0, #0]
 80027ac:	490b      	ldr	r1, [pc, #44]	; (80027dc <UART_AdvFeatureConfig+0xcc>)
 80027ae:	6853      	ldr	r3, [r2, #4]
 80027b0:	400b      	ands	r3, r1
 80027b2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80027b4:	430b      	orrs	r3, r1
 80027b6:	6053      	str	r3, [r2, #4]
  }
}
 80027b8:	bd30      	pop	{r4, r5, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	fffdffff 	.word	0xfffdffff
 80027c0:	fffeffff 	.word	0xfffeffff
 80027c4:	fffbffff 	.word	0xfffbffff
 80027c8:	ffff7fff 	.word	0xffff7fff
 80027cc:	ffffefff 	.word	0xffffefff
 80027d0:	ffffdfff 	.word	0xffffdfff
 80027d4:	ffefffff 	.word	0xffefffff
 80027d8:	ff9fffff 	.word	0xff9fffff
 80027dc:	fff7ffff 	.word	0xfff7ffff

080027e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	0004      	movs	r4, r0
 80027e4:	000e      	movs	r6, r1
 80027e6:	0015      	movs	r5, r2
 80027e8:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ea:	6822      	ldr	r2, [r4, #0]
 80027ec:	69d3      	ldr	r3, [r2, #28]
 80027ee:	4033      	ands	r3, r6
 80027f0:	1b9b      	subs	r3, r3, r6
 80027f2:	4259      	negs	r1, r3
 80027f4:	414b      	adcs	r3, r1
 80027f6:	42ab      	cmp	r3, r5
 80027f8:	d001      	beq.n	80027fe <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80027fa:	2000      	movs	r0, #0
 80027fc:	e01e      	b.n	800283c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80027fe:	9b06      	ldr	r3, [sp, #24]
 8002800:	3301      	adds	r3, #1
 8002802:	d0f3      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002804:	f7fe fd1a 	bl	800123c <HAL_GetTick>
 8002808:	9b06      	ldr	r3, [sp, #24]
 800280a:	1bc0      	subs	r0, r0, r7
 800280c:	4283      	cmp	r3, r0
 800280e:	d301      	bcc.n	8002814 <UART_WaitOnFlagUntilTimeout+0x34>
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ea      	bne.n	80027ea <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002814:	0022      	movs	r2, r4
 8002816:	ca08      	ldmia	r2!, {r3}
 8002818:	4809      	ldr	r0, [pc, #36]	; (8002840 <UART_WaitOnFlagUntilTimeout+0x60>)
 800281a:	6819      	ldr	r1, [r3, #0]
 800281c:	4001      	ands	r1, r0
 800281e:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002820:	6899      	ldr	r1, [r3, #8]
 8002822:	30a3      	adds	r0, #163	; 0xa3
 8002824:	30ff      	adds	r0, #255	; 0xff
 8002826:	4381      	bics	r1, r0
 8002828:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800282a:	2320      	movs	r3, #32
 800282c:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800282e:	0022      	movs	r2, r4
 8002830:	3208      	adds	r2, #8
 8002832:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8002834:	2300      	movs	r3, #0
 8002836:	347c      	adds	r4, #124	; 0x7c
 8002838:	7023      	strb	r3, [r4, #0]
 800283a:	3002      	adds	r0, #2
}
 800283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	fffffe5f 	.word	0xfffffe5f

08002844 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002844:	0003      	movs	r3, r0
{
 8002846:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002848:	2600      	movs	r6, #0
{
 800284a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284c:	3388      	adds	r3, #136	; 0x88
 800284e:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8002850:	f7fe fcf4 	bl	800123c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002854:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002856:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	071b      	lsls	r3, r3, #28
 800285c:	d417      	bmi.n	800288e <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	075b      	lsls	r3, r3, #29
 8002864:	d50a      	bpl.n	800287c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <UART_CheckIdleState+0x64>)
 800286a:	2200      	movs	r2, #0
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	03c9      	lsls	r1, r1, #15
 8002870:	002b      	movs	r3, r5
 8002872:	0020      	movs	r0, r4
 8002874:	f7ff ffb4 	bl	80027e0 <UART_WaitOnFlagUntilTimeout>
 8002878:	2800      	cmp	r0, #0
 800287a:	d113      	bne.n	80028a4 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800287c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800287e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002880:	1d22      	adds	r2, r4, #4
 8002882:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002884:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002886:	3204      	adds	r2, #4
 8002888:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800288a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800288c:	e00b      	b.n	80028a6 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <UART_CheckIdleState+0x64>)
 8002892:	0032      	movs	r2, r6
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	0389      	lsls	r1, r1, #14
 8002898:	0003      	movs	r3, r0
 800289a:	0020      	movs	r0, r4
 800289c:	f7ff ffa0 	bl	80027e0 <UART_WaitOnFlagUntilTimeout>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d0dc      	beq.n	800285e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80028a4:	2003      	movs	r0, #3
}
 80028a6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80028a8:	01ffffff 	.word	0x01ffffff

080028ac <HAL_UART_Init>:
{
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80028b2:	2001      	movs	r0, #1
}
 80028b4:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80028b6:	1d05      	adds	r5, r0, #4
 80028b8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d104      	bne.n	80028c8 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 80028be:	0002      	movs	r2, r0
 80028c0:	327c      	adds	r2, #124	; 0x7c
 80028c2:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80028c4:	f7fe fb3a 	bl	8000f3c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80028ca:	2101      	movs	r1, #1
 80028cc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028ce:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80028d0:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028d2:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80028d4:	438b      	bics	r3, r1
 80028d6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028d8:	f7ff fd18 	bl	800230c <UART_SetConfig>
 80028dc:	2801      	cmp	r0, #1
 80028de:	d0e8      	beq.n	80028b2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 80028e6:	0020      	movs	r0, r4
 80028e8:	f7ff ff12 	bl	8002710 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	4908      	ldr	r1, [pc, #32]	; (8002910 <HAL_UART_Init+0x64>)
 80028f0:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80028f2:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f4:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f6:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	438a      	bics	r2, r1
 80028fe:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002900:	2201      	movs	r2, #1
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002908:	f7ff ff9c 	bl	8002844 <UART_CheckIdleState>
 800290c:	e7d2      	b.n	80028b4 <HAL_UART_Init+0x8>
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	ffffb7ff 	.word	0xffffb7ff

08002914 <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002914:	2301      	movs	r3, #1
{
 8002916:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002918:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800291a:	aa02      	add	r2, sp, #8
 800291c:	7013      	strb	r3, [r2, #0]
 800291e:	7053      	strb	r3, [r2, #1]
 8002920:	7093      	strb	r3, [r2, #2]
 8002922:	2203      	movs	r2, #3
 8002924:	a902      	add	r1, sp, #8
 8002926:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002928:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800292a:	2200      	movs	r2, #0
 800292c:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800292e:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002930:	718a      	strb	r2, [r1, #6]
 8002932:	71ca      	strb	r2, [r1, #7]
 8002934:	710e      	strb	r6, [r1, #4]
 8002936:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002938:	70a5      	strb	r5, [r4, #2]
 800293a:	2104      	movs	r1, #4
 800293c:	0007      	movs	r7, r0
 800293e:	0005      	movs	r5, r0
 8002940:	3208      	adds	r2, #8
 8002942:	7022      	strb	r2, [r4, #0]
 8002944:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002946:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002948:	7061      	strb	r1, [r4, #1]
 800294a:	70e1      	strb	r1, [r4, #3]
 800294c:	7163      	strb	r3, [r4, #5]
 800294e:	71a3      	strb	r3, [r4, #6]
 8002950:	71e3      	strb	r3, [r4, #7]
 8002952:	376a      	adds	r7, #106	; 0x6a
 8002954:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002956:	2a00      	cmp	r2, #0
 8002958:	d103      	bne.n	8002962 <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 800295a:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 800295c:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800295e:	b007      	add	sp, #28
 8002960:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002962:	6803      	ldr	r3, [r0, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002966:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002968:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800296a:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800296c:	aa02      	add	r2, sp, #8
 800296e:	5cd0      	ldrb	r0, [r2, r3]
 8002970:	5ce1      	ldrb	r1, [r4, r3]
 8002972:	00c0      	lsls	r0, r0, #3
 8002974:	f7fd fc62 	bl	800023c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002978:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800297a:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800297c:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800297e:	401e      	ands	r6, r3
 8002980:	ab02      	add	r3, sp, #8
 8002982:	5d98      	ldrb	r0, [r3, r6]
 8002984:	5da1      	ldrb	r1, [r4, r6]
 8002986:	00c0      	lsls	r0, r0, #3
 8002988:	f7fd fc58 	bl	800023c <__divsi3>
 800298c:	8028      	strh	r0, [r5, #0]
}
 800298e:	e7e6      	b.n	800295e <UARTEx_SetNbDataToProcess+0x4a>

08002990 <HAL_UARTEx_DisableFifoMode>:
{
 8002990:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8002992:	0004      	movs	r4, r0
 8002994:	347c      	adds	r4, #124	; 0x7c
 8002996:	7822      	ldrb	r2, [r4, #0]
 8002998:	2302      	movs	r3, #2
 800299a:	2a01      	cmp	r2, #1
 800299c:	d010      	beq.n	80029c0 <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 800299e:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029a0:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029a2:	1d05      	adds	r5, r0, #4
 80029a4:	3322      	adds	r3, #34	; 0x22
 80029a6:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029a8:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80029aa:	6813      	ldr	r3, [r2, #0]
 80029ac:	43b3      	bics	r3, r6
 80029ae:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <HAL_UARTEx_DisableFifoMode+0x34>)
 80029b2:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80029b8:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80029ba:	2220      	movs	r2, #32
 80029bc:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80029be:	7023      	strb	r3, [r4, #0]
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	dfffffff 	.word	0xdfffffff

080029c8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80029ca:	0005      	movs	r5, r0
 80029cc:	357c      	adds	r5, #124	; 0x7c
 80029ce:	782b      	ldrb	r3, [r5, #0]
{
 80029d0:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 80029d2:	2002      	movs	r0, #2
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d017      	beq.n	8002a08 <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 80029d8:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029da:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 80029dc:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80029de:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 80029e0:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029e2:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029e4:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	4383      	bics	r3, r0
 80029ea:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80029ec:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80029ee:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	08db      	lsrs	r3, r3, #3
 80029f4:	4319      	orrs	r1, r3
 80029f6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80029f8:	f7ff ff8c 	bl	8002914 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80029fc:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 80029fe:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a00:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002a02:	2320      	movs	r3, #32
 8002a04:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002a06:	7028      	strb	r0, [r5, #0]
}
 8002a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a0c <HAL_UARTEx_SetRxFifoThreshold>:
{
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8002a0e:	0005      	movs	r5, r0
 8002a10:	357c      	adds	r5, #124	; 0x7c
 8002a12:	782b      	ldrb	r3, [r5, #0]
{
 8002a14:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8002a16:	2002      	movs	r0, #2
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d017      	beq.n	8002a4c <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a1c:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8002a1e:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002a20:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8002a22:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a24:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4382      	bics	r2, r0
 8002a2e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	4807      	ldr	r0, [pc, #28]	; (8002a50 <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8002a34:	4002      	ands	r2, r0
 8002a36:	4311      	orrs	r1, r2
 8002a38:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002a3a:	0020      	movs	r0, r4
 8002a3c:	f7ff ff6a 	bl	8002914 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a40:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8002a42:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a44:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002a46:	2320      	movs	r3, #32
 8002a48:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002a4a:	7028      	strb	r0, [r5, #0]
}
 8002a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	f1ffffff 	.word	0xf1ffffff

08002a54 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 8002a54:	b510      	push	{r4, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8002a56:	4906      	ldr	r1, [pc, #24]	; (8002a70 <MX_FATFS_Init+0x1c>)
 8002a58:	4806      	ldr	r0, [pc, #24]	; (8002a74 <MX_FATFS_Init+0x20>)
 8002a5a:	f000 f89f 	bl	8002b9c <FATFS_LinkDriver>
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d103      	bne.n	8002a6a <MX_FATFS_Init+0x16>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8002a62:	2201      	movs	r2, #1
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <MX_FATFS_Init+0x24>)
 8002a66:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 8002a68:	bd10      	pop	{r4, pc}
    return APP_ERROR;
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	4240      	negs	r0, r0
 8002a6e:	e7fb      	b.n	8002a68 <MX_FATFS_Init+0x14>
 8002a70:	20000704 	.word	0x20000704
 8002a74:	08003374 	.word	0x08003374
 8002a78:	200005a0 	.word	0x200005a0

08002a7c <SD_CheckStatus.isra.0>:
  SD_ioctl,
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8002a7c:	b570      	push	{r4, r5, r6, lr}
{
  Stat = STA_NOINIT;
 8002a7e:	2501      	movs	r5, #1
 8002a80:	4c05      	ldr	r4, [pc, #20]	; (8002a98 <SD_CheckStatus.isra.0+0x1c>)
 8002a82:	7025      	strb	r5, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8002a84:	f7fe f9c8 	bl	8000e18 <BSP_SD_GetCardState>
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	d102      	bne.n	8002a92 <SD_CheckStatus.isra.0+0x16>
  {
    Stat &= ~STA_NOINIT;
 8002a8c:	7823      	ldrb	r3, [r4, #0]
 8002a8e:	43ab      	bics	r3, r5
 8002a90:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 8002a92:	7820      	ldrb	r0, [r4, #0]
 8002a94:	b2c0      	uxtb	r0, r0
}
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	20000010 	.word	0x20000010

08002a9c <SD_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  /* USER CODE BEGIN SDinitialize */
  Stat = STA_NOINIT;
 8002a9c:	2301      	movs	r3, #1
{
 8002a9e:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8002aa0:	4c05      	ldr	r4, [pc, #20]	; (8002ab8 <SD_initialize+0x1c>)
 8002aa2:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8002aa4:	f7fd fe32 	bl	800070c <BSP_SD_Init>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d102      	bne.n	8002ab2 <SD_initialize+0x16>
  {
    Stat = SD_CheckStatus(lun);
 8002aac:	f7ff ffe6 	bl	8002a7c <SD_CheckStatus.isra.0>
 8002ab0:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8002ab2:	7820      	ldrb	r0, [r4, #0]
 8002ab4:	b2c0      	uxtb	r0, r0
  /* USER CODE END SDinitialize */
}
 8002ab6:	bd10      	pop	{r4, pc}
 8002ab8:	20000010 	.word	0x20000010

08002abc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8002abc:	b510      	push	{r4, lr}
  return SD_CheckStatus(lun);
 8002abe:	f7ff ffdd 	bl	8002a7c <SD_CheckStatus.isra.0>
}
 8002ac2:	bd10      	pop	{r4, pc}

08002ac4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8002ac4:	0008      	movs	r0, r1
 8002ac6:	b510      	push	{r4, lr}
 8002ac8:	0011      	movs	r1, r2
 8002aca:	001a      	movs	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <SD_read+0x20>)
 8002ace:	f7fe f8a5 	bl	8000c1c <BSP_SD_ReadBlocks>
 8002ad2:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 8002ad4:	2001      	movs	r0, #1
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <SD_read+0x1e>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8002ada:	f7fe f99d 	bl	8000e18 <BSP_SD_GetCardState>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d1fb      	bne.n	8002ada <SD_read+0x16>
}
 8002ae2:	bd10      	pop	{r4, pc}
 8002ae4:	05f5e100 	.word	0x05f5e100

08002ae8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8002ae8:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <SD_ioctl+0x48>)
{
 8002aec:	0014      	movs	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002aee:	781a      	ldrb	r2, [r3, #0]
{
 8002af0:	b090      	sub	sp, #64	; 0x40
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002af2:	2003      	movs	r0, #3
 8002af4:	07d3      	lsls	r3, r2, #31
 8002af6:	d413      	bmi.n	8002b20 <SD_ioctl+0x38>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
     res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8002af8:	3001      	adds	r0, #1
  switch (cmd)
 8002afa:	2903      	cmp	r1, #3
 8002afc:	d810      	bhi.n	8002b20 <SD_ioctl+0x38>
 8002afe:	0008      	movs	r0, r1
 8002b00:	f7fd fafe 	bl	8000100 <__gnu_thumb1_case_uqi>
 8002b04:	1008020d 	.word	0x1008020d
    BSP_SD_GetCardInfo(&CardInfo);
 8002b08:	4668      	mov	r0, sp
 8002b0a:	f7fd fec1 	bl	8000890 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8002b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002b10:	6023      	str	r3, [r4, #0]
 8002b12:	e004      	b.n	8002b1e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8002b14:	4668      	mov	r0, sp
 8002b16:	f7fd febb 	bl	8000890 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8002b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b1c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8002b1e:	2000      	movs	r0, #0
  }

  return res;
}
 8002b20:	b010      	add	sp, #64	; 0x40
 8002b22:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8002b24:	4668      	mov	r0, sp
 8002b26:	f7fd feb3 	bl	8000890 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002b2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b2c:	0a5b      	lsrs	r3, r3, #9
 8002b2e:	e7ef      	b.n	8002b10 <SD_ioctl+0x28>
 8002b30:	20000010 	.word	0x20000010

08002b34 <SD_write>:
{
 8002b34:	0008      	movs	r0, r1
 8002b36:	b510      	push	{r4, lr}
 8002b38:	0011      	movs	r1, r2
 8002b3a:	001a      	movs	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <SD_write+0x20>)
 8002b3e:	f7fe f8df 	bl	8000d00 <BSP_SD_WriteBlocks>
 8002b42:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 8002b44:	2001      	movs	r0, #1
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d103      	bne.n	8002b52 <SD_write+0x1e>
    while(BSP_SD_GetCardState() != MSD_OK)
 8002b4a:	f7fe f965 	bl	8000e18 <BSP_SD_GetCardState>
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d1fb      	bne.n	8002b4a <SD_write+0x16>
}
 8002b52:	bd10      	pop	{r4, pc}
 8002b54:	05f5e100 	.word	0x05f5e100

08002b58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002b58:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <FATFS_LinkDriverEx+0x40>)
  uint8_t ret = 1;
 8002b5c:	2501      	movs	r5, #1
  if(disk.nbr < _VOLUMES)
 8002b5e:	7a5c      	ldrb	r4, [r3, #9]
 8002b60:	b2e4      	uxtb	r4, r4
 8002b62:	2c00      	cmp	r4, #0
 8002b64:	d115      	bne.n	8002b92 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002b66:	7a5d      	ldrb	r5, [r3, #9]
 8002b68:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8002b6a:	7a5d      	ldrb	r5, [r3, #9]
 8002b6c:	00ad      	lsls	r5, r5, #2
 8002b6e:	195d      	adds	r5, r3, r5
 8002b70:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8002b72:	7a58      	ldrb	r0, [r3, #9]
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
    path[1] = ':';
    path[2] = '/';
    path[3] = 0;
 8002b74:	0025      	movs	r5, r4
    disk.lun[disk.nbr] = lun;
 8002b76:	1818      	adds	r0, r3, r0
 8002b78:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8002b7a:	7a5a      	ldrb	r2, [r3, #9]
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	1c50      	adds	r0, r2, #1
 8002b80:	b2c0      	uxtb	r0, r0
 8002b82:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 8002b84:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8002b86:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8002b88:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8002b8a:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 8002b8c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8002b8e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8002b90:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8002b92:	0028      	movs	r0, r5
 8002b94:	bd30      	pop	{r4, r5, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	200005a4 	.word	0x200005a4

08002b9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8002b9c:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f7ff ffda 	bl	8002b58 <FATFS_LinkDriverEx>
}
 8002ba4:	bd10      	pop	{r4, pc}
	...

08002ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ba8:	480d      	ldr	r0, [pc, #52]	; (8002be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002baa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002bac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002bae:	e003      	b.n	8002bb8 <LoopCopyDataInit>

08002bb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002bb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002bb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002bb6:	3104      	adds	r1, #4

08002bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002bb8:	480b      	ldr	r0, [pc, #44]	; (8002be8 <LoopForever+0xa>)
  ldr r3, =_edata
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <LoopForever+0xe>)
  adds r2, r0, r1
 8002bbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002bbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002bc0:	d3f6      	bcc.n	8002bb0 <CopyDataInit>
  ldr r2, =_sbss
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <LoopForever+0x12>)
  b LoopFillZerobss
 8002bc4:	e002      	b.n	8002bcc <LoopFillZerobss>

08002bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  str  r3, [r2]
 8002bc8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bca:	3204      	adds	r2, #4

08002bcc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <LoopForever+0x16>)
  cmp r2, r3
 8002bce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002bd0:	d3f9      	bcc.n	8002bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bd2:	f7fe fae3 	bl	800119c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002bd6:	f000 f817 	bl	8002c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bda:	f7fd fc67 	bl	80004ac <main>

08002bde <LoopForever>:

LoopForever:
    b LoopForever
 8002bde:	e7fe      	b.n	8002bde <LoopForever>
  ldr   r0, =_estack
 8002be0:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8002be4:	08003390 	.word	0x08003390
  ldr r0, =_sdata
 8002be8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002bec:	20000518 	.word	0x20000518
  ldr r2, =_sbss
 8002bf0:	20000518 	.word	0x20000518
  ldr r3, = _ebss
 8002bf4:	20000b78 	.word	0x20000b78

08002bf8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bf8:	e7fe      	b.n	8002bf8 <ADC1_IRQHandler>
	...

08002bfc <__errno>:
 8002bfc:	4b01      	ldr	r3, [pc, #4]	; (8002c04 <__errno+0x8>)
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	4770      	bx	lr
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	20000014 	.word	0x20000014

08002c08 <__libc_init_array>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	4d0c      	ldr	r5, [pc, #48]	; (8002c40 <__libc_init_array+0x38>)
 8002c0e:	4c0d      	ldr	r4, [pc, #52]	; (8002c44 <__libc_init_array+0x3c>)
 8002c10:	1b64      	subs	r4, r4, r5
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	42a6      	cmp	r6, r4
 8002c16:	d109      	bne.n	8002c2c <__libc_init_array+0x24>
 8002c18:	2600      	movs	r6, #0
 8002c1a:	f000 fb65 	bl	80032e8 <_init>
 8002c1e:	4d0a      	ldr	r5, [pc, #40]	; (8002c48 <__libc_init_array+0x40>)
 8002c20:	4c0a      	ldr	r4, [pc, #40]	; (8002c4c <__libc_init_array+0x44>)
 8002c22:	1b64      	subs	r4, r4, r5
 8002c24:	10a4      	asrs	r4, r4, #2
 8002c26:	42a6      	cmp	r6, r4
 8002c28:	d105      	bne.n	8002c36 <__libc_init_array+0x2e>
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}
 8002c2c:	00b3      	lsls	r3, r6, #2
 8002c2e:	58eb      	ldr	r3, [r5, r3]
 8002c30:	4798      	blx	r3
 8002c32:	3601      	adds	r6, #1
 8002c34:	e7ee      	b.n	8002c14 <__libc_init_array+0xc>
 8002c36:	00b3      	lsls	r3, r6, #2
 8002c38:	58eb      	ldr	r3, [r5, r3]
 8002c3a:	4798      	blx	r3
 8002c3c:	3601      	adds	r6, #1
 8002c3e:	e7f2      	b.n	8002c26 <__libc_init_array+0x1e>
 8002c40:	08003388 	.word	0x08003388
 8002c44:	08003388 	.word	0x08003388
 8002c48:	08003388 	.word	0x08003388
 8002c4c:	0800338c 	.word	0x0800338c

08002c50 <malloc>:
 8002c50:	b510      	push	{r4, lr}
 8002c52:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <malloc+0x10>)
 8002c54:	0001      	movs	r1, r0
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	f000 f80e 	bl	8002c78 <_malloc_r>
 8002c5c:	bd10      	pop	{r4, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	20000014 	.word	0x20000014

08002c64 <free>:
 8002c64:	b510      	push	{r4, lr}
 8002c66:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <free+0x10>)
 8002c68:	0001      	movs	r1, r0
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	f000 fa86 	bl	800317c <_free_r>
 8002c70:	bd10      	pop	{r4, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	20000014 	.word	0x20000014

08002c78 <_malloc_r>:
 8002c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7a:	000d      	movs	r5, r1
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	350b      	adds	r5, #11
 8002c80:	9001      	str	r0, [sp, #4]
 8002c82:	2d16      	cmp	r5, #22
 8002c84:	d908      	bls.n	8002c98 <_malloc_r+0x20>
 8002c86:	2307      	movs	r3, #7
 8002c88:	439d      	bics	r5, r3
 8002c8a:	d506      	bpl.n	8002c9a <_malloc_r+0x22>
 8002c8c:	230c      	movs	r3, #12
 8002c8e:	9a01      	ldr	r2, [sp, #4]
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	2000      	movs	r0, #0
 8002c94:	b005      	add	sp, #20
 8002c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c98:	2510      	movs	r5, #16
 8002c9a:	428d      	cmp	r5, r1
 8002c9c:	d3f6      	bcc.n	8002c8c <_malloc_r+0x14>
 8002c9e:	9801      	ldr	r0, [sp, #4]
 8002ca0:	f000 f9f6 	bl	8003090 <__malloc_lock>
 8002ca4:	23f8      	movs	r3, #248	; 0xf8
 8002ca6:	33ff      	adds	r3, #255	; 0xff
 8002ca8:	48ba      	ldr	r0, [pc, #744]	; (8002f94 <_malloc_r+0x31c>)
 8002caa:	429d      	cmp	r5, r3
 8002cac:	d81f      	bhi.n	8002cee <_malloc_r+0x76>
 8002cae:	002a      	movs	r2, r5
 8002cb0:	3208      	adds	r2, #8
 8002cb2:	1882      	adds	r2, r0, r2
 8002cb4:	0011      	movs	r1, r2
 8002cb6:	6854      	ldr	r4, [r2, #4]
 8002cb8:	3908      	subs	r1, #8
 8002cba:	08eb      	lsrs	r3, r5, #3
 8002cbc:	428c      	cmp	r4, r1
 8002cbe:	d103      	bne.n	8002cc8 <_malloc_r+0x50>
 8002cc0:	68d4      	ldr	r4, [r2, #12]
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	42a2      	cmp	r2, r4
 8002cc6:	d029      	beq.n	8002d1c <_malloc_r+0xa4>
 8002cc8:	2303      	movs	r3, #3
 8002cca:	6862      	ldr	r2, [r4, #4]
 8002ccc:	68a1      	ldr	r1, [r4, #8]
 8002cce:	439a      	bics	r2, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	68e2      	ldr	r2, [r4, #12]
 8002cd4:	18e3      	adds	r3, r4, r3
 8002cd6:	60ca      	str	r2, [r1, #12]
 8002cd8:	6091      	str	r1, [r2, #8]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	9801      	ldr	r0, [sp, #4]
 8002ce4:	f000 f9dc 	bl	80030a0 <__malloc_unlock>
 8002ce8:	0020      	movs	r0, r4
 8002cea:	3008      	adds	r0, #8
 8002cec:	e7d2      	b.n	8002c94 <_malloc_r+0x1c>
 8002cee:	0a6a      	lsrs	r2, r5, #9
 8002cf0:	233f      	movs	r3, #63	; 0x3f
 8002cf2:	2a00      	cmp	r2, #0
 8002cf4:	d003      	beq.n	8002cfe <_malloc_r+0x86>
 8002cf6:	2a04      	cmp	r2, #4
 8002cf8:	d828      	bhi.n	8002d4c <_malloc_r+0xd4>
 8002cfa:	09ab      	lsrs	r3, r5, #6
 8002cfc:	3338      	adds	r3, #56	; 0x38
 8002cfe:	2203      	movs	r2, #3
 8002d00:	4694      	mov	ip, r2
 8002d02:	00d9      	lsls	r1, r3, #3
 8002d04:	1809      	adds	r1, r1, r0
 8002d06:	68cc      	ldr	r4, [r1, #12]
 8002d08:	428c      	cmp	r4, r1
 8002d0a:	d006      	beq.n	8002d1a <_malloc_r+0xa2>
 8002d0c:	4666      	mov	r6, ip
 8002d0e:	6862      	ldr	r2, [r4, #4]
 8002d10:	43b2      	bics	r2, r6
 8002d12:	1b57      	subs	r7, r2, r5
 8002d14:	2f0f      	cmp	r7, #15
 8002d16:	dd31      	ble.n	8002d7c <_malloc_r+0x104>
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	0001      	movs	r1, r0
 8002d1e:	6904      	ldr	r4, [r0, #16]
 8002d20:	3108      	adds	r1, #8
 8002d22:	428c      	cmp	r4, r1
 8002d24:	d04e      	beq.n	8002dc4 <_malloc_r+0x14c>
 8002d26:	2203      	movs	r2, #3
 8002d28:	6866      	ldr	r6, [r4, #4]
 8002d2a:	4396      	bics	r6, r2
 8002d2c:	0032      	movs	r2, r6
 8002d2e:	1b76      	subs	r6, r6, r5
 8002d30:	2e0f      	cmp	r6, #15
 8002d32:	dd31      	ble.n	8002d98 <_malloc_r+0x120>
 8002d34:	2701      	movs	r7, #1
 8002d36:	1963      	adds	r3, r4, r5
 8002d38:	433d      	orrs	r5, r7
 8002d3a:	4337      	orrs	r7, r6
 8002d3c:	6065      	str	r5, [r4, #4]
 8002d3e:	6143      	str	r3, [r0, #20]
 8002d40:	6103      	str	r3, [r0, #16]
 8002d42:	60d9      	str	r1, [r3, #12]
 8002d44:	6099      	str	r1, [r3, #8]
 8002d46:	605f      	str	r7, [r3, #4]
 8002d48:	50a6      	str	r6, [r4, r2]
 8002d4a:	e7ca      	b.n	8002ce2 <_malloc_r+0x6a>
 8002d4c:	2a14      	cmp	r2, #20
 8002d4e:	d802      	bhi.n	8002d56 <_malloc_r+0xde>
 8002d50:	0013      	movs	r3, r2
 8002d52:	335b      	adds	r3, #91	; 0x5b
 8002d54:	e7d3      	b.n	8002cfe <_malloc_r+0x86>
 8002d56:	2a54      	cmp	r2, #84	; 0x54
 8002d58:	d802      	bhi.n	8002d60 <_malloc_r+0xe8>
 8002d5a:	0b2b      	lsrs	r3, r5, #12
 8002d5c:	336e      	adds	r3, #110	; 0x6e
 8002d5e:	e7ce      	b.n	8002cfe <_malloc_r+0x86>
 8002d60:	23aa      	movs	r3, #170	; 0xaa
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d802      	bhi.n	8002d6e <_malloc_r+0xf6>
 8002d68:	0beb      	lsrs	r3, r5, #15
 8002d6a:	3377      	adds	r3, #119	; 0x77
 8002d6c:	e7c7      	b.n	8002cfe <_malloc_r+0x86>
 8002d6e:	498a      	ldr	r1, [pc, #552]	; (8002f98 <_malloc_r+0x320>)
 8002d70:	237e      	movs	r3, #126	; 0x7e
 8002d72:	428a      	cmp	r2, r1
 8002d74:	d8c3      	bhi.n	8002cfe <_malloc_r+0x86>
 8002d76:	0cab      	lsrs	r3, r5, #18
 8002d78:	337c      	adds	r3, #124	; 0x7c
 8002d7a:	e7c0      	b.n	8002cfe <_malloc_r+0x86>
 8002d7c:	68e6      	ldr	r6, [r4, #12]
 8002d7e:	2f00      	cmp	r7, #0
 8002d80:	db08      	blt.n	8002d94 <_malloc_r+0x11c>
 8002d82:	68a3      	ldr	r3, [r4, #8]
 8002d84:	60de      	str	r6, [r3, #12]
 8002d86:	60b3      	str	r3, [r6, #8]
 8002d88:	2301      	movs	r3, #1
 8002d8a:	18a2      	adds	r2, r4, r2
 8002d8c:	6851      	ldr	r1, [r2, #4]
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	6053      	str	r3, [r2, #4]
 8002d92:	e7a6      	b.n	8002ce2 <_malloc_r+0x6a>
 8002d94:	0034      	movs	r4, r6
 8002d96:	e7b7      	b.n	8002d08 <_malloc_r+0x90>
 8002d98:	6141      	str	r1, [r0, #20]
 8002d9a:	6101      	str	r1, [r0, #16]
 8002d9c:	2e00      	cmp	r6, #0
 8002d9e:	daf3      	bge.n	8002d88 <_malloc_r+0x110>
 8002da0:	497e      	ldr	r1, [pc, #504]	; (8002f9c <_malloc_r+0x324>)
 8002da2:	428a      	cmp	r2, r1
 8002da4:	d842      	bhi.n	8002e2c <_malloc_r+0x1b4>
 8002da6:	08d2      	lsrs	r2, r2, #3
 8002da8:	39ff      	subs	r1, #255	; 0xff
 8002daa:	1096      	asrs	r6, r2, #2
 8002dac:	39ff      	subs	r1, #255	; 0xff
 8002dae:	40b1      	lsls	r1, r6
 8002db0:	6846      	ldr	r6, [r0, #4]
 8002db2:	00d2      	lsls	r2, r2, #3
 8002db4:	4331      	orrs	r1, r6
 8002db6:	6041      	str	r1, [r0, #4]
 8002db8:	1810      	adds	r0, r2, r0
 8002dba:	6882      	ldr	r2, [r0, #8]
 8002dbc:	60e0      	str	r0, [r4, #12]
 8002dbe:	60a2      	str	r2, [r4, #8]
 8002dc0:	6084      	str	r4, [r0, #8]
 8002dc2:	60d4      	str	r4, [r2, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	1099      	asrs	r1, r3, #2
 8002dc8:	408a      	lsls	r2, r1
 8002dca:	4972      	ldr	r1, [pc, #456]	; (8002f94 <_malloc_r+0x31c>)
 8002dcc:	6848      	ldr	r0, [r1, #4]
 8002dce:	4282      	cmp	r2, r0
 8002dd0:	d900      	bls.n	8002dd4 <_malloc_r+0x15c>
 8002dd2:	e097      	b.n	8002f04 <_malloc_r+0x28c>
 8002dd4:	4210      	tst	r0, r2
 8002dd6:	d105      	bne.n	8002de4 <_malloc_r+0x16c>
 8002dd8:	2403      	movs	r4, #3
 8002dda:	43a3      	bics	r3, r4
 8002ddc:	0052      	lsls	r2, r2, #1
 8002dde:	3304      	adds	r3, #4
 8002de0:	4210      	tst	r0, r2
 8002de2:	d0fb      	beq.n	8002ddc <_malloc_r+0x164>
 8002de4:	469c      	mov	ip, r3
 8002de6:	00d8      	lsls	r0, r3, #3
 8002de8:	1808      	adds	r0, r1, r0
 8002dea:	9002      	str	r0, [sp, #8]
 8002dec:	9c02      	ldr	r4, [sp, #8]
 8002dee:	68e4      	ldr	r4, [r4, #12]
 8002df0:	9e02      	ldr	r6, [sp, #8]
 8002df2:	42b4      	cmp	r4, r6
 8002df4:	d158      	bne.n	8002ea8 <_malloc_r+0x230>
 8002df6:	0034      	movs	r4, r6
 8002df8:	3408      	adds	r4, #8
 8002dfa:	9402      	str	r4, [sp, #8]
 8002dfc:	2401      	movs	r4, #1
 8002dfe:	44a4      	add	ip, r4
 8002e00:	4664      	mov	r4, ip
 8002e02:	2603      	movs	r6, #3
 8002e04:	4234      	tst	r4, r6
 8002e06:	d1f1      	bne.n	8002dec <_malloc_r+0x174>
 8002e08:	2403      	movs	r4, #3
 8002e0a:	4223      	tst	r3, r4
 8002e0c:	d174      	bne.n	8002ef8 <_malloc_r+0x280>
 8002e0e:	684b      	ldr	r3, [r1, #4]
 8002e10:	4393      	bics	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
 8002e14:	6848      	ldr	r0, [r1, #4]
 8002e16:	0052      	lsls	r2, r2, #1
 8002e18:	4282      	cmp	r2, r0
 8002e1a:	d873      	bhi.n	8002f04 <_malloc_r+0x28c>
 8002e1c:	2a00      	cmp	r2, #0
 8002e1e:	d071      	beq.n	8002f04 <_malloc_r+0x28c>
 8002e20:	4663      	mov	r3, ip
 8002e22:	4210      	tst	r0, r2
 8002e24:	d1de      	bne.n	8002de4 <_malloc_r+0x16c>
 8002e26:	3304      	adds	r3, #4
 8002e28:	0052      	lsls	r2, r2, #1
 8002e2a:	e7fa      	b.n	8002e22 <_malloc_r+0x1aa>
 8002e2c:	0a56      	lsrs	r6, r2, #9
 8002e2e:	2e04      	cmp	r6, #4
 8002e30:	d816      	bhi.n	8002e60 <_malloc_r+0x1e8>
 8002e32:	0991      	lsrs	r1, r2, #6
 8002e34:	3138      	adds	r1, #56	; 0x38
 8002e36:	00cf      	lsls	r7, r1, #3
 8002e38:	183e      	adds	r6, r7, r0
 8002e3a:	2703      	movs	r7, #3
 8002e3c:	9602      	str	r6, [sp, #8]
 8002e3e:	46bc      	mov	ip, r7
 8002e40:	68b6      	ldr	r6, [r6, #8]
 8002e42:	9f02      	ldr	r7, [sp, #8]
 8002e44:	42b7      	cmp	r7, r6
 8002e46:	d127      	bne.n	8002e98 <_malloc_r+0x220>
 8002e48:	2201      	movs	r2, #1
 8002e4a:	1089      	asrs	r1, r1, #2
 8002e4c:	408a      	lsls	r2, r1
 8002e4e:	6841      	ldr	r1, [r0, #4]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	6042      	str	r2, [r0, #4]
 8002e54:	9a02      	ldr	r2, [sp, #8]
 8002e56:	60a6      	str	r6, [r4, #8]
 8002e58:	60e2      	str	r2, [r4, #12]
 8002e5a:	6094      	str	r4, [r2, #8]
 8002e5c:	60f4      	str	r4, [r6, #12]
 8002e5e:	e7b1      	b.n	8002dc4 <_malloc_r+0x14c>
 8002e60:	2e14      	cmp	r6, #20
 8002e62:	d802      	bhi.n	8002e6a <_malloc_r+0x1f2>
 8002e64:	0031      	movs	r1, r6
 8002e66:	315b      	adds	r1, #91	; 0x5b
 8002e68:	e7e5      	b.n	8002e36 <_malloc_r+0x1be>
 8002e6a:	2e54      	cmp	r6, #84	; 0x54
 8002e6c:	d802      	bhi.n	8002e74 <_malloc_r+0x1fc>
 8002e6e:	0b11      	lsrs	r1, r2, #12
 8002e70:	316e      	adds	r1, #110	; 0x6e
 8002e72:	e7e0      	b.n	8002e36 <_malloc_r+0x1be>
 8002e74:	21aa      	movs	r1, #170	; 0xaa
 8002e76:	0049      	lsls	r1, r1, #1
 8002e78:	428e      	cmp	r6, r1
 8002e7a:	d802      	bhi.n	8002e82 <_malloc_r+0x20a>
 8002e7c:	0bd1      	lsrs	r1, r2, #15
 8002e7e:	3177      	adds	r1, #119	; 0x77
 8002e80:	e7d9      	b.n	8002e36 <_malloc_r+0x1be>
 8002e82:	4f45      	ldr	r7, [pc, #276]	; (8002f98 <_malloc_r+0x320>)
 8002e84:	217e      	movs	r1, #126	; 0x7e
 8002e86:	42be      	cmp	r6, r7
 8002e88:	d8d5      	bhi.n	8002e36 <_malloc_r+0x1be>
 8002e8a:	0c91      	lsrs	r1, r2, #18
 8002e8c:	317c      	adds	r1, #124	; 0x7c
 8002e8e:	e7d2      	b.n	8002e36 <_malloc_r+0x1be>
 8002e90:	68b6      	ldr	r6, [r6, #8]
 8002e92:	9902      	ldr	r1, [sp, #8]
 8002e94:	42b1      	cmp	r1, r6
 8002e96:	d004      	beq.n	8002ea2 <_malloc_r+0x22a>
 8002e98:	4660      	mov	r0, ip
 8002e9a:	6871      	ldr	r1, [r6, #4]
 8002e9c:	4381      	bics	r1, r0
 8002e9e:	428a      	cmp	r2, r1
 8002ea0:	d3f6      	bcc.n	8002e90 <_malloc_r+0x218>
 8002ea2:	68f2      	ldr	r2, [r6, #12]
 8002ea4:	9202      	str	r2, [sp, #8]
 8002ea6:	e7d5      	b.n	8002e54 <_malloc_r+0x1dc>
 8002ea8:	2603      	movs	r6, #3
 8002eaa:	6867      	ldr	r7, [r4, #4]
 8002eac:	43b7      	bics	r7, r6
 8002eae:	9703      	str	r7, [sp, #12]
 8002eb0:	1b7e      	subs	r6, r7, r5
 8002eb2:	2e0f      	cmp	r6, #15
 8002eb4:	dd11      	ble.n	8002eda <_malloc_r+0x262>
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	1963      	adds	r3, r4, r5
 8002eba:	4315      	orrs	r5, r2
 8002ebc:	6065      	str	r5, [r4, #4]
 8002ebe:	68e0      	ldr	r0, [r4, #12]
 8002ec0:	68a5      	ldr	r5, [r4, #8]
 8002ec2:	3108      	adds	r1, #8
 8002ec4:	60e8      	str	r0, [r5, #12]
 8002ec6:	4332      	orrs	r2, r6
 8002ec8:	6085      	str	r5, [r0, #8]
 8002eca:	60cb      	str	r3, [r1, #12]
 8002ecc:	608b      	str	r3, [r1, #8]
 8002ece:	60d9      	str	r1, [r3, #12]
 8002ed0:	6099      	str	r1, [r3, #8]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	003b      	movs	r3, r7
 8002ed6:	50e6      	str	r6, [r4, r3]
 8002ed8:	e703      	b.n	8002ce2 <_malloc_r+0x6a>
 8002eda:	68e7      	ldr	r7, [r4, #12]
 8002edc:	2e00      	cmp	r6, #0
 8002ede:	db09      	blt.n	8002ef4 <_malloc_r+0x27c>
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	9b03      	ldr	r3, [sp, #12]
 8002ee4:	18e3      	adds	r3, r4, r3
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	68a3      	ldr	r3, [r4, #8]
 8002eee:	60df      	str	r7, [r3, #12]
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	e6f6      	b.n	8002ce2 <_malloc_r+0x6a>
 8002ef4:	003c      	movs	r4, r7
 8002ef6:	e77b      	b.n	8002df0 <_malloc_r+0x178>
 8002ef8:	3808      	subs	r0, #8
 8002efa:	6884      	ldr	r4, [r0, #8]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	42a0      	cmp	r0, r4
 8002f00:	d082      	beq.n	8002e08 <_malloc_r+0x190>
 8002f02:	e787      	b.n	8002e14 <_malloc_r+0x19c>
 8002f04:	2303      	movs	r3, #3
 8002f06:	688f      	ldr	r7, [r1, #8]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	439a      	bics	r2, r3
 8002f0c:	9202      	str	r2, [sp, #8]
 8002f0e:	4295      	cmp	r5, r2
 8002f10:	d803      	bhi.n	8002f1a <_malloc_r+0x2a2>
 8002f12:	1b52      	subs	r2, r2, r5
 8002f14:	2a0f      	cmp	r2, #15
 8002f16:	dd00      	ble.n	8002f1a <_malloc_r+0x2a2>
 8002f18:	e09f      	b.n	800305a <_malloc_r+0x3e2>
 8002f1a:	9b02      	ldr	r3, [sp, #8]
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	9303      	str	r3, [sp, #12]
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <_malloc_r+0x328>)
 8002f22:	681e      	ldr	r6, [r3, #0]
 8002f24:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <_malloc_r+0x32c>)
 8002f26:	3610      	adds	r6, #16
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	1976      	adds	r6, r6, r5
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	d005      	beq.n	8002f3c <_malloc_r+0x2c4>
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <_malloc_r+0x330>)
 8002f32:	3b01      	subs	r3, #1
 8002f34:	199e      	adds	r6, r3, r6
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <_malloc_r+0x330>)
 8002f38:	425b      	negs	r3, r3
 8002f3a:	401e      	ands	r6, r3
 8002f3c:	0031      	movs	r1, r6
 8002f3e:	9801      	ldr	r0, [sp, #4]
 8002f40:	f000 f8b6 	bl	80030b0 <_sbrk_r>
 8002f44:	0004      	movs	r4, r0
 8002f46:	1c43      	adds	r3, r0, #1
 8002f48:	d05f      	beq.n	800300a <_malloc_r+0x392>
 8002f4a:	9b03      	ldr	r3, [sp, #12]
 8002f4c:	4283      	cmp	r3, r0
 8002f4e:	d902      	bls.n	8002f56 <_malloc_r+0x2de>
 8002f50:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <_malloc_r+0x31c>)
 8002f52:	429f      	cmp	r7, r3
 8002f54:	d159      	bne.n	800300a <_malloc_r+0x392>
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <_malloc_r+0x334>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	18b1      	adds	r1, r6, r2
 8002f5c:	6019      	str	r1, [r3, #0]
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <_malloc_r+0x330>)
 8002f60:	1e5a      	subs	r2, r3, #1
 8002f62:	9b03      	ldr	r3, [sp, #12]
 8002f64:	42a3      	cmp	r3, r4
 8002f66:	d127      	bne.n	8002fb8 <_malloc_r+0x340>
 8002f68:	4213      	tst	r3, r2
 8002f6a:	d125      	bne.n	8002fb8 <_malloc_r+0x340>
 8002f6c:	9a02      	ldr	r2, [sp, #8]
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <_malloc_r+0x31c>)
 8002f70:	1992      	adds	r2, r2, r6
 8002f72:	2601      	movs	r6, #1
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4316      	orrs	r6, r2
 8002f78:	605e      	str	r6, [r3, #4]
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <_malloc_r+0x334>)
 8002f7c:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <_malloc_r+0x338>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6811      	ldr	r1, [r2, #0]
 8002f82:	428b      	cmp	r3, r1
 8002f84:	d900      	bls.n	8002f88 <_malloc_r+0x310>
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <_malloc_r+0x33c>)
 8002f8a:	6811      	ldr	r1, [r2, #0]
 8002f8c:	428b      	cmp	r3, r1
 8002f8e:	d93c      	bls.n	800300a <_malloc_r+0x392>
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e03a      	b.n	800300a <_malloc_r+0x392>
 8002f94:	20000108 	.word	0x20000108
 8002f98:	00000554 	.word	0x00000554
 8002f9c:	000001ff 	.word	0x000001ff
 8002fa0:	200005e0 	.word	0x200005e0
 8002fa4:	20000510 	.word	0x20000510
 8002fa8:	00000080 	.word	0x00000080
 8002fac:	200005b0 	.word	0x200005b0
 8002fb0:	200005d8 	.word	0x200005d8
 8002fb4:	200005dc 	.word	0x200005dc
 8002fb8:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <_malloc_r+0x3f8>)
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	3001      	adds	r0, #1
 8002fbe:	d132      	bne.n	8003026 <_malloc_r+0x3ae>
 8002fc0:	601c      	str	r4, [r3, #0]
 8002fc2:	2007      	movs	r0, #7
 8002fc4:	4020      	ands	r0, r4
 8002fc6:	d002      	beq.n	8002fce <_malloc_r+0x356>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	1a18      	subs	r0, r3, r0
 8002fcc:	1824      	adds	r4, r4, r0
 8002fce:	4b29      	ldr	r3, [pc, #164]	; (8003074 <_malloc_r+0x3fc>)
 8002fd0:	19a6      	adds	r6, r4, r6
 8002fd2:	1818      	adds	r0, r3, r0
 8002fd4:	4016      	ands	r6, r2
 8002fd6:	1b86      	subs	r6, r0, r6
 8002fd8:	0031      	movs	r1, r6
 8002fda:	9801      	ldr	r0, [sp, #4]
 8002fdc:	f000 f868 	bl	80030b0 <_sbrk_r>
 8002fe0:	1c43      	adds	r3, r0, #1
 8002fe2:	d101      	bne.n	8002fe8 <_malloc_r+0x370>
 8002fe4:	0020      	movs	r0, r4
 8002fe6:	2600      	movs	r6, #0
 8002fe8:	4a23      	ldr	r2, [pc, #140]	; (8003078 <_malloc_r+0x400>)
 8002fea:	1b00      	subs	r0, r0, r4
 8002fec:	6813      	ldr	r3, [r2, #0]
 8002fee:	199b      	adds	r3, r3, r6
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	4a21      	ldr	r2, [pc, #132]	; (800307c <_malloc_r+0x404>)
 8002ff6:	1986      	adds	r6, r0, r6
 8002ff8:	431e      	orrs	r6, r3
 8002ffa:	6094      	str	r4, [r2, #8]
 8002ffc:	6066      	str	r6, [r4, #4]
 8002ffe:	4297      	cmp	r7, r2
 8003000:	d0bb      	beq.n	8002f7a <_malloc_r+0x302>
 8003002:	9a02      	ldr	r2, [sp, #8]
 8003004:	2a0f      	cmp	r2, #15
 8003006:	d814      	bhi.n	8003032 <_malloc_r+0x3ba>
 8003008:	6063      	str	r3, [r4, #4]
 800300a:	2203      	movs	r2, #3
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <_malloc_r+0x404>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4393      	bics	r3, r2
 8003014:	1b5a      	subs	r2, r3, r5
 8003016:	429d      	cmp	r5, r3
 8003018:	d801      	bhi.n	800301e <_malloc_r+0x3a6>
 800301a:	2a0f      	cmp	r2, #15
 800301c:	dc1d      	bgt.n	800305a <_malloc_r+0x3e2>
 800301e:	9801      	ldr	r0, [sp, #4]
 8003020:	f000 f83e 	bl	80030a0 <__malloc_unlock>
 8003024:	e635      	b.n	8002c92 <_malloc_r+0x1a>
 8003026:	9b03      	ldr	r3, [sp, #12]
 8003028:	1ae3      	subs	r3, r4, r3
 800302a:	185b      	adds	r3, r3, r1
 800302c:	4912      	ldr	r1, [pc, #72]	; (8003078 <_malloc_r+0x400>)
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	e7c7      	b.n	8002fc2 <_malloc_r+0x34a>
 8003032:	2207      	movs	r2, #7
 8003034:	9e02      	ldr	r6, [sp, #8]
 8003036:	3e0c      	subs	r6, #12
 8003038:	4396      	bics	r6, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4013      	ands	r3, r2
 800303e:	2205      	movs	r2, #5
 8003040:	4333      	orrs	r3, r6
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	19bb      	adds	r3, r7, r6
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	2e0f      	cmp	r6, #15
 800304c:	d995      	bls.n	8002f7a <_malloc_r+0x302>
 800304e:	0039      	movs	r1, r7
 8003050:	9801      	ldr	r0, [sp, #4]
 8003052:	3108      	adds	r1, #8
 8003054:	f000 f892 	bl	800317c <_free_r>
 8003058:	e78f      	b.n	8002f7a <_malloc_r+0x302>
 800305a:	2301      	movs	r3, #1
 800305c:	0018      	movs	r0, r3
 800305e:	4907      	ldr	r1, [pc, #28]	; (800307c <_malloc_r+0x404>)
 8003060:	4328      	orrs	r0, r5
 8003062:	688c      	ldr	r4, [r1, #8]
 8003064:	4313      	orrs	r3, r2
 8003066:	1965      	adds	r5, r4, r5
 8003068:	6060      	str	r0, [r4, #4]
 800306a:	608d      	str	r5, [r1, #8]
 800306c:	606b      	str	r3, [r5, #4]
 800306e:	e638      	b.n	8002ce2 <_malloc_r+0x6a>
 8003070:	20000510 	.word	0x20000510
 8003074:	00000080 	.word	0x00000080
 8003078:	200005b0 	.word	0x200005b0
 800307c:	20000108 	.word	0x20000108

08003080 <memset>:
 8003080:	0003      	movs	r3, r0
 8003082:	1882      	adds	r2, r0, r2
 8003084:	4293      	cmp	r3, r2
 8003086:	d100      	bne.n	800308a <memset+0xa>
 8003088:	4770      	bx	lr
 800308a:	7019      	strb	r1, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	e7f9      	b.n	8003084 <memset+0x4>

08003090 <__malloc_lock>:
 8003090:	b510      	push	{r4, lr}
 8003092:	4802      	ldr	r0, [pc, #8]	; (800309c <__malloc_lock+0xc>)
 8003094:	f000 f926 	bl	80032e4 <__retarget_lock_acquire_recursive>
 8003098:	bd10      	pop	{r4, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	20000b6c 	.word	0x20000b6c

080030a0 <__malloc_unlock>:
 80030a0:	b510      	push	{r4, lr}
 80030a2:	4802      	ldr	r0, [pc, #8]	; (80030ac <__malloc_unlock+0xc>)
 80030a4:	f000 f91f 	bl	80032e6 <__retarget_lock_release_recursive>
 80030a8:	bd10      	pop	{r4, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	20000b6c 	.word	0x20000b6c

080030b0 <_sbrk_r>:
 80030b0:	2300      	movs	r3, #0
 80030b2:	b570      	push	{r4, r5, r6, lr}
 80030b4:	4c06      	ldr	r4, [pc, #24]	; (80030d0 <_sbrk_r+0x20>)
 80030b6:	0005      	movs	r5, r0
 80030b8:	0008      	movs	r0, r1
 80030ba:	6023      	str	r3, [r4, #0]
 80030bc:	f7fe f854 	bl	8001168 <_sbrk>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	d103      	bne.n	80030cc <_sbrk_r+0x1c>
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d000      	beq.n	80030cc <_sbrk_r+0x1c>
 80030ca:	602b      	str	r3, [r5, #0]
 80030cc:	bd70      	pop	{r4, r5, r6, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	20000b74 	.word	0x20000b74

080030d4 <_malloc_trim_r>:
 80030d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030d6:	4f25      	ldr	r7, [pc, #148]	; (800316c <_malloc_trim_r+0x98>)
 80030d8:	000c      	movs	r4, r1
 80030da:	0005      	movs	r5, r0
 80030dc:	f7ff ffd8 	bl	8003090 <__malloc_lock>
 80030e0:	0038      	movs	r0, r7
 80030e2:	2203      	movs	r2, #3
 80030e4:	4e22      	ldr	r6, [pc, #136]	; (8003170 <_malloc_trim_r+0x9c>)
 80030e6:	3811      	subs	r0, #17
 80030e8:	68b3      	ldr	r3, [r6, #8]
 80030ea:	1b00      	subs	r0, r0, r4
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	0039      	movs	r1, r7
 80030f0:	4393      	bics	r3, r2
 80030f2:	18c0      	adds	r0, r0, r3
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	f7fd f817 	bl	8000128 <__udivsi3>
 80030fa:	1e44      	subs	r4, r0, #1
 80030fc:	437c      	muls	r4, r7
 80030fe:	42bc      	cmp	r4, r7
 8003100:	da04      	bge.n	800310c <_malloc_trim_r+0x38>
 8003102:	0028      	movs	r0, r5
 8003104:	f7ff ffcc 	bl	80030a0 <__malloc_unlock>
 8003108:	2000      	movs	r0, #0
 800310a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800310c:	2100      	movs	r1, #0
 800310e:	0028      	movs	r0, r5
 8003110:	f7ff ffce 	bl	80030b0 <_sbrk_r>
 8003114:	68b3      	ldr	r3, [r6, #8]
 8003116:	9a01      	ldr	r2, [sp, #4]
 8003118:	189b      	adds	r3, r3, r2
 800311a:	4298      	cmp	r0, r3
 800311c:	d1f1      	bne.n	8003102 <_malloc_trim_r+0x2e>
 800311e:	4261      	negs	r1, r4
 8003120:	0028      	movs	r0, r5
 8003122:	f7ff ffc5 	bl	80030b0 <_sbrk_r>
 8003126:	1c43      	adds	r3, r0, #1
 8003128:	d110      	bne.n	800314c <_malloc_trim_r+0x78>
 800312a:	2100      	movs	r1, #0
 800312c:	0028      	movs	r0, r5
 800312e:	f7ff ffbf 	bl	80030b0 <_sbrk_r>
 8003132:	68b2      	ldr	r2, [r6, #8]
 8003134:	1a81      	subs	r1, r0, r2
 8003136:	290f      	cmp	r1, #15
 8003138:	dde3      	ble.n	8003102 <_malloc_trim_r+0x2e>
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <_malloc_trim_r+0xa0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	1ac0      	subs	r0, r0, r3
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <_malloc_trim_r+0xa4>)
 8003142:	6018      	str	r0, [r3, #0]
 8003144:	2301      	movs	r3, #1
 8003146:	430b      	orrs	r3, r1
 8003148:	6053      	str	r3, [r2, #4]
 800314a:	e7da      	b.n	8003102 <_malloc_trim_r+0x2e>
 800314c:	68b2      	ldr	r2, [r6, #8]
 800314e:	2601      	movs	r6, #1
 8003150:	9b01      	ldr	r3, [sp, #4]
 8003152:	0028      	movs	r0, r5
 8003154:	1b1b      	subs	r3, r3, r4
 8003156:	4333      	orrs	r3, r6
 8003158:	6053      	str	r3, [r2, #4]
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <_malloc_trim_r+0xa4>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	1b14      	subs	r4, r2, r4
 8003160:	601c      	str	r4, [r3, #0]
 8003162:	f7ff ff9d 	bl	80030a0 <__malloc_unlock>
 8003166:	0030      	movs	r0, r6
 8003168:	e7cf      	b.n	800310a <_malloc_trim_r+0x36>
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	00000080 	.word	0x00000080
 8003170:	20000108 	.word	0x20000108
 8003174:	20000510 	.word	0x20000510
 8003178:	200005b0 	.word	0x200005b0

0800317c <_free_r>:
 800317c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800317e:	1e0d      	subs	r5, r1, #0
 8003180:	9001      	str	r0, [sp, #4]
 8003182:	d02d      	beq.n	80031e0 <_free_r+0x64>
 8003184:	f7ff ff84 	bl	8003090 <__malloc_lock>
 8003188:	2301      	movs	r3, #1
 800318a:	0029      	movs	r1, r5
 800318c:	469c      	mov	ip, r3
 800318e:	3908      	subs	r1, #8
 8003190:	684f      	ldr	r7, [r1, #4]
 8003192:	4662      	mov	r2, ip
 8003194:	003b      	movs	r3, r7
 8003196:	4666      	mov	r6, ip
 8003198:	4393      	bics	r3, r2
 800319a:	18c8      	adds	r0, r1, r3
 800319c:	6845      	ldr	r5, [r0, #4]
 800319e:	3202      	adds	r2, #2
 80031a0:	4395      	bics	r5, r2
 80031a2:	4a4a      	ldr	r2, [pc, #296]	; (80032cc <_free_r+0x150>)
 80031a4:	4037      	ands	r7, r6
 80031a6:	6896      	ldr	r6, [r2, #8]
 80031a8:	42b0      	cmp	r0, r6
 80031aa:	d11a      	bne.n	80031e2 <_free_r+0x66>
 80031ac:	195b      	adds	r3, r3, r5
 80031ae:	2f00      	cmp	r7, #0
 80031b0:	d106      	bne.n	80031c0 <_free_r+0x44>
 80031b2:	6808      	ldr	r0, [r1, #0]
 80031b4:	1a09      	subs	r1, r1, r0
 80031b6:	688d      	ldr	r5, [r1, #8]
 80031b8:	181b      	adds	r3, r3, r0
 80031ba:	68c8      	ldr	r0, [r1, #12]
 80031bc:	60e8      	str	r0, [r5, #12]
 80031be:	6085      	str	r5, [r0, #8]
 80031c0:	2001      	movs	r0, #1
 80031c2:	4318      	orrs	r0, r3
 80031c4:	6048      	str	r0, [r1, #4]
 80031c6:	6091      	str	r1, [r2, #8]
 80031c8:	4a41      	ldr	r2, [pc, #260]	; (80032d0 <_free_r+0x154>)
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d304      	bcc.n	80031da <_free_r+0x5e>
 80031d0:	4b40      	ldr	r3, [pc, #256]	; (80032d4 <_free_r+0x158>)
 80031d2:	9801      	ldr	r0, [sp, #4]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	f7ff ff7d 	bl	80030d4 <_malloc_trim_r>
 80031da:	9801      	ldr	r0, [sp, #4]
 80031dc:	f7ff ff60 	bl	80030a0 <__malloc_unlock>
 80031e0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80031e2:	2600      	movs	r6, #0
 80031e4:	6045      	str	r5, [r0, #4]
 80031e6:	42b7      	cmp	r7, r6
 80031e8:	d109      	bne.n	80031fe <_free_r+0x82>
 80031ea:	680f      	ldr	r7, [r1, #0]
 80031ec:	4c3a      	ldr	r4, [pc, #232]	; (80032d8 <_free_r+0x15c>)
 80031ee:	1bc9      	subs	r1, r1, r7
 80031f0:	19db      	adds	r3, r3, r7
 80031f2:	688f      	ldr	r7, [r1, #8]
 80031f4:	42a7      	cmp	r7, r4
 80031f6:	d02b      	beq.n	8003250 <_free_r+0xd4>
 80031f8:	68cc      	ldr	r4, [r1, #12]
 80031fa:	60fc      	str	r4, [r7, #12]
 80031fc:	60a7      	str	r7, [r4, #8]
 80031fe:	1947      	adds	r7, r0, r5
 8003200:	687c      	ldr	r4, [r7, #4]
 8003202:	2701      	movs	r7, #1
 8003204:	423c      	tst	r4, r7
 8003206:	d10b      	bne.n	8003220 <_free_r+0xa4>
 8003208:	195b      	adds	r3, r3, r5
 800320a:	6885      	ldr	r5, [r0, #8]
 800320c:	2e00      	cmp	r6, #0
 800320e:	d121      	bne.n	8003254 <_free_r+0xd8>
 8003210:	4c31      	ldr	r4, [pc, #196]	; (80032d8 <_free_r+0x15c>)
 8003212:	42a5      	cmp	r5, r4
 8003214:	d11e      	bne.n	8003254 <_free_r+0xd8>
 8003216:	003e      	movs	r6, r7
 8003218:	6151      	str	r1, [r2, #20]
 800321a:	6111      	str	r1, [r2, #16]
 800321c:	60cd      	str	r5, [r1, #12]
 800321e:	608d      	str	r5, [r1, #8]
 8003220:	2001      	movs	r0, #1
 8003222:	0005      	movs	r5, r0
 8003224:	431d      	orrs	r5, r3
 8003226:	604d      	str	r5, [r1, #4]
 8003228:	50cb      	str	r3, [r1, r3]
 800322a:	2e00      	cmp	r6, #0
 800322c:	d1d5      	bne.n	80031da <_free_r+0x5e>
 800322e:	4d2b      	ldr	r5, [pc, #172]	; (80032dc <_free_r+0x160>)
 8003230:	42ab      	cmp	r3, r5
 8003232:	d813      	bhi.n	800325c <_free_r+0xe0>
 8003234:	08db      	lsrs	r3, r3, #3
 8003236:	109d      	asrs	r5, r3, #2
 8003238:	40a8      	lsls	r0, r5
 800323a:	6854      	ldr	r4, [r2, #4]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4320      	orrs	r0, r4
 8003240:	6050      	str	r0, [r2, #4]
 8003242:	189a      	adds	r2, r3, r2
 8003244:	6893      	ldr	r3, [r2, #8]
 8003246:	60ca      	str	r2, [r1, #12]
 8003248:	608b      	str	r3, [r1, #8]
 800324a:	6091      	str	r1, [r2, #8]
 800324c:	60d9      	str	r1, [r3, #12]
 800324e:	e7c4      	b.n	80031da <_free_r+0x5e>
 8003250:	4666      	mov	r6, ip
 8003252:	e7d4      	b.n	80031fe <_free_r+0x82>
 8003254:	68c0      	ldr	r0, [r0, #12]
 8003256:	60e8      	str	r0, [r5, #12]
 8003258:	6085      	str	r5, [r0, #8]
 800325a:	e7e1      	b.n	8003220 <_free_r+0xa4>
 800325c:	0a5d      	lsrs	r5, r3, #9
 800325e:	2d04      	cmp	r5, #4
 8003260:	d812      	bhi.n	8003288 <_free_r+0x10c>
 8003262:	0998      	lsrs	r0, r3, #6
 8003264:	3038      	adds	r0, #56	; 0x38
 8003266:	00c6      	lsls	r6, r0, #3
 8003268:	18b6      	adds	r6, r6, r2
 800326a:	68b5      	ldr	r5, [r6, #8]
 800326c:	2703      	movs	r7, #3
 800326e:	42ae      	cmp	r6, r5
 8003270:	d125      	bne.n	80032be <_free_r+0x142>
 8003272:	2301      	movs	r3, #1
 8003274:	1080      	asrs	r0, r0, #2
 8003276:	4083      	lsls	r3, r0
 8003278:	6850      	ldr	r0, [r2, #4]
 800327a:	4303      	orrs	r3, r0
 800327c:	6053      	str	r3, [r2, #4]
 800327e:	60ce      	str	r6, [r1, #12]
 8003280:	608d      	str	r5, [r1, #8]
 8003282:	60b1      	str	r1, [r6, #8]
 8003284:	60e9      	str	r1, [r5, #12]
 8003286:	e7a8      	b.n	80031da <_free_r+0x5e>
 8003288:	2d14      	cmp	r5, #20
 800328a:	d802      	bhi.n	8003292 <_free_r+0x116>
 800328c:	0028      	movs	r0, r5
 800328e:	305b      	adds	r0, #91	; 0x5b
 8003290:	e7e9      	b.n	8003266 <_free_r+0xea>
 8003292:	2d54      	cmp	r5, #84	; 0x54
 8003294:	d802      	bhi.n	800329c <_free_r+0x120>
 8003296:	0b18      	lsrs	r0, r3, #12
 8003298:	306e      	adds	r0, #110	; 0x6e
 800329a:	e7e4      	b.n	8003266 <_free_r+0xea>
 800329c:	20aa      	movs	r0, #170	; 0xaa
 800329e:	0040      	lsls	r0, r0, #1
 80032a0:	4285      	cmp	r5, r0
 80032a2:	d802      	bhi.n	80032aa <_free_r+0x12e>
 80032a4:	0bd8      	lsrs	r0, r3, #15
 80032a6:	3077      	adds	r0, #119	; 0x77
 80032a8:	e7dd      	b.n	8003266 <_free_r+0xea>
 80032aa:	4e0d      	ldr	r6, [pc, #52]	; (80032e0 <_free_r+0x164>)
 80032ac:	207e      	movs	r0, #126	; 0x7e
 80032ae:	42b5      	cmp	r5, r6
 80032b0:	d8d9      	bhi.n	8003266 <_free_r+0xea>
 80032b2:	0c98      	lsrs	r0, r3, #18
 80032b4:	307c      	adds	r0, #124	; 0x7c
 80032b6:	e7d6      	b.n	8003266 <_free_r+0xea>
 80032b8:	68ad      	ldr	r5, [r5, #8]
 80032ba:	42ae      	cmp	r6, r5
 80032bc:	d003      	beq.n	80032c6 <_free_r+0x14a>
 80032be:	686a      	ldr	r2, [r5, #4]
 80032c0:	43ba      	bics	r2, r7
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d3f8      	bcc.n	80032b8 <_free_r+0x13c>
 80032c6:	68ee      	ldr	r6, [r5, #12]
 80032c8:	e7d9      	b.n	800327e <_free_r+0x102>
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	20000108 	.word	0x20000108
 80032d0:	20000514 	.word	0x20000514
 80032d4:	200005e0 	.word	0x200005e0
 80032d8:	20000110 	.word	0x20000110
 80032dc:	000001ff 	.word	0x000001ff
 80032e0:	00000554 	.word	0x00000554

080032e4 <__retarget_lock_acquire_recursive>:
 80032e4:	4770      	bx	lr

080032e6 <__retarget_lock_release_recursive>:
 80032e6:	4770      	bx	lr

080032e8 <_init>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr

080032f4 <_fini>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr
