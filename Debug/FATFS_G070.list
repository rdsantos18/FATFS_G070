
FATFS_G070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e68  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007cdc  08007cdc  00017cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000544  20000000  08007ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000046a0  20000544  08008224  00020544  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20004be4  08008224  00024be4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020544  2**0
                  CONTENTS, READONLY
  9 .debug_info   00039231  00000000  00000000  0002056c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000075fd  00000000  00000000  0005979d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000016a8  00000000  00000000  00060da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002430  00000000  00000000  00062448  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000da80  00000000  00000000  00064878  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00008405  00000000  00000000  000722f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0007a6fd  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004004  00000000  00000000  0007a77c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000128a2  00000000  00000000  0007e780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000544 	.word	0x20000544
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004e58 	.word	0x08004e58

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000548 	.word	0x20000548
 80000fc:	08004e58 	.word	0x08004e58

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043a:	2610      	movs	r6, #16
{
 800043c:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	2234      	movs	r2, #52	; 0x34
 8000440:	2100      	movs	r1, #0
 8000442:	a80b      	add	r0, sp, #44	; 0x2c
 8000444:	f004 fbd3 	bl	8004bee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	0032      	movs	r2, r6
 800044a:	2100      	movs	r1, #0
 800044c:	4668      	mov	r0, sp
 800044e:	f004 fbce 	bl	8004bee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000452:	221c      	movs	r2, #28
 8000454:	2100      	movs	r1, #0
 8000456:	a804      	add	r0, sp, #16
 8000458:	f004 fbc9 	bl	8004bee <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800045c:	2080      	movs	r0, #128	; 0x80
 800045e:	0080      	lsls	r0, r0, #2
 8000460:	f001 f896 	bl	8001590 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000464:	2118      	movs	r1, #24
 8000466:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <SystemClock_Config+0x90>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000468:	2502      	movs	r5, #2
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800046a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800046c:	2400      	movs	r4, #0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800046e:	438b      	bics	r3, r1
 8000470:	65d3      	str	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000472:	2305      	movs	r3, #5
 8000474:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000476:	23a0      	movs	r3, #160	; 0xa0
 8000478:	02db      	lsls	r3, r3, #11
 800047a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800047c:	2301      	movs	r3, #1
 800047e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000480:	195b      	adds	r3, r3, r5
 8000482:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	029b      	lsls	r3, r3, #10
 8000488:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800048a:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048c:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800048e:	059b      	lsls	r3, r3, #22
 8000490:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000494:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000496:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f001 f8a4 	bl	80015e4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049c:	2307      	movs	r3, #7
 800049e:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a0:	2380      	movs	r3, #128	; 0x80

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a2:	0029      	movs	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a4:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004aa:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ae:	f001 faff 	bl	8001ab0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <SystemClock_Config+0x94>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 80004b6:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	005b      	lsls	r3, r3, #1
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004bc:	9406      	str	r4, [sp, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80004be:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c0:	f001 fbb8 	bl	8001c34 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80004c4:	b018      	add	sp, #96	; 0x60
 80004c6:	bd70      	pop	{r4, r5, r6, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	00020002 	.word	0x00020002

080004d0 <main>:
{
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80004d4:	f000 feb6 	bl	8001244 <HAL_Init>
  SystemClock_Config();
 80004d8:	f7ff ffae 	bl	8000438 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	2214      	movs	r2, #20
 80004de:	2100      	movs	r1, #0
 80004e0:	a805      	add	r0, sp, #20
 80004e2:	f004 fb84 	bl	8004bee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2004      	movs	r0, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	2401      	movs	r4, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	4b47      	ldr	r3, [pc, #284]	; (8000608 <main+0x138>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ec:	2508      	movs	r5, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004f0:	4301      	orrs	r1, r0
 80004f2:	6359      	str	r1, [r3, #52]	; 0x34
 80004f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004f6:	4002      	ands	r2, r0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004fe:	301c      	adds	r0, #28
 8000500:	4301      	orrs	r1, r0
 8000502:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000504:	2102      	movs	r1, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000508:	4002      	ands	r2, r0
 800050a:	9201      	str	r2, [sp, #4]
 800050c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000510:	483e      	ldr	r0, [pc, #248]	; (800060c <main+0x13c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4322      	orrs	r2, r4
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
 8000516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000518:	4022      	ands	r2, r4
 800051a:	9202      	str	r2, [sp, #8]
 800051c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800051e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000520:	432a      	orrs	r2, r5
 8000522:	635a      	str	r2, [r3, #52]	; 0x34
 8000524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000526:	402a      	ands	r2, r5
 8000528:	9203      	str	r2, [sp, #12]
 800052a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800052e:	430a      	orrs	r2, r1
 8000530:	635a      	str	r2, [r3, #52]	; 0x34
 8000532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	400b      	ands	r3, r1
 8000538:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800053a:	313e      	adds	r1, #62	; 0x3e
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800053e:	f001 f821 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000542:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000548:	a905      	add	r1, sp, #20
 800054a:	4830      	ldr	r0, [pc, #192]	; (800060c <main+0x13c>)
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800054c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000552:	f000 fef9 	bl	8001348 <HAL_GPIO_Init>
  hrtc.Instance = RTC;
 8000556:	482e      	ldr	r0, [pc, #184]	; (8000610 <main+0x140>)
 8000558:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <main+0x144>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800055a:	6084      	str	r4, [r0, #8]
  hrtc.Instance = RTC;
 800055c:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 800055e:	237f      	movs	r3, #127	; 0x7f
 8000560:	60c3      	str	r3, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 8000562:	3380      	adds	r3, #128	; 0x80
 8000564:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000566:	2380      	movs	r3, #128	; 0x80
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	6203      	str	r3, [r0, #32]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800056c:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800056e:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000570:	61c4      	str	r4, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000572:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000574:	f001 fc70 	bl	8001e58 <HAL_RTC_Init>
  hspi1.Instance = SPI1;
 8000578:	4827      	ldr	r0, [pc, #156]	; (8000618 <main+0x148>)
 800057a:	4b28      	ldr	r3, [pc, #160]	; (800061c <main+0x14c>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800057c:	61c5      	str	r5, [r0, #28]
  hspi1.Instance = SPI1;
 800057e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000580:	2382      	movs	r3, #130	; 0x82
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000586:	23e0      	movs	r3, #224	; 0xe0
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8000592:	3bfa      	subs	r3, #250	; 0xfa
 8000594:	3bff      	subs	r3, #255	; 0xff
 8000596:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000598:	6345      	str	r5, [r0, #52]	; 0x34
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800059a:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800059c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800059e:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005a0:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005a2:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005a4:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005a6:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005a8:	f001 fd28 	bl	8001ffc <HAL_SPI_Init>
  huart2.Instance = USART2;
 80005ac:	4d1c      	ldr	r5, [pc, #112]	; (8000620 <main+0x150>)
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <main+0x154>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b0:	0028      	movs	r0, r5
  huart2.Instance = USART2;
 80005b2:	602b      	str	r3, [r5, #0]
  huart2.Init.BaudRate = 115200;
 80005b4:	23e1      	movs	r3, #225	; 0xe1
 80005b6:	025b      	lsls	r3, r3, #9
 80005b8:	606b      	str	r3, [r5, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	055b      	lsls	r3, r3, #21
 80005be:	60ab      	str	r3, [r5, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c0:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c2:	60ec      	str	r4, [r5, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c4:	616b      	str	r3, [r5, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c8:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ca:	61ec      	str	r4, [r5, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005cc:	622c      	str	r4, [r5, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005ce:	626c      	str	r4, [r5, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d0:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d2:	f002 f98f 	bl	80028f4 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005d6:	0021      	movs	r1, r4
 80005d8:	0028      	movs	r0, r5
 80005da:	f002 fa19 	bl	8002a10 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005de:	0021      	movs	r1, r4
 80005e0:	0028      	movs	r0, r5
 80005e2:	f002 fa37 	bl	8002a54 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80005e6:	0028      	movs	r0, r5
 80005e8:	f002 f9f6 	bl	80029d8 <HAL_UARTEx_DisableFifoMode>
  if (MX_FATFS_Init() != APP_OK) {
 80005ec:	f002 fa56 	bl	8002a9c <MX_FATFS_Init>
  lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 80005f0:	23c8      	movs	r3, #200	; 0xc8
 80005f2:	0022      	movs	r2, r4
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	490c      	ldr	r1, [pc, #48]	; (8000628 <main+0x158>)
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <main+0x15c>)
 80005fa:	f003 fb8d 	bl	8003d18 <lv_disp_buf_init>
  lv_init();
 80005fe:	f002 fb13 	bl	8002c28 <lv_init>
	  lv_task_handler();
 8000602:	f003 ff9f 	bl	8004544 <lv_task_handler>
 8000606:	e7fc      	b.n	8000602 <main+0x132>
 8000608:	40021000 	.word	0x40021000
 800060c:	50000c00 	.word	0x50000c00
 8000610:	200042d8 	.word	0x200042d8
 8000614:	40002800 	.word	0x40002800
 8000618:	20004304 	.word	0x20004304
 800061c:	40013000 	.word	0x40013000
 8000620:	20004368 	.word	0x20004368
 8000624:	40004400 	.word	0x40004400
 8000628:	20000560 	.word	0x20000560
 800062c:	200011e0 	.word	0x200011e0

08000630 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  None
  * @retval the value read
  */
uint8_t SD_ReadData(void)
{
 8000630:	b510      	push	{r4, lr}
 8000632:	2408      	movs	r4, #8
  uint8_t timeout = 0x08;
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000634:	20ff      	movs	r0, #255	; 0xff
 8000636:	f000 fd69 	bl	800110c <SD_IO_WriteByte>
    timeout--;

  }while ((readvalue == SD_DUMMY_BYTE) && timeout);
 800063a:	28ff      	cmp	r0, #255	; 0xff
 800063c:	d103      	bne.n	8000646 <SD_ReadData+0x16>
 800063e:	3c01      	subs	r4, #1
 8000640:	b2e4      	uxtb	r4, r4
 8000642:	2c00      	cmp	r4, #0
 8000644:	d1f6      	bne.n	8000634 <SD_ReadData+0x4>

  /* Right response got */
  return readvalue;
}
 8000646:	bd10      	pop	{r4, pc}

08000648 <SD_SendCmd>:
{
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064a:	b087      	sub	sp, #28
 800064c:	0004      	movs	r4, r0
 800064e:	a80c      	add	r0, sp, #48	; 0x30
 8000650:	7805      	ldrb	r5, [r0, #0]
  frame[0] = (Cmd | 0x40);         /* Construct byte 1 */
 8000652:	2040      	movs	r0, #64	; 0x40
 8000654:	4301      	orrs	r1, r0
 8000656:	a802      	add	r0, sp, #8
 8000658:	7001      	strb	r1, [r0, #0]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 800065a:	0e11      	lsrs	r1, r2, #24
 800065c:	7041      	strb	r1, [r0, #1]
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 800065e:	0c11      	lsrs	r1, r2, #16
 8000660:	7081      	strb	r1, [r0, #2]
  frame[4] = (uint8_t)(Arg);       /* Construct byte 5 */
 8000662:	7102      	strb	r2, [r0, #4]
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8000664:	0a11      	lsrs	r1, r2, #8
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8000666:	2201      	movs	r2, #1
 8000668:	4313      	orrs	r3, r2
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 800066a:	70c1      	strb	r1, [r0, #3]
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 800066c:	7143      	strb	r3, [r0, #5]
  SD_IO_CSState(0);
 800066e:	2000      	movs	r0, #0
 8000670:	f000 fd3a 	bl	80010e8 <SD_IO_CSState>
  SD_IO_WriteReadData(frame, frameout, SD_CMD_LENGTH); /* Send the Cmd bytes */
 8000674:	2206      	movs	r2, #6
 8000676:	a904      	add	r1, sp, #16
 8000678:	a802      	add	r0, sp, #8
 800067a:	f000 fd43 	bl	8001104 <SD_IO_WriteReadData>
  switch(Answer)
 800067e:	2d05      	cmp	r5, #5
 8000680:	d84a      	bhi.n	8000718 <SD_SendCmd+0xd0>
 8000682:	0028      	movs	r0, r5
 8000684:	f7ff fd4e 	bl	8000124 <__gnu_thumb1_case_uqi>
 8000688:	352c1403 	.word	0x352c1403
 800068c:	3548      	.short	0x3548
    retr.r1 = SD_ReadData();
 800068e:	f7ff ffcf 	bl	8000630 <SD_ReadData>
 8000692:	0007      	movs	r7, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8000694:	20ff      	movs	r0, #255	; 0xff
 8000696:	0005      	movs	r5, r0
 8000698:	0006      	movs	r6, r0
 800069a:	9001      	str	r0, [sp, #4]
  return retr;
 800069c:	466b      	mov	r3, sp
 800069e:	7120      	strb	r0, [r4, #4]
}
 80006a0:	0020      	movs	r0, r4
  return retr;
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	7027      	strb	r7, [r4, #0]
 80006a6:	7066      	strb	r6, [r4, #1]
 80006a8:	70a5      	strb	r5, [r4, #2]
 80006aa:	70e3      	strb	r3, [r4, #3]
}
 80006ac:	b007      	add	sp, #28
 80006ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    retr.r1 = SD_ReadData();
 80006b0:	f7ff ffbe 	bl	8000630 <SD_ReadData>
 80006b4:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80006b6:	20ff      	movs	r0, #255	; 0xff
 80006b8:	f000 fd28 	bl	800110c <SD_IO_WriteByte>
 80006bc:	0006      	movs	r6, r0
    SD_IO_CSState(1);
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 fd12 	bl	80010e8 <SD_IO_CSState>
    HAL_Delay(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fde3 	bl	8001290 <HAL_Delay>
    SD_IO_CSState(0);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 fd0c 	bl	80010e8 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 80006d0:	20ff      	movs	r0, #255	; 0xff
 80006d2:	f000 fd1b 	bl	800110c <SD_IO_WriteByte>
 80006d6:	28ff      	cmp	r0, #255	; 0xff
 80006d8:	d1fa      	bne.n	80006d0 <SD_SendCmd+0x88>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 80006da:	9001      	str	r0, [sp, #4]
 80006dc:	0005      	movs	r5, r0
    break;
 80006de:	e7dd      	b.n	800069c <SD_SendCmd+0x54>
    retr.r1 = SD_ReadData();
 80006e0:	f7ff ffa6 	bl	8000630 <SD_ReadData>
 80006e4:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80006e6:	20ff      	movs	r0, #255	; 0xff
 80006e8:	f000 fd10 	bl	800110c <SD_IO_WriteByte>
 80006ec:	0006      	movs	r6, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 80006ee:	20ff      	movs	r0, #255	; 0xff
 80006f0:	e7f3      	b.n	80006da <SD_SendCmd+0x92>
    retr.r1 = SD_ReadData();
 80006f2:	f7ff ff9d 	bl	8000630 <SD_ReadData>
 80006f6:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80006f8:	20ff      	movs	r0, #255	; 0xff
 80006fa:	f000 fd07 	bl	800110c <SD_IO_WriteByte>
 80006fe:	0006      	movs	r6, r0
    retr.r3 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000700:	20ff      	movs	r0, #255	; 0xff
 8000702:	f000 fd03 	bl	800110c <SD_IO_WriteByte>
 8000706:	0005      	movs	r5, r0
    retr.r4 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000708:	20ff      	movs	r0, #255	; 0xff
 800070a:	f000 fcff 	bl	800110c <SD_IO_WriteByte>
 800070e:	9001      	str	r0, [sp, #4]
    retr.r5 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000710:	20ff      	movs	r0, #255	; 0xff
 8000712:	f000 fcfb 	bl	800110c <SD_IO_WriteByte>
    break;
 8000716:	e7c1      	b.n	800069c <SD_SendCmd+0x54>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8000718:	20ff      	movs	r0, #255	; 0xff
 800071a:	9001      	str	r0, [sp, #4]
 800071c:	0005      	movs	r5, r0
 800071e:	0006      	movs	r6, r0
 8000720:	0007      	movs	r7, r0
 8000722:	e7bb      	b.n	800069c <SD_SendCmd+0x54>

08000724 <SD_WaitData.constprop.0>:
/**
  * @brief  Waits a data from the SD card
  * @param  data : Expected data from the SD card
  * @retval BSP_SD_OK or BSP_SD_TIMEOUT
  */
uint8_t SD_WaitData(uint8_t data)
 8000724:	b510      	push	{r4, lr}
{
  uint16_t timeout = 0xFFFF;
 8000726:	4c08      	ldr	r4, [pc, #32]	; (8000748 <SD_WaitData.constprop.0+0x24>)
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */

  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000728:	20ff      	movs	r0, #255	; 0xff
 800072a:	f000 fcef 	bl	800110c <SD_IO_WriteByte>
    timeout--;
 800072e:	3c01      	subs	r4, #1
 8000730:	b2a4      	uxth	r4, r4
  }while ((readvalue != data) && timeout);
 8000732:	28fe      	cmp	r0, #254	; 0xfe
 8000734:	d003      	beq.n	800073e <SD_WaitData.constprop.0+0x1a>
 8000736:	2c00      	cmp	r4, #0
 8000738:	d1f6      	bne.n	8000728 <SD_WaitData.constprop.0+0x4>

  if (timeout == 0)
  {
    /* After time out */
    return BSP_SD_TIMEOUT;
 800073a:	2002      	movs	r0, #2
  }

  /* Right response got */
  return BSP_SD_OK;
}
 800073c:	bd10      	pop	{r4, pc}
  return BSP_SD_OK;
 800073e:	4260      	negs	r0, r4
 8000740:	4160      	adcs	r0, r4
 8000742:	0040      	lsls	r0, r0, #1
 8000744:	e7fa      	b.n	800073c <SD_WaitData.constprop.0+0x18>
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	0000ffff 	.word	0x0000ffff

0800074c <BSP_SD_Init>:
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074e:	b089      	sub	sp, #36	; 0x24
  SD_IO_Init();
 8000750:	f000 fcea 	bl	8001128 <SD_IO_Init>
  SdStatus = SD_PRESENT;
 8000754:	2201      	movs	r2, #1
  __IO uint8_t counter = 0;
 8000756:	250f      	movs	r5, #15
  SdStatus = SD_PRESENT;
 8000758:	4b5b      	ldr	r3, [pc, #364]	; (80008c8 <BSP_SD_Init+0x17c>)
 800075a:	701a      	strb	r2, [r3, #0]
  __IO uint8_t counter = 0;
 800075c:	ab02      	add	r3, sp, #8
 800075e:	18ed      	adds	r5, r5, r3
 8000760:	2300      	movs	r3, #0
 8000762:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8000764:	2100      	movs	r1, #0
    counter++;
 8000766:	782b      	ldrb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8000768:	ac06      	add	r4, sp, #24
    counter++;
 800076a:	3301      	adds	r3, #1
 800076c:	b2db      	uxtb	r3, r3
 800076e:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8000770:	000a      	movs	r2, r1
 8000772:	2395      	movs	r3, #149	; 0x95
 8000774:	9100      	str	r1, [sp, #0]
 8000776:	0020      	movs	r0, r4
 8000778:	f7ff ff66 	bl	8000648 <SD_SendCmd>
    SD_IO_CSState(1);
 800077c:	2001      	movs	r0, #1
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 800077e:	7827      	ldrb	r7, [r4, #0]
    SD_IO_CSState(1);
 8000780:	f000 fcb2 	bl	80010e8 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000784:	20ff      	movs	r0, #255	; 0xff
 8000786:	f000 fcc1 	bl	800110c <SD_IO_WriteByte>
    if(counter >= SD_MAX_TRY)
 800078a:	782b      	ldrb	r3, [r5, #0]
 800078c:	2b63      	cmp	r3, #99	; 0x63
 800078e:	d903      	bls.n	8000798 <BSP_SD_Init+0x4c>
      return BSP_SD_ERROR;
 8000790:	2501      	movs	r5, #1
}
 8000792:	0028      	movs	r0, r5
 8000794:	b009      	add	sp, #36	; 0x24
 8000796:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while(response.r1 != SD_R1_IN_IDLE_STATE);
 8000798:	2f01      	cmp	r7, #1
 800079a:	d1e3      	bne.n	8000764 <BSP_SD_Init+0x18>
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87, SD_ANSWER_R7_EXPECTED);
 800079c:	2305      	movs	r3, #5
 800079e:	22d5      	movs	r2, #213	; 0xd5
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	3382      	adds	r3, #130	; 0x82
 80007a6:	2108      	movs	r1, #8
 80007a8:	0020      	movs	r0, r4
 80007aa:	f7ff ff4d 	bl	8000648 <SD_SendCmd>
 80007ae:	7825      	ldrb	r5, [r4, #0]
  SD_IO_CSState(1);
 80007b0:	0038      	movs	r0, r7
 80007b2:	f000 fc99 	bl	80010e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80007b6:	20ff      	movs	r0, #255	; 0xff
 80007b8:	f000 fca8 	bl	800110c <SD_IO_WriteByte>
  if((response.r1  & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 80007bc:	076b      	lsls	r3, r5, #29
 80007be:	d523      	bpl.n	8000808 <BSP_SD_Init+0xbc>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80007c0:	26ff      	movs	r6, #255	; 0xff
 80007c2:	2500      	movs	r5, #0
 80007c4:	0033      	movs	r3, r6
 80007c6:	002a      	movs	r2, r5
 80007c8:	2137      	movs	r1, #55	; 0x37
 80007ca:	0020      	movs	r0, r4
 80007cc:	9500      	str	r5, [sp, #0]
 80007ce:	f7ff ff3b 	bl	8000648 <SD_SendCmd>
      SD_IO_CSState(1);
 80007d2:	0038      	movs	r0, r7
 80007d4:	f000 fc88 	bl	80010e8 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80007d8:	0030      	movs	r0, r6
 80007da:	f000 fc97 	bl	800110c <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80007de:	002a      	movs	r2, r5
 80007e0:	2129      	movs	r1, #41	; 0x29
 80007e2:	0033      	movs	r3, r6
 80007e4:	0020      	movs	r0, r4
 80007e6:	9500      	str	r5, [sp, #0]
 80007e8:	f7ff ff2e 	bl	8000648 <SD_SendCmd>
 80007ec:	7823      	ldrb	r3, [r4, #0]
      SD_IO_CSState(1);
 80007ee:	0038      	movs	r0, r7
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80007f0:	9303      	str	r3, [sp, #12]
      SD_IO_CSState(1);
 80007f2:	f000 fc79 	bl	80010e8 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80007f6:	0030      	movs	r0, r6
 80007f8:	f000 fc88 	bl	800110c <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 80007fc:	9b03      	ldr	r3, [sp, #12]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d0df      	beq.n	80007c2 <BSP_SD_Init+0x76>
    flag_SDHC = 0;
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <BSP_SD_Init+0x180>)
 8000804:	801d      	strh	r5, [r3, #0]
 8000806:	e7c4      	b.n	8000792 <BSP_SD_Init+0x46>
  else if(response.r1 == SD_R1_IN_IDLE_STATE)
 8000808:	2d01      	cmp	r5, #1
 800080a:	d1c1      	bne.n	8000790 <BSP_SD_Init+0x44>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 800080c:	27ff      	movs	r7, #255	; 0xff
 800080e:	2600      	movs	r6, #0
 8000810:	003b      	movs	r3, r7
 8000812:	0032      	movs	r2, r6
 8000814:	2137      	movs	r1, #55	; 0x37
 8000816:	9600      	str	r6, [sp, #0]
 8000818:	0020      	movs	r0, r4
 800081a:	f7ff ff15 	bl	8000648 <SD_SendCmd>
      SD_IO_CSState(1);
 800081e:	0028      	movs	r0, r5
 8000820:	f000 fc62 	bl	80010e8 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000824:	0038      	movs	r0, r7
 8000826:	f000 fc71 	bl	800110c <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	9600      	str	r6, [sp, #0]
 800082e:	003b      	movs	r3, r7
 8000830:	05d2      	lsls	r2, r2, #23
 8000832:	2129      	movs	r1, #41	; 0x29
 8000834:	0020      	movs	r0, r4
 8000836:	f7ff ff07 	bl	8000648 <SD_SendCmd>
 800083a:	7826      	ldrb	r6, [r4, #0]
      SD_IO_CSState(1);
 800083c:	0028      	movs	r0, r5
 800083e:	f000 fc53 	bl	80010e8 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000842:	0038      	movs	r0, r7
 8000844:	f000 fc62 	bl	800110c <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8000848:	2e01      	cmp	r6, #1
 800084a:	d0e0      	beq.n	800080e <BSP_SD_Init+0xc2>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 800084c:	25ff      	movs	r5, #255	; 0xff
    if((response.r1 & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 800084e:	0773      	lsls	r3, r6, #29
 8000850:	d417      	bmi.n	8000882 <BSP_SD_Init+0x136>
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00000000, 0xFF, SD_ANSWER_R3_EXPECTED);
 8000852:	2303      	movs	r3, #3
 8000854:	2200      	movs	r2, #0
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	213a      	movs	r1, #58	; 0x3a
 800085a:	33fc      	adds	r3, #252	; 0xfc
 800085c:	0020      	movs	r0, r4
 800085e:	f7ff fef3 	bl	8000648 <SD_SendCmd>
 8000862:	7825      	ldrb	r5, [r4, #0]
    SD_IO_CSState(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f000 fc3f 	bl	80010e8 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800086a:	20ff      	movs	r0, #255	; 0xff
 800086c:	f000 fc4e 	bl	800110c <SD_IO_WriteByte>
    if(response.r1 != SD_R1_NO_ERROR)
 8000870:	2d00      	cmp	r5, #0
 8000872:	d000      	beq.n	8000876 <BSP_SD_Init+0x12a>
 8000874:	e78c      	b.n	8000790 <BSP_SD_Init+0x44>
    flag_SDHC = (response.r2 & 0x40) >> 6;
 8000876:	7863      	ldrb	r3, [r4, #1]
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <BSP_SD_Init+0x180>)
 800087a:	065b      	lsls	r3, r3, #25
 800087c:	0fdb      	lsrs	r3, r3, #31
 800087e:	8013      	strh	r3, [r2, #0]
 8000880:	e787      	b.n	8000792 <BSP_SD_Init+0x46>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000882:	2600      	movs	r6, #0
 8000884:	002b      	movs	r3, r5
 8000886:	0032      	movs	r2, r6
 8000888:	2137      	movs	r1, #55	; 0x37
 800088a:	0020      	movs	r0, r4
 800088c:	9600      	str	r6, [sp, #0]
 800088e:	f7ff fedb 	bl	8000648 <SD_SendCmd>
 8000892:	7827      	ldrb	r7, [r4, #0]
        SD_IO_CSState(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f000 fc27 	bl	80010e8 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 800089a:	0028      	movs	r0, r5
 800089c:	f000 fc36 	bl	800110c <SD_IO_WriteByte>
        if(response.r1 != SD_R1_IN_IDLE_STATE)
 80008a0:	2f01      	cmp	r7, #1
 80008a2:	d000      	beq.n	80008a6 <BSP_SD_Init+0x15a>
 80008a4:	e774      	b.n	8000790 <BSP_SD_Init+0x44>
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80008a6:	0032      	movs	r2, r6
 80008a8:	9600      	str	r6, [sp, #0]
 80008aa:	002b      	movs	r3, r5
 80008ac:	2129      	movs	r1, #41	; 0x29
 80008ae:	0020      	movs	r0, r4
 80008b0:	f7ff feca 	bl	8000648 <SD_SendCmd>
 80008b4:	7826      	ldrb	r6, [r4, #0]
        SD_IO_CSState(1);
 80008b6:	0038      	movs	r0, r7
 80008b8:	f000 fc16 	bl	80010e8 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 80008bc:	0028      	movs	r0, r5
 80008be:	f000 fc25 	bl	800110c <SD_IO_WriteByte>
      while(response.r1 == SD_R1_IN_IDLE_STATE);
 80008c2:	2e01      	cmp	r6, #1
 80008c4:	d0dd      	beq.n	8000882 <BSP_SD_Init+0x136>
 80008c6:	e7c4      	b.n	8000852 <BSP_SD_Init+0x106>
 80008c8:	200011fc 	.word	0x200011fc
 80008cc:	200011fe 	.word	0x200011fe

080008d0 <BSP_SD_GetCardInfo>:
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80008d0:	2200      	movs	r2, #0
{
 80008d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d4:	b08b      	sub	sp, #44	; 0x2c
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80008d6:	ad04      	add	r5, sp, #16
 80008d8:	23ff      	movs	r3, #255	; 0xff
{
 80008da:	0004      	movs	r4, r0
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80008dc:	9200      	str	r2, [sp, #0]
 80008de:	2109      	movs	r1, #9
 80008e0:	0028      	movs	r0, r5
 80008e2:	f7ff feb1 	bl	8000648 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 80008e6:	782b      	ldrb	r3, [r5, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d030      	beq.n	800094e <BSP_SD_GetCardInfo+0x7e>
  uint8_t retr = BSP_SD_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	9303      	str	r3, [sp, #12]
  SD_IO_CSState(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f000 fbf9 	bl	80010e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80008f6:	20ff      	movs	r0, #255	; 0xff
 80008f8:	f000 fc08 	bl	800110c <SD_IO_WriteByte>
  response = SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80008fc:	2200      	movs	r2, #0
 80008fe:	ad04      	add	r5, sp, #16
 8000900:	23ff      	movs	r3, #255	; 0xff
 8000902:	9200      	str	r2, [sp, #0]
 8000904:	210a      	movs	r1, #10
 8000906:	0028      	movs	r0, r5
 8000908:	f7ff fe9e 	bl	8000648 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 800090c:	782b      	ldrb	r3, [r5, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d100      	bne.n	8000914 <BSP_SD_GetCardInfo+0x44>
 8000912:	e12b      	b.n	8000b6c <BSP_SD_GetCardInfo+0x29c>
  uint8_t retr = BSP_SD_ERROR;
 8000914:	2601      	movs	r6, #1
  SD_IO_CSState(1);
 8000916:	2001      	movs	r0, #1
 8000918:	f000 fbe6 	bl	80010e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800091c:	20ff      	movs	r0, #255	; 0xff
 800091e:	f000 fbf5 	bl	800110c <SD_IO_WriteByte>
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8000922:	9b03      	ldr	r3, [sp, #12]
 8000924:	431e      	orrs	r6, r3
  if(flag_SDHC == 1 )
 8000926:	4bca      	ldr	r3, [pc, #808]	; (8000c50 <BSP_SD_GetCardInfo+0x380>)
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8000928:	b2f0      	uxtb	r0, r6
  if(flag_SDHC == 1 )
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d000      	beq.n	8000932 <BSP_SD_GetCardInfo+0x62>
 8000930:	e17b      	b.n	8000c2a <BSP_SD_GetCardInfo+0x35a>
    pCardInfo->LogBlockSize = 512;
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	63e3      	str	r3, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 512;
 8000938:	6363      	str	r3, [r4, #52]	; 0x34
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v2.DeviceSize + 1) * 1024 * pCardInfo->LogBlockSize;
 800093a:	68a3      	ldr	r3, [r4, #8]
 800093c:	011b      	lsls	r3, r3, #4
 800093e:	0a9b      	lsrs	r3, r3, #10
 8000940:	3301      	adds	r3, #1
 8000942:	04db      	lsls	r3, r3, #19
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8000944:	6323      	str	r3, [r4, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 8000946:	0a5b      	lsrs	r3, r3, #9
 8000948:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800094a:	b00b      	add	sp, #44	; 0x2c
 800094c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 800094e:	f7ff fee9 	bl	8000724 <SD_WaitData.constprop.0>
 8000952:	9003      	str	r0, [sp, #12]
 8000954:	2800      	cmp	r0, #0
 8000956:	d1c9      	bne.n	80008ec <BSP_SD_GetCardInfo+0x1c>
 8000958:	0006      	movs	r6, r0
        CSD_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800095a:	20ff      	movs	r0, #255	; 0xff
 800095c:	f000 fbd6 	bl	800110c <SD_IO_WriteByte>
 8000960:	ad06      	add	r5, sp, #24
 8000962:	5570      	strb	r0, [r6, r5]
 8000964:	3601      	adds	r6, #1
      for (counter = 0; counter < 16; counter++)
 8000966:	2e10      	cmp	r6, #16
 8000968:	d1f7      	bne.n	800095a <BSP_SD_GetCardInfo+0x8a>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800096a:	20ff      	movs	r0, #255	; 0xff
 800096c:	f000 fbce 	bl	800110c <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000970:	20ff      	movs	r0, #255	; 0xff
 8000972:	f000 fbcb 	bl	800110c <SD_IO_WriteByte>
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8000976:	2001      	movs	r0, #1
      Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 8000978:	782b      	ldrb	r3, [r5, #0]
      Csd->Reserved1 =  CSD_Tab[0] & 0x3F;
 800097a:	009a      	lsls	r2, r3, #2
 800097c:	099b      	lsrs	r3, r3, #6
 800097e:	4313      	orrs	r3, r2
 8000980:	7023      	strb	r3, [r4, #0]
      Csd->TAAC = CSD_Tab[1];
 8000982:	786b      	ldrb	r3, [r5, #1]
 8000984:	7063      	strb	r3, [r4, #1]
      Csd->NSAC = CSD_Tab[2];
 8000986:	78ab      	ldrb	r3, [r5, #2]
 8000988:	70a3      	strb	r3, [r4, #2]
      Csd->MaxBusClkFrec = CSD_Tab[3];
 800098a:	78eb      	ldrb	r3, [r5, #3]
 800098c:	70e3      	strb	r3, [r4, #3]
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 800098e:	796a      	ldrb	r2, [r5, #5]
 8000990:	792b      	ldrb	r3, [r5, #4]
 8000992:	0911      	lsrs	r1, r2, #4
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	4319      	orrs	r1, r3
 8000998:	88a3      	ldrh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 800099a:	0112      	lsls	r2, r2, #4
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 800099c:	0b1b      	lsrs	r3, r3, #12
 800099e:	031b      	lsls	r3, r3, #12
 80009a0:	430b      	orrs	r3, r1
 80009a2:	80a3      	strh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 80009a4:	051b      	lsls	r3, r3, #20
 80009a6:	0f1b      	lsrs	r3, r3, #28
 80009a8:	4313      	orrs	r3, r2
 80009aa:	7163      	strb	r3, [r4, #5]
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 80009ac:	79ab      	ldrb	r3, [r5, #6]
 80009ae:	79a1      	ldrb	r1, [r4, #6]
 80009b0:	09da      	lsrs	r2, r3, #7
 80009b2:	4381      	bics	r1, r0
      Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 80009b4:	119f      	asrs	r7, r3, #6
 80009b6:	4007      	ands	r7, r0
 80009b8:	430a      	orrs	r2, r1
 80009ba:	2102      	movs	r1, #2
 80009bc:	4087      	lsls	r7, r0
 80009be:	438a      	bics	r2, r1
      Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 80009c0:	433a      	orrs	r2, r7
 80009c2:	2704      	movs	r7, #4
 80009c4:	1159      	asrs	r1, r3, #5
 80009c6:	4001      	ands	r1, r0
 80009c8:	0089      	lsls	r1, r1, #2
 80009ca:	43ba      	bics	r2, r7
      Csd->DSRImpl         = (CSD_Tab[6] & 0x10) >> 4;
 80009cc:	430a      	orrs	r2, r1
 80009ce:	2108      	movs	r1, #8
 80009d0:	111f      	asrs	r7, r3, #4
 80009d2:	4038      	ands	r0, r7
 80009d4:	438a      	bics	r2, r1
 80009d6:	00c0      	lsls	r0, r0, #3
 80009d8:	4302      	orrs	r2, r0
 80009da:	71a2      	strb	r2, [r4, #6]
      if(flag_SDHC == 0)
 80009dc:	4a9c      	ldr	r2, [pc, #624]	; (8000c50 <BSP_SD_GetCardInfo+0x380>)
 80009de:	8811      	ldrh	r1, [r2, #0]
 80009e0:	79ea      	ldrb	r2, [r5, #7]
 80009e2:	2900      	cmp	r1, #0
 80009e4:	d000      	beq.n	80009e8 <BSP_SD_GetCardInfo+0x118>
 80009e6:	e0a7      	b.n	8000b38 <BSP_SD_GetCardInfo+0x268>
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 80009e8:	1098      	asrs	r0, r3, #2
 80009ea:	3103      	adds	r1, #3
 80009ec:	4008      	ands	r0, r1
 80009ee:	7a21      	ldrb	r1, [r4, #8]
 80009f0:	3e0d      	subs	r6, #13
 80009f2:	43b1      	bics	r1, r6
 80009f4:	4301      	orrs	r1, r0
 80009f6:	7221      	strb	r1, [r4, #8]
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 80009f8:	7a29      	ldrb	r1, [r5, #8]
                                    |  (CSD_Tab[7] << 2)
 80009fa:	0090      	lsls	r0, r2, #2
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 80009fc:	098a      	lsrs	r2, r1, #6
 80009fe:	4302      	orrs	r2, r0
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8000a00:	029b      	lsls	r3, r3, #10
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8000a02:	4313      	orrs	r3, r2
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8000a04:	4893      	ldr	r0, [pc, #588]	; (8000c54 <BSP_SD_GetCardInfo+0x384>)
 8000a06:	8922      	ldrh	r2, [r4, #8]
 8000a08:	051b      	lsls	r3, r3, #20
 8000a0a:	4002      	ands	r2, r0
 8000a0c:	0c9b      	lsrs	r3, r3, #18
 8000a0e:	4313      	orrs	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8000a10:	2207      	movs	r2, #7
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8000a12:	8123      	strh	r3, [r4, #8]
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8000a14:	7aa3      	ldrb	r3, [r4, #10]
 8000a16:	10c8      	asrs	r0, r1, #3
 8000a18:	4010      	ands	r0, r2
 8000a1a:	4393      	bics	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 8000a1c:	4303      	orrs	r3, r0
 8000a1e:	4011      	ands	r1, r2
 8000a20:	2038      	movs	r0, #56	; 0x38
 8000a22:	40b1      	lsls	r1, r6
 8000a24:	4383      	bics	r3, r0
 8000a26:	430b      	orrs	r3, r1
 8000a28:	72a3      	strb	r3, [r4, #10]
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 8000a2a:	7a6b      	ldrb	r3, [r5, #9]
 8000a2c:	7ae1      	ldrb	r1, [r4, #11]
 8000a2e:	095f      	lsrs	r7, r3, #5
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8000a30:	109e      	asrs	r6, r3, #2
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 8000a32:	4391      	bics	r1, r2
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8000a34:	4016      	ands	r6, r2
 8000a36:	4339      	orrs	r1, r7
 8000a38:	00f6      	lsls	r6, r6, #3
 8000a3a:	4381      	bics	r1, r0
 8000a3c:	4331      	orrs	r1, r6
 8000a3e:	72e1      	strb	r1, [r4, #11]
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8000a40:	2106      	movs	r1, #6
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	400b      	ands	r3, r1
                                       |((CSD_Tab[10] & 0x80) >> 7);
 8000a46:	7aa9      	ldrb	r1, [r5, #10]
 8000a48:	40d1      	lsrs	r1, r2
 8000a4a:	430b      	orrs	r3, r1
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8000a4c:	7b21      	ldrb	r1, [r4, #12]
 8000a4e:	4391      	bics	r1, r2
 8000a50:	430b      	orrs	r3, r1
 8000a52:	7323      	strb	r3, [r4, #12]
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8000a54:	2001      	movs	r0, #1
 8000a56:	ae06      	add	r6, sp, #24
 8000a58:	7ab3      	ldrb	r3, [r6, #10]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a5a:	277e      	movs	r7, #126	; 0x7e
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8000a5c:	119d      	asrs	r5, r3, #6
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a5e:	4083      	lsls	r3, r0
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8000a60:	7c22      	ldrb	r2, [r4, #16]
 8000a62:	4005      	ands	r5, r0
 8000a64:	4382      	bics	r2, r0
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a66:	432a      	orrs	r2, r5
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000a68:	257f      	movs	r5, #127	; 0x7f
                              |((CSD_Tab[11] & 0x80) >> 7);
 8000a6a:	7af1      	ldrb	r1, [r6, #11]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a6c:	403b      	ands	r3, r7
                              |((CSD_Tab[11] & 0x80) >> 7);
 8000a6e:	09cf      	lsrs	r7, r1, #7
 8000a70:	433b      	orrs	r3, r7
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a72:	4083      	lsls	r3, r0
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000a74:	4029      	ands	r1, r5
 8000a76:	000f      	movs	r7, r1
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000a78:	4002      	ands	r2, r0
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	7423      	strb	r3, [r4, #16]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000a7e:	7c63      	ldrb	r3, [r4, #17]
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8000a80:	7b31      	ldrb	r1, [r6, #12]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000a82:	43ab      	bics	r3, r5
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8000a84:	09ca      	lsrs	r2, r1, #7
 8000a86:	433b      	orrs	r3, r7
 8000a88:	01d2      	lsls	r2, r2, #7
 8000a8a:	402b      	ands	r3, r5
 8000a8c:	4313      	orrs	r3, r2
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8000a8e:	2203      	movs	r2, #3
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8000a90:	7463      	strb	r3, [r4, #17]
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8000a92:	114b      	asrs	r3, r1, #5
 8000a94:	4013      	ands	r3, r2
 8000a96:	469c      	mov	ip, r3
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8000a98:	4667      	mov	r7, ip
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8000a9a:	7ca3      	ldrb	r3, [r4, #18]
 8000a9c:	4393      	bics	r3, r2
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8000a9e:	433b      	orrs	r3, r7
 8000aa0:	271c      	movs	r7, #28
 8000aa2:	3219      	adds	r2, #25
 8000aa4:	43bb      	bics	r3, r7
 8000aa6:	400a      	ands	r2, r1
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	74a2      	strb	r2, [r4, #18]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000aac:	220c      	movs	r2, #12
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8000aae:	7b73      	ldrb	r3, [r6, #13]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000ab0:	0089      	lsls	r1, r1, #2
 8000ab2:	4011      	ands	r1, r2
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8000ab4:	099a      	lsrs	r2, r3, #6
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000ab6:	4311      	orrs	r1, r2
 8000ab8:	468c      	mov	ip, r1
 8000aba:	220f      	movs	r2, #15
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 8000abc:	4667      	mov	r7, ip
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000abe:	7ce1      	ldrb	r1, [r4, #19]
 8000ac0:	4391      	bics	r1, r2
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 8000ac2:	4339      	orrs	r1, r7
 8000ac4:	2710      	movs	r7, #16
 8000ac6:	115a      	asrs	r2, r3, #5
 8000ac8:	4002      	ands	r2, r0
 8000aca:	43b9      	bics	r1, r7
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	74e2      	strb	r2, [r4, #19]
      Csd->Reserved3         = (CSD_Tab[13] & 0x1F);
 8000ad2:	221f      	movs	r2, #31
 8000ad4:	7d21      	ldrb	r1, [r4, #20]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	4391      	bics	r1, r2
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 8000ada:	430b      	orrs	r3, r1
 8000adc:	2120      	movs	r1, #32
 8000ade:	7bb2      	ldrb	r2, [r6, #14]
 8000ae0:	438b      	bics	r3, r1
 8000ae2:	09d7      	lsrs	r7, r2, #7
 8000ae4:	017f      	lsls	r7, r7, #5
      Csd->CopyFlag          = (CSD_Tab[14] & 0x40) >> 6;
 8000ae6:	433b      	orrs	r3, r7
 8000ae8:	2740      	movs	r7, #64	; 0x40
 8000aea:	1191      	asrs	r1, r2, #6
 8000aec:	4001      	ands	r1, r0
 8000aee:	0189      	lsls	r1, r1, #6
 8000af0:	43bb      	bics	r3, r7
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8000af2:	430b      	orrs	r3, r1
 8000af4:	1157      	asrs	r7, r2, #5
 8000af6:	01ff      	lsls	r7, r7, #7
 8000af8:	402b      	ands	r3, r5
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8000afa:	7d61      	ldrb	r1, [r4, #21]
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8000afc:	433b      	orrs	r3, r7
 8000afe:	7523      	strb	r3, [r4, #20]
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8000b00:	4381      	bics	r1, r0
 8000b02:	1113      	asrs	r3, r2, #4
 8000b04:	4003      	ands	r3, r0
 8000b06:	0008      	movs	r0, r1
      Csd->FileFormat        = (CSD_Tab[14] & 0x0C) >> 2;
 8000b08:	2703      	movs	r7, #3
 8000b0a:	4303      	orrs	r3, r0
 8000b0c:	2006      	movs	r0, #6
 8000b0e:	1091      	asrs	r1, r2, #2
 8000b10:	4039      	ands	r1, r7
 8000b12:	0049      	lsls	r1, r1, #1
 8000b14:	4383      	bics	r3, r0
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 8000b16:	430b      	orrs	r3, r1
 8000b18:	403a      	ands	r2, r7
 8000b1a:	2118      	movs	r1, #24
 8000b1c:	40ba      	lsls	r2, r7
 8000b1e:	438b      	bics	r3, r1
 8000b20:	431a      	orrs	r2, r3
 8000b22:	7562      	strb	r2, [r4, #21]
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 8000b24:	7bf2      	ldrb	r2, [r6, #15]
 8000b26:	7da3      	ldrb	r3, [r4, #22]
 8000b28:	0851      	lsrs	r1, r2, #1
 8000b2a:	43ab      	bics	r3, r5
      Csd->Reserved5         = (CSD_Tab[15] & 0x01);
 8000b2c:	430b      	orrs	r3, r1
 8000b2e:	01d2      	lsls	r2, r2, #7
 8000b30:	401d      	ands	r5, r3
 8000b32:	4315      	orrs	r5, r2
 8000b34:	75a5      	strb	r5, [r4, #22]
 8000b36:	e6db      	b.n	80008f0 <BSP_SD_GetCardInfo+0x20>
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8000b38:	213c      	movs	r1, #60	; 0x3c
 8000b3a:	203f      	movs	r0, #63	; 0x3f
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	400b      	ands	r3, r1
 8000b40:	0991      	lsrs	r1, r2, #6
 8000b42:	430b      	orrs	r3, r1
 8000b44:	7a21      	ldrb	r1, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8000b46:	0412      	lsls	r2, r2, #16
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8000b48:	4381      	bics	r1, r0
 8000b4a:	430b      	orrs	r3, r1
 8000b4c:	7223      	strb	r3, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8000b4e:	892b      	ldrh	r3, [r5, #8]
 8000b50:	68a1      	ldr	r1, [r4, #8]
 8000b52:	ba5b      	rev16	r3, r3
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	431a      	orrs	r2, r3
 8000b58:	4b3f      	ldr	r3, [pc, #252]	; (8000c58 <BSP_SD_GetCardInfo+0x388>)
 8000b5a:	0292      	lsls	r2, r2, #10
 8000b5c:	0912      	lsrs	r2, r2, #4
 8000b5e:	400b      	ands	r3, r1
 8000b60:	431a      	orrs	r2, r3
 8000b62:	60a2      	str	r2, [r4, #8]
        Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80) >> 8);
 8000b64:	0e12      	lsrs	r2, r2, #24
 8000b66:	43b2      	bics	r2, r6
 8000b68:	72e2      	strb	r2, [r4, #11]
 8000b6a:	e773      	b.n	8000a54 <BSP_SD_GetCardInfo+0x184>
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8000b6c:	f7ff fdda 	bl	8000724 <SD_WaitData.constprop.0>
 8000b70:	1e06      	subs	r6, r0, #0
 8000b72:	d000      	beq.n	8000b76 <BSP_SD_GetCardInfo+0x2a6>
 8000b74:	e6ce      	b.n	8000914 <BSP_SD_GetCardInfo+0x44>
 8000b76:	0007      	movs	r7, r0
        CID_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000b78:	20ff      	movs	r0, #255	; 0xff
 8000b7a:	f000 fac7 	bl	800110c <SD_IO_WriteByte>
 8000b7e:	ad06      	add	r5, sp, #24
 8000b80:	5578      	strb	r0, [r7, r5]
      for (counter = 0; counter < 16; counter++)
 8000b82:	3701      	adds	r7, #1
 8000b84:	2f10      	cmp	r7, #16
 8000b86:	d1f7      	bne.n	8000b78 <BSP_SD_GetCardInfo+0x2a8>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000b88:	20ff      	movs	r0, #255	; 0xff
 8000b8a:	f000 fabf 	bl	800110c <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000b8e:	20ff      	movs	r0, #255	; 0xff
 8000b90:	f000 fabc 	bl	800110c <SD_IO_WriteByte>
      Cid->ManufacturerID = CID_Tab[0];
 8000b94:	782b      	ldrb	r3, [r5, #0]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8000b96:	0021      	movs	r1, r4
      Cid->ManufacturerID = CID_Tab[0];
 8000b98:	7623      	strb	r3, [r4, #24]
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8000b9a:	786b      	ldrb	r3, [r5, #1]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8000b9c:	3128      	adds	r1, #40	; 0x28
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	8363      	strh	r3, [r4, #26]
      Cid->OEM_AppliID |= CID_Tab[2];
 8000ba2:	8b63      	ldrh	r3, [r4, #26]
 8000ba4:	78aa      	ldrb	r2, [r5, #2]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	8363      	strh	r3, [r4, #26]
      Cid->ProdName1 = CID_Tab[3] << 24;
 8000baa:	78eb      	ldrb	r3, [r5, #3]
 8000bac:	061b      	lsls	r3, r3, #24
 8000bae:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[4] << 16;
 8000bb0:	792b      	ldrb	r3, [r5, #4]
 8000bb2:	69e2      	ldr	r2, [r4, #28]
 8000bb4:	041b      	lsls	r3, r3, #16
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[5] << 8;
 8000bba:	796b      	ldrb	r3, [r5, #5]
 8000bbc:	69e2      	ldr	r2, [r4, #28]
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[6];
 8000bc4:	69e2      	ldr	r2, [r4, #28]
 8000bc6:	79ab      	ldrb	r3, [r5, #6]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	61e3      	str	r3, [r4, #28]
      Cid->ProdName2 = CID_Tab[7];
 8000bcc:	79ea      	ldrb	r2, [r5, #7]
 8000bce:	1c63      	adds	r3, r4, #1
 8000bd0:	77da      	strb	r2, [r3, #31]
      Cid->ProdRev = CID_Tab[8];
 8000bd2:	7a2a      	ldrb	r2, [r5, #8]
 8000bd4:	1ca3      	adds	r3, r4, #2
 8000bd6:	77da      	strb	r2, [r3, #31]
      Cid->ProdSN = CID_Tab[9] << 24;
 8000bd8:	7a6b      	ldrb	r3, [r5, #9]
 8000bda:	061b      	lsls	r3, r3, #24
 8000bdc:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[10] << 16;
 8000bde:	7aab      	ldrb	r3, [r5, #10]
 8000be0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000be2:	041b      	lsls	r3, r3, #16
 8000be4:	4313      	orrs	r3, r2
 8000be6:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[11] << 8;
 8000be8:	7aeb      	ldrb	r3, [r5, #11]
 8000bea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[12];
 8000bf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bf4:	7b2b      	ldrb	r3, [r5, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8000bfa:	7b6b      	ldrb	r3, [r5, #13]
 8000bfc:	780a      	ldrb	r2, [r1, #0]
 8000bfe:	0918      	lsrs	r0, r3, #4
 8000c00:	4302      	orrs	r2, r0
 8000c02:	700a      	strb	r2, [r1, #0]
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 8000c04:	22f0      	movs	r2, #240	; 0xf0
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->ManufactDate |= CID_Tab[14];
 8000c0e:	7baa      	ldrb	r2, [r5, #14]
 8000c10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c12:	4313      	orrs	r3, r2
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8000c14:	0022      	movs	r2, r4
      Cid->ManufactDate |= CID_Tab[14];
 8000c16:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8000c18:	7beb      	ldrb	r3, [r5, #15]
 8000c1a:	322c      	adds	r2, #44	; 0x2c
 8000c1c:	085b      	lsrs	r3, r3, #1
 8000c1e:	7013      	strb	r3, [r2, #0]
      Cid->Reserved2 = 1;
 8000c20:	0023      	movs	r3, r4
 8000c22:	2201      	movs	r2, #1
 8000c24:	332d      	adds	r3, #45	; 0x2d
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	e675      	b.n	8000916 <BSP_SD_GetCardInfo+0x46>
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000c2a:	8923      	ldrh	r3, [r4, #8]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000c2c:	7b22      	ldrb	r2, [r4, #12]
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000c2e:	049b      	lsls	r3, r3, #18
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000c30:	0752      	lsls	r2, r2, #29
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000c32:	0d1b      	lsrs	r3, r3, #20
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000c34:	0f52      	lsrs	r2, r2, #29
 8000c36:	3202      	adds	r2, #2
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000c38:	3301      	adds	r3, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000c3a:	4093      	lsls	r3, r2
    pCardInfo->LogBlockSize = 512;
 8000c3c:	2280      	movs	r2, #128	; 0x80
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8000c3e:	2101      	movs	r1, #1
    pCardInfo->LogBlockSize = 512;
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	63e2      	str	r2, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8000c44:	7962      	ldrb	r2, [r4, #5]
 8000c46:	0912      	lsrs	r2, r2, #4
 8000c48:	4091      	lsls	r1, r2
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8000c4a:	4093      	lsls	r3, r2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8000c4c:	6361      	str	r1, [r4, #52]	; 0x34
 8000c4e:	e679      	b.n	8000944 <BSP_SD_GetCardInfo+0x74>
 8000c50:	200011fe 	.word	0x200011fe
 8000c54:	ffffc003 	.word	0xffffc003
 8000c58:	f000003f 	.word	0xf000003f

08000c5c <BSP_SD_ReadBlocks>:
{
 8000c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000c62:	2300      	movs	r3, #0
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	ad04      	add	r5, sp, #16
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	0092      	lsls	r2, r2, #2
 8000c6c:	33ff      	adds	r3, #255	; 0xff
{
 8000c6e:	0007      	movs	r7, r0
 8000c70:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000c72:	0028      	movs	r0, r5
 8000c74:	2110      	movs	r1, #16
 8000c76:	f7ff fce7 	bl	8000648 <SD_SendCmd>
 8000c7a:	782e      	ldrb	r6, [r5, #0]
  SD_IO_CSState(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f000 fa33 	bl	80010e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000c82:	20ff      	movs	r0, #255	; 0xff
 8000c84:	f000 fa42 	bl	800110c <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d002      	beq.n	8000c92 <BSP_SD_ReadBlocks+0x36>
  uint8_t *ptr = NULL;
 8000c8c:	2500      	movs	r5, #0
  uint8_t retr = BSP_SD_ERROR;
 8000c8e:	2601      	movs	r6, #1
 8000c90:	e014      	b.n	8000cbc <BSP_SD_ReadBlocks+0x60>
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8000c92:	2080      	movs	r0, #128	; 0x80
 8000c94:	0080      	lsls	r0, r0, #2
 8000c96:	f003 fd89 	bl	80047ac <malloc>
 8000c9a:	1e05      	subs	r5, r0, #0
  if( ptr == NULL )
 8000c9c:	d0f6      	beq.n	8000c8c <BSP_SD_ReadBlocks+0x30>
  memset(ptr, SD_DUMMY_BYTE, sizeof(uint8_t)*BlockSize);
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	21ff      	movs	r1, #255	; 0xff
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	f003 ffa3 	bl	8004bee <memset>
  addr = (ReadAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <BSP_SD_ReadBlocks+0xe0>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d001      	beq.n	8000cb4 <BSP_SD_ReadBlocks+0x58>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	435c      	muls	r4, r3
  while (NumOfBlocks--)
 8000cb6:	9b03      	ldr	r3, [sp, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10d      	bne.n	8000cd8 <BSP_SD_ReadBlocks+0x7c>
  SD_IO_CSState(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f000 fa13 	bl	80010e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000cc2:	20ff      	movs	r0, #255	; 0xff
 8000cc4:	f000 fa22 	bl	800110c <SD_IO_WriteByte>
  if(ptr != NULL) free(ptr);
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d002      	beq.n	8000cd2 <BSP_SD_ReadBlocks+0x76>
 8000ccc:	0028      	movs	r0, r5
 8000cce:	f003 fd77 	bl	80047c0 <free>
}
 8000cd2:	0030      	movs	r0, r6
 8000cd4:	b007      	add	sp, #28
 8000cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	0022      	movs	r2, r4
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2111      	movs	r1, #17
 8000ce0:	33ff      	adds	r3, #255	; 0xff
 8000ce2:	a804      	add	r0, sp, #16
 8000ce4:	f7ff fcb0 	bl	8000648 <SD_SendCmd>
    if ( response.r1 != SD_R1_NO_ERROR)
 8000ce8:	ab02      	add	r3, sp, #8
 8000cea:	7a1b      	ldrb	r3, [r3, #8]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1ce      	bne.n	8000c8e <BSP_SD_ReadBlocks+0x32>
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8000cf0:	f7ff fd18 	bl	8000724 <SD_WaitData.constprop.0>
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	d1ca      	bne.n	8000c8e <BSP_SD_ReadBlocks+0x32>
      SD_IO_WriteReadData(ptr, (uint8_t*)pData + offset, BlockSize);
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	0039      	movs	r1, r7
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	0028      	movs	r0, r5
 8000d00:	f000 fa00 	bl	8001104 <SD_IO_WriteReadData>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <BSP_SD_ReadBlocks+0xe0>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d113      	bne.n	8000d34 <BSP_SD_ReadBlocks+0xd8>
 8000d0c:	3401      	adds	r4, #1
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000d0e:	20ff      	movs	r0, #255	; 0xff
 8000d10:	f000 f9fc 	bl	800110c <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000d14:	20ff      	movs	r0, #255	; 0xff
 8000d16:	f000 f9f9 	bl	800110c <SD_IO_WriteByte>
    SD_IO_CSState(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f000 f9e4 	bl	80010e8 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000d20:	20ff      	movs	r0, #255	; 0xff
 8000d22:	f000 f9f3 	bl	800110c <SD_IO_WriteByte>
 8000d26:	9b03      	ldr	r3, [sp, #12]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	9303      	str	r3, [sp, #12]
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	18ff      	adds	r7, r7, r3
 8000d32:	e7c0      	b.n	8000cb6 <BSP_SD_ReadBlocks+0x5a>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	18e4      	adds	r4, r4, r3
 8000d3a:	e7e8      	b.n	8000d0e <BSP_SD_ReadBlocks+0xb2>
 8000d3c:	200011fe 	.word	0x200011fe

08000d40 <BSP_SD_WriteBlocks>:
{
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	b087      	sub	sp, #28
 8000d44:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000d46:	2300      	movs	r3, #0
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	ad04      	add	r5, sp, #16
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	33ff      	adds	r3, #255	; 0xff
{
 8000d52:	0007      	movs	r7, r0
 8000d54:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000d56:	0028      	movs	r0, r5
 8000d58:	2110      	movs	r1, #16
 8000d5a:	f7ff fc75 	bl	8000648 <SD_SendCmd>
 8000d5e:	782d      	ldrb	r5, [r5, #0]
  SD_IO_CSState(1);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f000 f9c1 	bl	80010e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000d66:	20ff      	movs	r0, #255	; 0xff
 8000d68:	f000 f9d0 	bl	800110c <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d009      	beq.n	8000d84 <BSP_SD_WriteBlocks+0x44>
  uint8_t retr = BSP_SD_ERROR;
 8000d70:	2501      	movs	r5, #1
  SD_IO_CSState(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f000 f9b8 	bl	80010e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000d78:	20ff      	movs	r0, #255	; 0xff
 8000d7a:	f000 f9c7 	bl	800110c <SD_IO_WriteByte>
}
 8000d7e:	0028      	movs	r0, r5
 8000d80:	b007      	add	sp, #28
 8000d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8000d84:	2080      	movs	r0, #128	; 0x80
 8000d86:	0080      	lsls	r0, r0, #2
 8000d88:	f003 fd10 	bl	80047ac <malloc>
 8000d8c:	1e06      	subs	r6, r0, #0
  if (ptr == NULL)
 8000d8e:	d0ef      	beq.n	8000d70 <BSP_SD_WriteBlocks+0x30>
  addr = (WriteAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 8000d90:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <BSP_SD_WriteBlocks+0x114>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d001      	beq.n	8000d9c <BSP_SD_WriteBlocks+0x5c>
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	435c      	muls	r4, r3
 8000d9e:	9702      	str	r7, [sp, #8]
  while (NumOfBlocks--)
 8000da0:	9b03      	ldr	r3, [sp, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d103      	bne.n	8000dae <BSP_SD_WriteBlocks+0x6e>
  if(ptr != NULL) free(ptr);
 8000da6:	0030      	movs	r0, r6
 8000da8:	f003 fd0a 	bl	80047c0 <free>
 8000dac:	e7e1      	b.n	8000d72 <BSP_SD_WriteBlocks+0x32>
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000dae:	2300      	movs	r3, #0
 8000db0:	af04      	add	r7, sp, #16
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	0022      	movs	r2, r4
 8000db6:	33ff      	adds	r3, #255	; 0xff
 8000db8:	2118      	movs	r1, #24
 8000dba:	0038      	movs	r0, r7
 8000dbc:	f7ff fc44 	bl	8000648 <SD_SendCmd>
    if (response.r1 != SD_R1_NO_ERROR)
 8000dc0:	783b      	ldrb	r3, [r7, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d144      	bne.n	8000e50 <BSP_SD_WriteBlocks+0x110>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000dc6:	20ff      	movs	r0, #255	; 0xff
 8000dc8:	f000 f9a0 	bl	800110c <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000dcc:	20ff      	movs	r0, #255	; 0xff
 8000dce:	f000 f99d 	bl	800110c <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE);
 8000dd2:	20fe      	movs	r0, #254	; 0xfe
 8000dd4:	f000 f99a 	bl	800110c <SD_IO_WriteByte>
    SD_IO_WriteReadData((uint8_t*)pData + offset, ptr, BlockSize);
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	0031      	movs	r1, r6
 8000ddc:	0092      	lsls	r2, r2, #2
 8000dde:	9802      	ldr	r0, [sp, #8]
 8000de0:	f000 f990 	bl	8001104 <SD_IO_WriteReadData>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <BSP_SD_WriteBlocks+0x114>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d12d      	bne.n	8000e48 <BSP_SD_WriteBlocks+0x108>
 8000dec:	3401      	adds	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000dee:	20ff      	movs	r0, #255	; 0xff
 8000df0:	f000 f98c 	bl	800110c <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000df4:	20ff      	movs	r0, #255	; 0xff
 8000df6:	f000 f989 	bl	800110c <SD_IO_WriteByte>
  dataresponse = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000dfa:	20ff      	movs	r0, #255	; 0xff
 8000dfc:	f000 f986 	bl	800110c <SD_IO_WriteByte>
 8000e00:	0007      	movs	r7, r0
  SD_IO_WriteByte(SD_DUMMY_BYTE); /* read the busy response byte*/
 8000e02:	20ff      	movs	r0, #255	; 0xff
 8000e04:	f000 f982 	bl	800110c <SD_IO_WriteByte>
  switch (dataresponse & 0x1F)
 8000e08:	231f      	movs	r3, #31
 8000e0a:	401f      	ands	r7, r3
 8000e0c:	2f05      	cmp	r7, #5
 8000e0e:	d11f      	bne.n	8000e50 <BSP_SD_WriteBlocks+0x110>
    SD_IO_CSState(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 f969 	bl	80010e8 <SD_IO_CSState>
    SD_IO_CSState(0);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f966 	bl	80010e8 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 8000e1c:	20ff      	movs	r0, #255	; 0xff
 8000e1e:	f000 f975 	bl	800110c <SD_IO_WriteByte>
 8000e22:	0007      	movs	r7, r0
 8000e24:	28ff      	cmp	r0, #255	; 0xff
 8000e26:	d1f9      	bne.n	8000e1c <BSP_SD_WriteBlocks+0xdc>
    SD_IO_CSState(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f000 f95d 	bl	80010e8 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000e2e:	0038      	movs	r0, r7
 8000e30:	f000 f96c 	bl	800110c <SD_IO_WriteByte>
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4694      	mov	ip, r2
 8000e3a:	9b03      	ldr	r3, [sp, #12]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	9303      	str	r3, [sp, #12]
 8000e40:	9b02      	ldr	r3, [sp, #8]
 8000e42:	4463      	add	r3, ip
 8000e44:	9302      	str	r3, [sp, #8]
 8000e46:	e7ab      	b.n	8000da0 <BSP_SD_WriteBlocks+0x60>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	18e4      	adds	r4, r4, r3
 8000e4e:	e7ce      	b.n	8000dee <BSP_SD_WriteBlocks+0xae>
  uint8_t retr = BSP_SD_ERROR;
 8000e50:	2501      	movs	r5, #1
 8000e52:	e7a8      	b.n	8000da6 <BSP_SD_WriteBlocks+0x66>
 8000e54:	200011fe 	.word	0x200011fe

08000e58 <BSP_SD_GetCardState>:
{
 8000e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  retr = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, SD_ANSWER_R2_EXPECTED);
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	ac02      	add	r4, sp, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	210d      	movs	r1, #13
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	0020      	movs	r0, r4
 8000e66:	33fd      	adds	r3, #253	; 0xfd
 8000e68:	f7ff fbee 	bl	8000648 <SD_SendCmd>
  SD_IO_CSState(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f000 f93b 	bl	80010e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000e72:	20ff      	movs	r0, #255	; 0xff
 8000e74:	f000 f94a 	bl	800110c <SD_IO_WriteByte>
  if(( retr.r1 == SD_R1_NO_ERROR) && ( retr.r2 == SD_R2_NO_ERROR))
 8000e78:	7823      	ldrb	r3, [r4, #0]
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d103      	bne.n	8000e88 <BSP_SD_GetCardState+0x30>
 8000e80:	7860      	ldrb	r0, [r4, #1]
 8000e82:	1e43      	subs	r3, r0, #1
 8000e84:	4198      	sbcs	r0, r3
 8000e86:	b2c0      	uxtb	r0, r0
}
 8000e88:	b004      	add	sp, #16
 8000e8a:	bd10      	pop	{r4, pc}

08000e8c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_MspInit+0x2c>)
{
 8000e90:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000e94:	4301      	orrs	r1, r0
 8000e96:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9c:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4002      	ands	r2, r0
 8000ea0:	9200      	str	r2, [sp, #0]
 8000ea2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eac:	400b      	ands	r3, r1
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	b002      	add	sp, #8
 8000eb4:	4770      	bx	lr
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	40021000 	.word	0x40021000

08000ebc <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_RTC_MspInit+0x2c>)
 8000ebe:	6802      	ldr	r2, [r0, #0]
{
 8000ec0:	b082      	sub	sp, #8
  if(hrtc->Instance==RTC)
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d10e      	bne.n	8000ee4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_RTC_MspInit+0x30>)
 8000eca:	0212      	lsls	r2, r2, #8
 8000ecc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000ece:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ed0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 8000ed2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ed6:	00c9      	lsls	r1, r1, #3
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8000edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ede:	400b      	ands	r3, r1
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ee4:	b002      	add	sp, #8
 8000ee6:	4770      	bx	lr
 8000ee8:	40002800 	.word	0x40002800
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	0004      	movs	r4, r0
 8000ef4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	2214      	movs	r2, #20
 8000ef8:	2100      	movs	r1, #0
 8000efa:	a803      	add	r0, sp, #12
 8000efc:	f003 fe77 	bl	8004bee <memset>
  if(hspi->Instance==SPI1)
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_SPI_MspInit+0x50>)
 8000f02:	6822      	ldr	r2, [r4, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d118      	bne.n	8000f3a <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f08:	2080      	movs	r0, #128	; 0x80
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_SPI_MspInit+0x54>)
 8000f0c:	0140      	lsls	r0, r0, #5
 8000f0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000f10:	4301      	orrs	r1, r0
 8000f12:	6419      	str	r1, [r3, #64]	; 0x40
 8000f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f16:	4002      	ands	r2, r0
 8000f18:	9201      	str	r2, [sp, #4]
 8000f1a:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	4809      	ldr	r0, [pc, #36]	; (8000f48 <HAL_SPI_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4311      	orrs	r1, r2
 8000f24:	6359      	str	r1, [r3, #52]	; 0x34
 8000f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f30:	2338      	movs	r3, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f34:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f000 fa07 	bl	8001348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f3a:	b008      	add	sp, #32
 8000f3c:	bd10      	pop	{r4, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	40013000 	.word	0x40013000
 8000f44:	40021000 	.word	0x40021000
 8000f48:	50000400 	.word	0x50000400

08000f4c <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_SPI_MspDeInit+0x20>)
 8000f4e:	6802      	ldr	r2, [r0, #0]
{
 8000f50:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d108      	bne.n	8000f68 <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000f56:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_SPI_MspDeInit+0x24>)
 8000f58:	4906      	ldr	r1, [pc, #24]	; (8000f74 <HAL_SPI_MspDeInit+0x28>)
 8000f5a:	6c13      	ldr	r3, [r2, #64]	; 0x40
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <HAL_SPI_MspDeInit+0x2c>)
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000f5e:	400b      	ands	r3, r1
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8000f62:	2138      	movs	r1, #56	; 0x38
 8000f64:	f000 fa98 	bl	8001498 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	40013000 	.word	0x40013000
 8000f70:	40021000 	.word	0x40021000
 8000f74:	ffffefff 	.word	0xffffefff
 8000f78:	50000400 	.word	0x50000400

08000f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f7c:	b510      	push	{r4, lr}
 8000f7e:	0004      	movs	r4, r0
 8000f80:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	2214      	movs	r2, #20
 8000f84:	2100      	movs	r1, #0
 8000f86:	a803      	add	r0, sp, #12
 8000f88:	f003 fe31 	bl	8004bee <memset>
  if(huart->Instance==USART2)
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_UART_MspInit+0x54>)
 8000f8e:	6822      	ldr	r2, [r4, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d11b      	bne.n	8000fcc <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f94:	2080      	movs	r0, #128	; 0x80
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_UART_MspInit+0x58>)
 8000f98:	0280      	lsls	r0, r0, #10
 8000f9a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f9c:	4301      	orrs	r1, r0
 8000f9e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000fa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fa2:	4002      	ands	r2, r0
 8000fa4:	9201      	str	r2, [sp, #4]
 8000fa6:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4311      	orrs	r1, r2
 8000fb0:	6359      	str	r1, [r3, #52]	; 0x34
 8000fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fbc:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fc0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	3b0a      	subs	r3, #10
 8000fc4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fc6:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f000 f9be 	bl	8001348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fcc:	b008      	add	sp, #32
 8000fce:	bd10      	pop	{r4, pc}
 8000fd0:	40004400 	.word	0x40004400
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <NMI_Handler>:
 8000fd8:	4770      	bx	lr

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler>

08000fdc <SVC_Handler>:
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe2:	f000 f943 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	  lv_tick_inc(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f002 feb2 	bl	8003d50 <lv_tick_inc>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bd10      	pop	{r4, pc}
	...

08000ff0 <SPIx_Init>:
/**
  * @brief  Initialize SPI HAL.
  * @retval None
  */
static void SPIx_Init(void)
{
 8000ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8000ff2:	4c2d      	ldr	r4, [pc, #180]	; (80010a8 <SPIx_Init+0xb8>)
{
 8000ff4:	b089      	sub	sp, #36	; 0x24
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8000ff6:	0020      	movs	r0, r4
 8000ff8:	f001 f9a8 	bl	800234c <HAL_SPI_GetState>
 8000ffc:	1e06      	subs	r6, r0, #0
 8000ffe:	d150      	bne.n	80010a2 <SPIx_Init+0xb2>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <SPIx_Init+0xbc>)
          - PCLK1 max frequency is 48 MHz 
       */ 
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001002:	2702      	movs	r7, #2
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8001004:	6023      	str	r3, [r4, #0]
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001006:	2308      	movs	r3, #8
 8001008:	61e3      	str	r3, [r4, #28]
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 800100a:	3b07      	subs	r3, #7
 800100c:	6163      	str	r3, [r4, #20]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    hnucleo_Spi.Init.CRCPolynomial = 7;
 800100e:	3306      	adds	r3, #6
 8001010:	62e3      	str	r3, [r4, #44]	; 0x2c
    hnucleo_Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8001012:	23e0      	movs	r3, #224	; 0xe0
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	60e3      	str	r3, [r4, #12]
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8001018:	2380      	movs	r3, #128	; 0x80
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 800101a:	4d25      	ldr	r5, [pc, #148]	; (80010b0 <SPIx_Init+0xc0>)
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 800101c:	009b      	lsls	r3, r3, #2
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800101e:	2214      	movs	r2, #20
 8001020:	0001      	movs	r1, r0
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8001022:	60a0      	str	r0, [r4, #8]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001024:	62a0      	str	r0, [r4, #40]	; 0x28
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001026:	6320      	str	r0, [r4, #48]	; 0x30
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001028:	6220      	str	r0, [r4, #32]
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 800102a:	61a3      	str	r3, [r4, #24]
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 800102c:	6260      	str	r0, [r4, #36]	; 0x24
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 800102e:	3bfc      	subs	r3, #252	; 0xfc
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001030:	6360      	str	r0, [r4, #52]	; 0x34
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001032:	a803      	add	r0, sp, #12
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8001034:	6063      	str	r3, [r4, #4]
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001036:	6127      	str	r7, [r4, #16]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001038:	f003 fdd9 	bl	8004bee <memset>
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 800103c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 800103e:	a903      	add	r1, sp, #12
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001040:	433b      	orrs	r3, r7
 8001042:	636b      	str	r3, [r5, #52]	; 0x34
 8001044:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8001046:	481b      	ldr	r0, [pc, #108]	; (80010b4 <SPIx_Init+0xc4>)
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001048:	403b      	ands	r3, r7
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	9b00      	ldr	r3, [sp, #0]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 800104e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001050:	433b      	orrs	r3, r7
 8001052:	636b      	str	r3, [r5, #52]	; 0x34
 8001054:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  gpioinitstruct.Mode = GPIO_MODE_AF_PP;
 8001056:	9704      	str	r7, [sp, #16]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8001058:	403b      	ands	r3, r7
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	9b01      	ldr	r3, [sp, #4]
  gpioinitstruct.Pin = NUCLEO_SPIx_SCK_PIN;
 800105e:	2308      	movs	r3, #8
 8001060:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Pull  = GPIO_PULLUP;
 8001062:	3b07      	subs	r3, #7
 8001064:	9305      	str	r3, [sp, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	19db      	adds	r3, r3, r7
 8001068:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 800106a:	f000 f96d 	bl	8001348 <HAL_GPIO_Init>
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 800106e:	2320      	movs	r3, #32
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001070:	a903      	add	r1, sp, #12
 8001072:	4810      	ldr	r0, [pc, #64]	; (80010b4 <SPIx_Init+0xc4>)
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001074:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 8001076:	9607      	str	r6, [sp, #28]
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 8001078:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 800107a:	f000 f965 	bl	8001348 <HAL_GPIO_Init>
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 800107e:	2310      	movs	r3, #16
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001080:	a903      	add	r1, sp, #12
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <SPIx_Init+0xc4>)
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8001084:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001086:	f000 f95f 	bl	8001348 <HAL_GPIO_Init>
  NUCLEO_SPIx_CLK_ENABLE();
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800108e:	0149      	lsls	r1, r1, #5
 8001090:	430a      	orrs	r2, r1
 8001092:	642a      	str	r2, [r5, #64]	; 0x40
 8001094:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    
    SPIx_MspInit();
    HAL_SPI_Init(&hnucleo_Spi);
 8001096:	0020      	movs	r0, r4
  NUCLEO_SPIx_CLK_ENABLE();
 8001098:	400b      	ands	r3, r1
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	9b02      	ldr	r3, [sp, #8]
    HAL_SPI_Init(&hnucleo_Spi);
 800109e:	f000 ffad 	bl	8001ffc <HAL_SPI_Init>
  }
}
 80010a2:	b009      	add	sp, #36	; 0x24
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	20001200 	.word	0x20001200
 80010ac:	40013000 	.word	0x40013000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	50000400 	.word	0x50000400

080010b8 <SPIx_WriteReadData>:
  * @param  DataOut: read value
  * @param  DataLength: value data length
  * @retval None
  */
static void SPIx_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 80010b8:	b513      	push	{r0, r1, r4, lr}
 80010ba:	0013      	movs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLength, SpixTimeout);
 80010bc:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <SPIx_WriteReadData+0x28>)
 80010be:	4c09      	ldr	r4, [pc, #36]	; (80010e4 <SPIx_WriteReadData+0x2c>)
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	9200      	str	r2, [sp, #0]
 80010c4:	000a      	movs	r2, r1
 80010c6:	0001      	movs	r1, r0
 80010c8:	0020      	movs	r0, r4
 80010ca:	f001 f80d 	bl	80020e8 <HAL_SPI_TransmitReceive>

  /* Check the communication status */
  if(status != HAL_OK)
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d004      	beq.n	80010dc <SPIx_WriteReadData+0x24>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 80010d2:	0020      	movs	r0, r4
 80010d4:	f000 fff0 	bl	80020b8 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 80010d8:	f7ff ff8a 	bl	8000ff0 <SPIx_Init>
}
 80010dc:	bd13      	pop	{r0, r1, r4, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20001200 	.word	0x20001200

080010e8 <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  val: pin value.
  * @retval None
  */
void SD_IO_CSState(uint8_t val)
{
 80010e8:	b510      	push	{r4, lr}
 80010ea:	0002      	movs	r2, r0
  if(val == 1) 
 80010ec:	2801      	cmp	r0, #1
 80010ee:	d104      	bne.n	80010fa <SD_IO_CSState+0x12>
  {
    SD_CS_HIGH();
  }
  else
  {
    SD_CS_LOW();
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <SD_IO_CSState+0x18>)
 80010f4:	f000 fa46 	bl	8001584 <HAL_GPIO_WritePin>
  }
}
 80010f8:	bd10      	pop	{r4, pc}
    SD_CS_LOW();
 80010fa:	2200      	movs	r2, #0
 80010fc:	e7f8      	b.n	80010f0 <SD_IO_CSState+0x8>
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	50000c00 	.word	0x50000c00

08001104 <SD_IO_WriteReadData>:
  * @param  DataOut: Pointer to data buffer for read data
  * @param  DataLength: number of bytes to write
  * @retval None
  */
void SD_IO_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8001104:	b510      	push	{r4, lr}
  /* Send the byte */
  SPIx_WriteReadData(DataIn, DataOut, DataLength);
 8001106:	f7ff ffd7 	bl	80010b8 <SPIx_WriteReadData>
}
 800110a:	bd10      	pop	{r4, pc}

0800110c <SD_IO_WriteByte>:
  * @brief  Write a byte on the SD.
  * @param  Data: byte to send.
  * @retval Data written
  */
uint8_t SD_IO_WriteByte(uint8_t Data)
{
 800110c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tmp;

  /* Send the byte */
  SPIx_WriteReadData(&Data,&tmp,1);
 800110e:	240f      	movs	r4, #15
{
 8001110:	466b      	mov	r3, sp
  SPIx_WriteReadData(&Data,&tmp,1);
 8001112:	446c      	add	r4, sp
{
 8001114:	71d8      	strb	r0, [r3, #7]
 8001116:	3307      	adds	r3, #7
  SPIx_WriteReadData(&Data,&tmp,1);
 8001118:	0018      	movs	r0, r3
 800111a:	2201      	movs	r2, #1
 800111c:	0021      	movs	r1, r4
 800111e:	f7ff ffcb 	bl	80010b8 <SPIx_WriteReadData>
  return tmp;
 8001122:	7820      	ldrb	r0, [r4, #0]
  }
 8001124:	b004      	add	sp, #16
 8001126:	bd10      	pop	{r4, pc}

08001128 <SD_IO_Init>:
{
 8001128:	b510      	push	{r4, lr}
 800112a:	b088      	sub	sp, #32
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800112c:	2214      	movs	r2, #20
 800112e:	2100      	movs	r1, #0
 8001130:	a803      	add	r0, sp, #12
 8001132:	f003 fd5c 	bl	8004bee <memset>
  SD_CS_GPIO_CLK_ENABLE();
 8001136:	2008      	movs	r0, #8
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <SD_IO_Init+0x7c>)
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2401      	movs	r4, #1
  SD_CS_GPIO_CLK_ENABLE();
 800113c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800113e:	4301      	orrs	r1, r0
 8001140:	6359      	str	r1, [r3, #52]	; 0x34
  LCD_CS_GPIO_CLK_ENABLE();
 8001142:	2102      	movs	r1, #2
  SD_CS_GPIO_CLK_ENABLE();
 8001144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001146:	4002      	ands	r2, r0
 8001148:	9201      	str	r2, [sp, #4]
 800114a:	9a01      	ldr	r2, [sp, #4]
  LCD_CS_GPIO_CLK_ENABLE();
 800114c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  SD_CS_HIGH();
 800114e:	4816      	ldr	r0, [pc, #88]	; (80011a8 <SD_IO_Init+0x80>)
  LCD_CS_GPIO_CLK_ENABLE();
 8001150:	430a      	orrs	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	; 0x34
 8001154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  SD_CS_HIGH();
 8001156:	2201      	movs	r2, #1
  LCD_CS_GPIO_CLK_ENABLE();
 8001158:	400b      	ands	r3, r1
 800115a:	9302      	str	r3, [sp, #8]
  SD_CS_HIGH();
 800115c:	313e      	adds	r1, #62	; 0x3e
  LCD_CS_GPIO_CLK_ENABLE();
 800115e:	9b02      	ldr	r3, [sp, #8]
  SD_CS_HIGH();
 8001160:	f000 fa10 	bl	8001584 <HAL_GPIO_WritePin>
  LCD_CS_HIGH();
 8001164:	2201      	movs	r2, #1
 8001166:	4811      	ldr	r0, [pc, #68]	; (80011ac <SD_IO_Init+0x84>)
 8001168:	0011      	movs	r1, r2
 800116a:	f000 fa0b 	bl	8001584 <HAL_GPIO_WritePin>
  gpioinitstruct.Pin = SD_CS_PIN;
 800116e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001170:	a903      	add	r1, sp, #12
  gpioinitstruct.Pin = SD_CS_PIN;
 8001172:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <SD_IO_Init+0x80>)
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	3b3d      	subs	r3, #61	; 0x3d
 8001178:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	9404      	str	r4, [sp, #16]
  gpioinitstruct.Pull = GPIO_PULLUP;
 800117c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 800117e:	f000 f8e3 	bl	8001348 <HAL_GPIO_Init>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001182:	a903      	add	r1, sp, #12
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <SD_IO_Init+0x80>)
  gpioinitstruct.Pin   = LCD_CS_PIN;
 8001186:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001188:	f000 f8de 	bl	8001348 <HAL_GPIO_Init>
  SPIx_Init();
 800118c:	f7ff ff30 	bl	8000ff0 <SPIx_Init>
 8001190:	3409      	adds	r4, #9
 8001192:	3c01      	subs	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001194:	20ff      	movs	r0, #255	; 0xff
 8001196:	b2e4      	uxtb	r4, r4
 8001198:	f7ff ffb8 	bl	800110c <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 800119c:	2c00      	cmp	r4, #0
 800119e:	d1f8      	bne.n	8001192 <SD_IO_Init+0x6a>
}
 80011a0:	b008      	add	sp, #32
 80011a2:	bd10      	pop	{r4, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	50000c00 	.word	0x50000c00
 80011ac:	50000400 	.word	0x50000400

080011b0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <_sbrk+0x2c>)
{
 80011b2:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80011b4:	6819      	ldr	r1, [r3, #0]
{
 80011b6:	0002      	movs	r2, r0
	if (heap_end == 0)
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d101      	bne.n	80011c0 <_sbrk+0x10>
		heap_end = &end;
 80011bc:	4908      	ldr	r1, [pc, #32]	; (80011e0 <_sbrk+0x30>)
 80011be:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80011c0:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80011c2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80011c4:	1882      	adds	r2, r0, r2
 80011c6:	428a      	cmp	r2, r1
 80011c8:	d906      	bls.n	80011d8 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80011ca:	f003 fac5 	bl	8004758 <__errno>
 80011ce:	230c      	movs	r3, #12
 80011d0:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80011d2:	2001      	movs	r0, #1
 80011d4:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80011d6:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80011d8:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80011da:	e7fc      	b.n	80011d6 <_sbrk+0x26>
 80011dc:	20001264 	.word	0x20001264
 80011e0:	20004be4 	.word	0x20004be4

080011e4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <SystemInit+0xc>)
 80011e8:	0512      	lsls	r2, r2, #20
 80011ea:	609a      	str	r2, [r3, #8]
#endif
}
 80011ec:	4770      	bx	lr
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_InitTick+0x44>)
{
 80011f6:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 80011f8:	6819      	ldr	r1, [r3, #0]
{
 80011fa:	0005      	movs	r5, r0
  if (uwTickFreq != 0U)
 80011fc:	2900      	cmp	r1, #0
 80011fe:	d101      	bne.n	8001204 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001200:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001202:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001204:	20fa      	movs	r0, #250	; 0xfa
 8001206:	0080      	lsls	r0, r0, #2
 8001208:	f7fe ffa0 	bl	800014c <__udivsi3>
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_InitTick+0x48>)
 800120e:	0001      	movs	r1, r0
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	f7fe ff9b 	bl	800014c <__udivsi3>
 8001216:	f000 f87d 	bl	8001314 <HAL_SYSTICK_Config>
 800121a:	1e04      	subs	r4, r0, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	2d03      	cmp	r5, #3
 8001220:	d8ee      	bhi.n	8001200 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001222:	0002      	movs	r2, r0
 8001224:	2001      	movs	r0, #1
 8001226:	0029      	movs	r1, r5
 8001228:	4240      	negs	r0, r0
 800122a:	f000 f843 	bl	80012b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <HAL_InitTick+0x4c>)
 8001230:	0020      	movs	r0, r4
 8001232:	601d      	str	r5, [r3, #0]
 8001234:	e7e5      	b.n	8001202 <HAL_InitTick+0xe>
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	20000008 	.word	0x20000008
 800123c:	20000004 	.word	0x20000004
 8001240:	2000000c 	.word	0x2000000c

08001244 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_Init+0x24>)
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	6811      	ldr	r1, [r2, #0]
{
 800124c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124e:	430b      	orrs	r3, r1
 8001250:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001252:	2000      	movs	r0, #0
 8001254:	f7ff ffce 	bl	80011f4 <HAL_InitTick>
 8001258:	1e04      	subs	r4, r0, #0
 800125a:	d103      	bne.n	8001264 <HAL_Init+0x20>
  HAL_MspInit();
 800125c:	f7ff fe16 	bl	8000e8c <HAL_MspInit>
}
 8001260:	0020      	movs	r0, r4
 8001262:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001264:	2401      	movs	r4, #1
 8001266:	e7fb      	b.n	8001260 <HAL_Init+0x1c>
 8001268:	40022000 	.word	0x40022000

0800126c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800126c:	4a03      	ldr	r2, [pc, #12]	; (800127c <HAL_IncTick+0x10>)
 800126e:	4904      	ldr	r1, [pc, #16]	; (8001280 <HAL_IncTick+0x14>)
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	6809      	ldr	r1, [r1, #0]
 8001274:	185b      	adds	r3, r3, r1
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	4770      	bx	lr
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	200043f4 	.word	0x200043f4
 8001280:	20000008 	.word	0x20000008

08001284 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001284:	4b01      	ldr	r3, [pc, #4]	; (800128c <HAL_GetTick+0x8>)
 8001286:	6818      	ldr	r0, [r3, #0]
}
 8001288:	4770      	bx	lr
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	200043f4 	.word	0x200043f4

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff fff6 	bl	8001284 <HAL_GetTick>
 8001298:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	1c63      	adds	r3, r4, #1
 800129c:	d002      	beq.n	80012a4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <HAL_Delay+0x20>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a4:	f7ff ffee 	bl	8001284 <HAL_GetTick>
 80012a8:	1b40      	subs	r0, r0, r5
 80012aa:	4284      	cmp	r4, r0
 80012ac:	d8fa      	bhi.n	80012a4 <HAL_Delay+0x14>
  {
  }
}
 80012ae:	bd70      	pop	{r4, r5, r6, pc}
 80012b0:	20000008 	.word	0x20000008

080012b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80012b8:	2800      	cmp	r0, #0
 80012ba:	db12      	blt.n	80012e2 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	0883      	lsrs	r3, r0, #2
 80012be:	4a13      	ldr	r2, [pc, #76]	; (800130c <HAL_NVIC_SetPriority+0x58>)
 80012c0:	2403      	movs	r4, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	189b      	adds	r3, r3, r2
 80012c6:	22ff      	movs	r2, #255	; 0xff
 80012c8:	4020      	ands	r0, r4
 80012ca:	40a0      	lsls	r0, r4
 80012cc:	0014      	movs	r4, r2
 80012ce:	25c0      	movs	r5, #192	; 0xc0
 80012d0:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012d2:	4011      	ands	r1, r2
 80012d4:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d6:	00ad      	lsls	r5, r5, #2
 80012d8:	595e      	ldr	r6, [r3, r5]
 80012da:	43a6      	bics	r6, r4
 80012dc:	4331      	orrs	r1, r6
 80012de:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e2:	2403      	movs	r4, #3
 80012e4:	230f      	movs	r3, #15
 80012e6:	b2c0      	uxtb	r0, r0
 80012e8:	4003      	ands	r3, r0
 80012ea:	4020      	ands	r0, r4
 80012ec:	40a0      	lsls	r0, r4
 80012ee:	34fc      	adds	r4, #252	; 0xfc
 80012f0:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012f2:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012f6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f8:	3b08      	subs	r3, #8
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <HAL_NVIC_SetPriority+0x5c>)
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	189b      	adds	r3, r3, r2
 8001302:	69da      	ldr	r2, [r3, #28]
 8001304:	43aa      	bics	r2, r5
 8001306:	4311      	orrs	r1, r2
 8001308:	61d9      	str	r1, [r3, #28]
 800130a:	e7e9      	b.n	80012e0 <HAL_NVIC_SetPriority+0x2c>
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	4a09      	ldr	r2, [pc, #36]	; (800133c <HAL_SYSTICK_Config+0x28>)
 8001316:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001318:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131a:	4293      	cmp	r3, r2
 800131c:	d80d      	bhi.n	800133a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800131e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001322:	4808      	ldr	r0, [pc, #32]	; (8001344 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001324:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001326:	6a03      	ldr	r3, [r0, #32]
 8001328:	0609      	lsls	r1, r1, #24
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	430b      	orrs	r3, r1
 8001330:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001332:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001334:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001336:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001338:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800133a:	4770      	bx	lr
 800133c:	00ffffff 	.word	0x00ffffff
 8001340:	e000e010 	.word	0xe000e010
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134a:	680b      	ldr	r3, [r1, #0]
{
 800134c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8001350:	2300      	movs	r3, #0
{
 8001352:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001354:	9a02      	ldr	r2, [sp, #8]
 8001356:	40da      	lsrs	r2, r3
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 800135a:	b005      	add	sp, #20
 800135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800135e:	2201      	movs	r2, #1
 8001360:	409a      	lsls	r2, r3
 8001362:	9203      	str	r2, [sp, #12]
 8001364:	9903      	ldr	r1, [sp, #12]
 8001366:	9a02      	ldr	r2, [sp, #8]
 8001368:	400a      	ands	r2, r1
 800136a:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 800136c:	d100      	bne.n	8001370 <HAL_GPIO_Init+0x28>
 800136e:	e085      	b.n	800147c <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001370:	9a01      	ldr	r2, [sp, #4]
 8001372:	2110      	movs	r1, #16
 8001374:	6852      	ldr	r2, [r2, #4]
 8001376:	0016      	movs	r6, r2
 8001378:	438e      	bics	r6, r1
 800137a:	2e02      	cmp	r6, #2
 800137c:	d10e      	bne.n	800139c <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800137e:	2507      	movs	r5, #7
 8001380:	401d      	ands	r5, r3
 8001382:	00ad      	lsls	r5, r5, #2
 8001384:	3901      	subs	r1, #1
 8001386:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8001388:	08dc      	lsrs	r4, r3, #3
 800138a:	00a4      	lsls	r4, r4, #2
 800138c:	1904      	adds	r4, r0, r4
 800138e:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001390:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001392:	9901      	ldr	r1, [sp, #4]
 8001394:	6909      	ldr	r1, [r1, #16]
 8001396:	40a9      	lsls	r1, r5
 8001398:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 800139a:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800139c:	2403      	movs	r4, #3
 800139e:	005f      	lsls	r7, r3, #1
 80013a0:	40bc      	lsls	r4, r7
 80013a2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80013a4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a6:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a8:	4025      	ands	r5, r4
 80013aa:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ac:	2503      	movs	r5, #3
 80013ae:	4015      	ands	r5, r2
 80013b0:	40bd      	lsls	r5, r7
 80013b2:	4661      	mov	r1, ip
 80013b4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80013b6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b8:	2e01      	cmp	r6, #1
 80013ba:	d80f      	bhi.n	80013dc <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013bc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 80013be:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c0:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013c2:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c4:	40bd      	lsls	r5, r7
 80013c6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80013c8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80013ca:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013cc:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013ce:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d0:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013d2:	2101      	movs	r1, #1
 80013d4:	400d      	ands	r5, r1
 80013d6:	409d      	lsls	r5, r3
 80013d8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80013da:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80013dc:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013de:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013e0:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013e2:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e4:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013e6:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e8:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ea:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80013ec:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ee:	420a      	tst	r2, r1
 80013f0:	d044      	beq.n	800147c <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013f2:	2603      	movs	r6, #3
 80013f4:	240f      	movs	r4, #15
 80013f6:	4922      	ldr	r1, [pc, #136]	; (8001480 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 80013f8:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013fa:	401e      	ands	r6, r3
 80013fc:	00ad      	lsls	r5, r5, #2
 80013fe:	00f6      	lsls	r6, r6, #3
 8001400:	186d      	adds	r5, r5, r1
 8001402:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001404:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8001406:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001408:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800140a:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800140c:	2400      	movs	r4, #0
 800140e:	4288      	cmp	r0, r1
 8001410:	d00c      	beq.n	800142c <HAL_GPIO_Init+0xe4>
 8001412:	491c      	ldr	r1, [pc, #112]	; (8001484 <HAL_GPIO_Init+0x13c>)
 8001414:	3401      	adds	r4, #1
 8001416:	4288      	cmp	r0, r1
 8001418:	d008      	beq.n	800142c <HAL_GPIO_Init+0xe4>
 800141a:	491b      	ldr	r1, [pc, #108]	; (8001488 <HAL_GPIO_Init+0x140>)
 800141c:	3401      	adds	r4, #1
 800141e:	4288      	cmp	r0, r1
 8001420:	d004      	beq.n	800142c <HAL_GPIO_Init+0xe4>
 8001422:	491a      	ldr	r1, [pc, #104]	; (800148c <HAL_GPIO_Init+0x144>)
 8001424:	3403      	adds	r4, #3
 8001426:	4288      	cmp	r0, r1
 8001428:	d100      	bne.n	800142c <HAL_GPIO_Init+0xe4>
 800142a:	3c02      	subs	r4, #2
 800142c:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 800142e:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001430:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8001432:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8001434:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8001436:	4c16      	ldr	r4, [pc, #88]	; (8001490 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8001438:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 800143a:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 800143c:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800143e:	03d1      	lsls	r1, r2, #15
 8001440:	d401      	bmi.n	8001446 <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8001442:	003e      	movs	r6, r7
 8001444:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 8001446:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8001448:	4e12      	ldr	r6, [pc, #72]	; (8001494 <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 800144a:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 800144c:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 800144e:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001450:	0391      	lsls	r1, r2, #14
 8001452:	d401      	bmi.n	8001458 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8001454:	402c      	ands	r4, r5
 8001456:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8001458:	4c09      	ldr	r4, [pc, #36]	; (8001480 <HAL_GPIO_Init+0x138>)
 800145a:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 800145c:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 800145e:	9e00      	ldr	r6, [sp, #0]
 8001460:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001462:	02d1      	lsls	r1, r2, #11
 8001464:	d401      	bmi.n	800146a <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 8001466:	003e      	movs	r6, r7
 8001468:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 800146a:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 800146c:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 800146e:	9f00      	ldr	r7, [sp, #0]
 8001470:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001472:	0292      	lsls	r2, r2, #10
 8001474:	d401      	bmi.n	800147a <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8001476:	402e      	ands	r6, r5
 8001478:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 800147a:	6067      	str	r7, [r4, #4]
    position++;
 800147c:	3301      	adds	r3, #1
 800147e:	e769      	b.n	8001354 <HAL_GPIO_Init+0xc>
 8001480:	40021800 	.word	0x40021800
 8001484:	50000400 	.word	0x50000400
 8001488:	50000800 	.word	0x50000800
 800148c:	50000c00 	.word	0x50000c00
 8001490:	40021804 	.word	0x40021804
 8001494:	40021808 	.word	0x40021808

08001498 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800149a:	2300      	movs	r3, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800149c:	2703      	movs	r7, #3
{
 800149e:	b085      	sub	sp, #20
 80014a0:	9102      	str	r1, [sp, #8]
  while ((GPIO_Pin >> position) != 0x00u)
 80014a2:	9a02      	ldr	r2, [sp, #8]
 80014a4:	40da      	lsrs	r2, r3
 80014a6:	d101      	bne.n	80014ac <HAL_GPIO_DeInit+0x14>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
    }

    position++;
  }
}
 80014a8:	b005      	add	sp, #20
 80014aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80014ac:	2201      	movs	r2, #1
 80014ae:	409a      	lsls	r2, r3
 80014b0:	9902      	ldr	r1, [sp, #8]
 80014b2:	9200      	str	r2, [sp, #0]
 80014b4:	4011      	ands	r1, r2
    if (iocurrent != 0x00u)
 80014b6:	d056      	beq.n	8001566 <HAL_GPIO_DeInit+0xce>
 80014b8:	4c2c      	ldr	r4, [pc, #176]	; (800156c <HAL_GPIO_DeInit+0xd4>)
      tmp = EXTI->EXTICR[position >> 2u];
 80014ba:	089a      	lsrs	r2, r3, #2
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80014bc:	001d      	movs	r5, r3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	1912      	adds	r2, r2, r4
 80014c2:	240f      	movs	r4, #15
 80014c4:	403d      	ands	r5, r7
 80014c6:	00ed      	lsls	r5, r5, #3
 80014c8:	40ac      	lsls	r4, r5
      tmp = EXTI->EXTICR[position >> 2u];
 80014ca:	6e16      	ldr	r6, [r2, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80014cc:	9401      	str	r4, [sp, #4]
 80014ce:	4026      	ands	r6, r4
 80014d0:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80014d2:	26a0      	movs	r6, #160	; 0xa0
 80014d4:	2400      	movs	r4, #0
 80014d6:	05f6      	lsls	r6, r6, #23
 80014d8:	42b0      	cmp	r0, r6
 80014da:	d00f      	beq.n	80014fc <HAL_GPIO_DeInit+0x64>
 80014dc:	4c24      	ldr	r4, [pc, #144]	; (8001570 <HAL_GPIO_DeInit+0xd8>)
 80014de:	46a4      	mov	ip, r4
 80014e0:	2401      	movs	r4, #1
 80014e2:	4560      	cmp	r0, ip
 80014e4:	d00a      	beq.n	80014fc <HAL_GPIO_DeInit+0x64>
 80014e6:	4c23      	ldr	r4, [pc, #140]	; (8001574 <HAL_GPIO_DeInit+0xdc>)
 80014e8:	46a4      	mov	ip, r4
 80014ea:	2402      	movs	r4, #2
 80014ec:	4560      	cmp	r0, ip
 80014ee:	d005      	beq.n	80014fc <HAL_GPIO_DeInit+0x64>
 80014f0:	4c21      	ldr	r4, [pc, #132]	; (8001578 <HAL_GPIO_DeInit+0xe0>)
 80014f2:	46a4      	mov	ip, r4
 80014f4:	003c      	movs	r4, r7
 80014f6:	4560      	cmp	r0, ip
 80014f8:	d000      	beq.n	80014fc <HAL_GPIO_DeInit+0x64>
 80014fa:	2405      	movs	r4, #5
 80014fc:	40ac      	lsls	r4, r5
 80014fe:	9d03      	ldr	r5, [sp, #12]
 8001500:	42a5      	cmp	r5, r4
 8001502:	d113      	bne.n	800152c <HAL_GPIO_DeInit+0x94>
        EXTI->IMR1 &= ~(iocurrent);
 8001504:	43c9      	mvns	r1, r1
 8001506:	4e1d      	ldr	r6, [pc, #116]	; (800157c <HAL_GPIO_DeInit+0xe4>)
 8001508:	4c18      	ldr	r4, [pc, #96]	; (800156c <HAL_GPIO_DeInit+0xd4>)
 800150a:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 800150c:	400d      	ands	r5, r1
 800150e:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 8001510:	4e1b      	ldr	r6, [pc, #108]	; (8001580 <HAL_GPIO_DeInit+0xe8>)
 8001512:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 8001514:	400d      	ands	r5, r1
 8001516:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 8001518:	6825      	ldr	r5, [r4, #0]
 800151a:	400d      	ands	r5, r1
 800151c:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800151e:	6865      	ldr	r5, [r4, #4]
 8001520:	4029      	ands	r1, r5
 8001522:	6061      	str	r1, [r4, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8001524:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001526:	9c01      	ldr	r4, [sp, #4]
 8001528:	43a1      	bics	r1, r4
 800152a:	6611      	str	r1, [r2, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800152c:	003c      	movs	r4, r7
 800152e:	0059      	lsls	r1, r3, #1
 8001530:	408c      	lsls	r4, r1
 8001532:	6802      	ldr	r2, [r0, #0]
 8001534:	0021      	movs	r1, r4
 8001536:	4322      	orrs	r2, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001538:	2407      	movs	r4, #7
 800153a:	260f      	movs	r6, #15
 800153c:	401c      	ands	r4, r3
 800153e:	00a4      	lsls	r4, r4, #2
 8001540:	40a6      	lsls	r6, r4
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001542:	43c9      	mvns	r1, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001544:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001546:	08da      	lsrs	r2, r3, #3
 8001548:	0092      	lsls	r2, r2, #2
 800154a:	1882      	adds	r2, r0, r2
 800154c:	6a15      	ldr	r5, [r2, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800154e:	9c00      	ldr	r4, [sp, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001550:	43b5      	bics	r5, r6
 8001552:	6215      	str	r5, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001554:	6882      	ldr	r2, [r0, #8]
 8001556:	400a      	ands	r2, r1
 8001558:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800155a:	6842      	ldr	r2, [r0, #4]
 800155c:	43a2      	bics	r2, r4
 800155e:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001560:	68c2      	ldr	r2, [r0, #12]
 8001562:	4011      	ands	r1, r2
 8001564:	60c1      	str	r1, [r0, #12]
    position++;
 8001566:	3301      	adds	r3, #1
 8001568:	e79b      	b.n	80014a2 <HAL_GPIO_DeInit+0xa>
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	40021800 	.word	0x40021800
 8001570:	50000400 	.word	0x50000400
 8001574:	50000800 	.word	0x50000800
 8001578:	50000c00 	.word	0x50000c00
 800157c:	40021804 	.word	0x40021804
 8001580:	40021808 	.word	0x40021808

08001584 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001584:	2a00      	cmp	r2, #0
 8001586:	d001      	beq.n	800158c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001588:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800158a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800158c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800158e:	e7fc      	b.n	800158a <HAL_GPIO_WritePin+0x6>

08001590 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001590:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001592:	4c10      	ldr	r4, [pc, #64]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8001594:	4910      	ldr	r1, [pc, #64]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8001596:	6823      	ldr	r3, [r4, #0]
{
 8001598:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800159a:	400b      	ands	r3, r1
 800159c:	4303      	orrs	r3, r0
 800159e:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a0:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80015a2:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d10c      	bne.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	2306      	movs	r3, #6
 80015b2:	4358      	muls	r0, r3
 80015b4:	f7fe fdca 	bl	800014c <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b8:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80015ba:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015bc:	00d2      	lsls	r2, r2, #3
 80015be:	6960      	ldr	r0, [r4, #20]
 80015c0:	4010      	ands	r0, r2
 80015c2:	d100      	bne.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x36>
}
 80015c4:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 80015ca:	3b01      	subs	r3, #1
 80015cc:	e7f7      	b.n	80015be <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80015ce:	2003      	movs	r0, #3
 80015d0:	e7f8      	b.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x34>
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	40007000 	.word	0x40007000
 80015d8:	fffff9ff 	.word	0xfffff9ff
 80015dc:	20000004 	.word	0x20000004
 80015e0:	000f4240 	.word	0x000f4240

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e6:	0004      	movs	r4, r0
 80015e8:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d102      	bne.n	80015f4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 80015f0:	b005      	add	sp, #20
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f4:	6803      	ldr	r3, [r0, #0]
 80015f6:	07db      	lsls	r3, r3, #31
 80015f8:	d410      	bmi.n	800161c <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	079b      	lsls	r3, r3, #30
 80015fe:	d45c      	bmi.n	80016ba <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	071b      	lsls	r3, r3, #28
 8001604:	d500      	bpl.n	8001608 <HAL_RCC_OscConfig+0x24>
 8001606:	e0c2      	b.n	800178e <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	075b      	lsls	r3, r3, #29
 800160c:	d500      	bpl.n	8001610 <HAL_RCC_OscConfig+0x2c>
 800160e:	e0f4      	b.n	80017fa <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001610:	69e2      	ldr	r2, [r4, #28]
 8001612:	2a00      	cmp	r2, #0
 8001614:	d000      	beq.n	8001618 <HAL_RCC_OscConfig+0x34>
 8001616:	e173      	b.n	8001900 <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 8001618:	2000      	movs	r0, #0
 800161a:	e7e9      	b.n	80015f0 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161c:	2238      	movs	r2, #56	; 0x38
 800161e:	4dac      	ldr	r5, [pc, #688]	; (80018d0 <HAL_RCC_OscConfig+0x2ec>)
 8001620:	68ab      	ldr	r3, [r5, #8]
 8001622:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001624:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001626:	2b10      	cmp	r3, #16
 8001628:	d109      	bne.n	800163e <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800162a:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800162c:	0793      	lsls	r3, r2, #30
 800162e:	d108      	bne.n	8001642 <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	039b      	lsls	r3, r3, #14
 8001634:	d5e1      	bpl.n	80015fa <HAL_RCC_OscConfig+0x16>
 8001636:	6863      	ldr	r3, [r4, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1de      	bne.n	80015fa <HAL_RCC_OscConfig+0x16>
 800163c:	e7d7      	b.n	80015ee <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800163e:	2b08      	cmp	r3, #8
 8001640:	d0f6      	beq.n	8001630 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	2280      	movs	r2, #128	; 0x80
 8001644:	6863      	ldr	r3, [r4, #4]
 8001646:	0252      	lsls	r2, r2, #9
 8001648:	4293      	cmp	r3, r2
 800164a:	d111      	bne.n	8001670 <HAL_RCC_OscConfig+0x8c>
 800164c:	682a      	ldr	r2, [r5, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001652:	f7ff fe17 	bl	8001284 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001656:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001658:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165a:	02b6      	lsls	r6, r6, #10
 800165c:	682b      	ldr	r3, [r5, #0]
 800165e:	4233      	tst	r3, r6
 8001660:	d1cb      	bne.n	80015fa <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001662:	f7ff fe0f 	bl	8001284 <HAL_GetTick>
 8001666:	1bc0      	subs	r0, r0, r7
 8001668:	2864      	cmp	r0, #100	; 0x64
 800166a:	d9f7      	bls.n	800165c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800166c:	2003      	movs	r0, #3
 800166e:	e7bf      	b.n	80015f0 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001670:	21a0      	movs	r1, #160	; 0xa0
 8001672:	02c9      	lsls	r1, r1, #11
 8001674:	428b      	cmp	r3, r1
 8001676:	d108      	bne.n	800168a <HAL_RCC_OscConfig+0xa6>
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	6829      	ldr	r1, [r5, #0]
 800167c:	02db      	lsls	r3, r3, #11
 800167e:	430b      	orrs	r3, r1
 8001680:	602b      	str	r3, [r5, #0]
 8001682:	682b      	ldr	r3, [r5, #0]
 8001684:	431a      	orrs	r2, r3
 8001686:	602a      	str	r2, [r5, #0]
 8001688:	e7e3      	b.n	8001652 <HAL_RCC_OscConfig+0x6e>
 800168a:	682a      	ldr	r2, [r5, #0]
 800168c:	4991      	ldr	r1, [pc, #580]	; (80018d4 <HAL_RCC_OscConfig+0x2f0>)
 800168e:	400a      	ands	r2, r1
 8001690:	602a      	str	r2, [r5, #0]
 8001692:	682a      	ldr	r2, [r5, #0]
 8001694:	4990      	ldr	r1, [pc, #576]	; (80018d8 <HAL_RCC_OscConfig+0x2f4>)
 8001696:	400a      	ands	r2, r1
 8001698:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1d9      	bne.n	8001652 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800169e:	f7ff fdf1 	bl	8001284 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80016a4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a6:	02b6      	lsls	r6, r6, #10
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	4233      	tst	r3, r6
 80016ac:	d0a5      	beq.n	80015fa <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ae:	f7ff fde9 	bl	8001284 <HAL_GetTick>
 80016b2:	1bc0      	subs	r0, r0, r7
 80016b4:	2864      	cmp	r0, #100	; 0x64
 80016b6:	d9f7      	bls.n	80016a8 <HAL_RCC_OscConfig+0xc4>
 80016b8:	e7d8      	b.n	800166c <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ba:	2338      	movs	r3, #56	; 0x38
 80016bc:	4d84      	ldr	r5, [pc, #528]	; (80018d0 <HAL_RCC_OscConfig+0x2ec>)
 80016be:	68aa      	ldr	r2, [r5, #8]
 80016c0:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c2:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016c4:	2b10      	cmp	r3, #16
 80016c6:	d129      	bne.n	800171c <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c8:	2103      	movs	r1, #3
 80016ca:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016cc:	2a02      	cmp	r2, #2
 80016ce:	d127      	bne.n	8001720 <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d0:	682a      	ldr	r2, [r5, #0]
 80016d2:	0552      	lsls	r2, r2, #21
 80016d4:	d503      	bpl.n	80016de <HAL_RCC_OscConfig+0xfa>
 80016d6:	68e2      	ldr	r2, [r4, #12]
 80016d8:	2a00      	cmp	r2, #0
 80016da:	d100      	bne.n	80016de <HAL_RCC_OscConfig+0xfa>
 80016dc:	e787      	b.n	80015ee <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	6869      	ldr	r1, [r5, #4]
 80016e0:	6962      	ldr	r2, [r4, #20]
 80016e2:	487e      	ldr	r0, [pc, #504]	; (80018dc <HAL_RCC_OscConfig+0x2f8>)
 80016e4:	0212      	lsls	r2, r2, #8
 80016e6:	4001      	ands	r1, r0
 80016e8:	430a      	orrs	r2, r1
 80016ea:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10d      	bne.n	800170c <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016f0:	682b      	ldr	r3, [r5, #0]
 80016f2:	4a7b      	ldr	r2, [pc, #492]	; (80018e0 <HAL_RCC_OscConfig+0x2fc>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	6922      	ldr	r2, [r4, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	4a79      	ldr	r2, [pc, #484]	; (80018e4 <HAL_RCC_OscConfig+0x300>)
 8001700:	049b      	lsls	r3, r3, #18
 8001702:	0f5b      	lsrs	r3, r3, #29
 8001704:	40da      	lsrs	r2, r3
 8001706:	0013      	movs	r3, r2
 8001708:	4a77      	ldr	r2, [pc, #476]	; (80018e8 <HAL_RCC_OscConfig+0x304>)
 800170a:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800170c:	4b77      	ldr	r3, [pc, #476]	; (80018ec <HAL_RCC_OscConfig+0x308>)
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	f7ff fd70 	bl	80011f4 <HAL_InitTick>
 8001714:	2800      	cmp	r0, #0
 8001716:	d100      	bne.n	800171a <HAL_RCC_OscConfig+0x136>
 8001718:	e772      	b.n	8001600 <HAL_RCC_OscConfig+0x1c>
 800171a:	e768      	b.n	80015ee <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0d7      	beq.n	80016d0 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001720:	68e3      	ldr	r3, [r4, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d020      	beq.n	8001768 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	4a6d      	ldr	r2, [pc, #436]	; (80018e0 <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800172a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800172c:	4013      	ands	r3, r2
 800172e:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001730:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001732:	4313      	orrs	r3, r2
 8001734:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	682a      	ldr	r2, [r5, #0]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4313      	orrs	r3, r2
 800173e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001740:	f7ff fda0 	bl	8001284 <HAL_GetTick>
 8001744:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001746:	682b      	ldr	r3, [r5, #0]
 8001748:	4233      	tst	r3, r6
 800174a:	d007      	beq.n	800175c <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	686a      	ldr	r2, [r5, #4]
 800174e:	6963      	ldr	r3, [r4, #20]
 8001750:	4962      	ldr	r1, [pc, #392]	; (80018dc <HAL_RCC_OscConfig+0x2f8>)
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	400a      	ands	r2, r1
 8001756:	4313      	orrs	r3, r2
 8001758:	606b      	str	r3, [r5, #4]
 800175a:	e751      	b.n	8001600 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fd92 	bl	8001284 <HAL_GetTick>
 8001760:	1bc0      	subs	r0, r0, r7
 8001762:	2802      	cmp	r0, #2
 8001764:	d9ef      	bls.n	8001746 <HAL_RCC_OscConfig+0x162>
 8001766:	e781      	b.n	800166c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8001768:	682b      	ldr	r3, [r5, #0]
 800176a:	4a61      	ldr	r2, [pc, #388]	; (80018f0 <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 800176e:	4013      	ands	r3, r2
 8001770:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001772:	f7ff fd87 	bl	8001284 <HAL_GetTick>
 8001776:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001778:	00f6      	lsls	r6, r6, #3
 800177a:	682b      	ldr	r3, [r5, #0]
 800177c:	4233      	tst	r3, r6
 800177e:	d100      	bne.n	8001782 <HAL_RCC_OscConfig+0x19e>
 8001780:	e73e      	b.n	8001600 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001782:	f7ff fd7f 	bl	8001284 <HAL_GetTick>
 8001786:	1bc0      	subs	r0, r0, r7
 8001788:	2802      	cmp	r0, #2
 800178a:	d9f6      	bls.n	800177a <HAL_RCC_OscConfig+0x196>
 800178c:	e76e      	b.n	800166c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800178e:	2138      	movs	r1, #56	; 0x38
 8001790:	4b4f      	ldr	r3, [pc, #316]	; (80018d0 <HAL_RCC_OscConfig+0x2ec>)
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	001d      	movs	r5, r3
 8001796:	400a      	ands	r2, r1
 8001798:	2a18      	cmp	r2, #24
 800179a:	d108      	bne.n	80017ae <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800179c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179e:	079b      	lsls	r3, r3, #30
 80017a0:	d400      	bmi.n	80017a4 <HAL_RCC_OscConfig+0x1c0>
 80017a2:	e731      	b.n	8001608 <HAL_RCC_OscConfig+0x24>
 80017a4:	69a3      	ldr	r3, [r4, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d000      	beq.n	80017ac <HAL_RCC_OscConfig+0x1c8>
 80017aa:	e72d      	b.n	8001608 <HAL_RCC_OscConfig+0x24>
 80017ac:	e71f      	b.n	80015ee <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ae:	69a2      	ldr	r2, [r4, #24]
 80017b0:	2301      	movs	r3, #1
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	d010      	beq.n	80017d8 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 80017b6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b8:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 80017ba:	4313      	orrs	r3, r2
 80017bc:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80017be:	f7ff fd61 	bl	8001284 <HAL_GetTick>
 80017c2:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80017c6:	4233      	tst	r3, r6
 80017c8:	d000      	beq.n	80017cc <HAL_RCC_OscConfig+0x1e8>
 80017ca:	e71d      	b.n	8001608 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fd5a 	bl	8001284 <HAL_GetTick>
 80017d0:	1bc0      	subs	r0, r0, r7
 80017d2:	2802      	cmp	r0, #2
 80017d4:	d9f6      	bls.n	80017c4 <HAL_RCC_OscConfig+0x1e0>
 80017d6:	e749      	b.n	800166c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 80017d8:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017da:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 80017dc:	439a      	bics	r2, r3
 80017de:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80017e0:	f7ff fd50 	bl	8001284 <HAL_GetTick>
 80017e4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80017e8:	4233      	tst	r3, r6
 80017ea:	d100      	bne.n	80017ee <HAL_RCC_OscConfig+0x20a>
 80017ec:	e70c      	b.n	8001608 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff fd49 	bl	8001284 <HAL_GetTick>
 80017f2:	1bc0      	subs	r0, r0, r7
 80017f4:	2802      	cmp	r0, #2
 80017f6:	d9f6      	bls.n	80017e6 <HAL_RCC_OscConfig+0x202>
 80017f8:	e738      	b.n	800166c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80017fa:	2138      	movs	r1, #56	; 0x38
 80017fc:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <HAL_RCC_OscConfig+0x2ec>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	001d      	movs	r5, r3
 8001802:	400a      	ands	r2, r1
 8001804:	2a20      	cmp	r2, #32
 8001806:	d108      	bne.n	800181a <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180a:	079b      	lsls	r3, r3, #30
 800180c:	d400      	bmi.n	8001810 <HAL_RCC_OscConfig+0x22c>
 800180e:	e6ff      	b.n	8001610 <HAL_RCC_OscConfig+0x2c>
 8001810:	68a3      	ldr	r3, [r4, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d000      	beq.n	8001818 <HAL_RCC_OscConfig+0x234>
 8001816:	e6fb      	b.n	8001610 <HAL_RCC_OscConfig+0x2c>
 8001818:	e6e9      	b.n	80015ee <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	0552      	lsls	r2, r2, #21
 8001820:	4213      	tst	r3, r2
 8001822:	d100      	bne.n	8001826 <HAL_RCC_OscConfig+0x242>
 8001824:	e0ed      	b.n	8001a02 <HAL_RCC_OscConfig+0x41e>
    FlagStatus       pwrclkchanged = RESET;
 8001826:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001828:	2780      	movs	r7, #128	; 0x80
 800182a:	4e32      	ldr	r6, [pc, #200]	; (80018f4 <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 800182c:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182e:	6833      	ldr	r3, [r6, #0]
 8001830:	007f      	lsls	r7, r7, #1
 8001832:	423b      	tst	r3, r7
 8001834:	d015      	beq.n	8001862 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001836:	68a3      	ldr	r3, [r4, #8]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d122      	bne.n	8001882 <HAL_RCC_OscConfig+0x29e>
 800183c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800183e:	4313      	orrs	r3, r2
 8001840:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8001842:	f7ff fd1f 	bl	8001284 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001846:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001848:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800184c:	423b      	tst	r3, r7
 800184e:	d038      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 8001850:	9b00      	ldr	r3, [sp, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d000      	beq.n	8001858 <HAL_RCC_OscConfig+0x274>
 8001856:	e6db      	b.n	8001610 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800185a:	4a27      	ldr	r2, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x314>)
 800185c:	4013      	ands	r3, r2
 800185e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001860:	e6d6      	b.n	8001610 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001862:	6833      	ldr	r3, [r6, #0]
 8001864:	433b      	orrs	r3, r7
 8001866:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001868:	f7ff fd0c 	bl	8001284 <HAL_GetTick>
 800186c:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186e:	6833      	ldr	r3, [r6, #0]
 8001870:	423b      	tst	r3, r7
 8001872:	d1e0      	bne.n	8001836 <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001874:	f7ff fd06 	bl	8001284 <HAL_GetTick>
 8001878:	9b01      	ldr	r3, [sp, #4]
 800187a:	1ac0      	subs	r0, r0, r3
 800187c:	2802      	cmp	r0, #2
 800187e:	d9f6      	bls.n	800186e <HAL_RCC_OscConfig+0x28a>
 8001880:	e6f4      	b.n	800166c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001882:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001884:	2b05      	cmp	r3, #5
 8001886:	d105      	bne.n	8001894 <HAL_RCC_OscConfig+0x2b0>
 8001888:	3b01      	subs	r3, #1
 800188a:	4313      	orrs	r3, r2
 800188c:	65eb      	str	r3, [r5, #92]	; 0x5c
 800188e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001890:	2301      	movs	r3, #1
 8001892:	e7d4      	b.n	800183e <HAL_RCC_OscConfig+0x25a>
 8001894:	2101      	movs	r1, #1
 8001896:	438a      	bics	r2, r1
 8001898:	65ea      	str	r2, [r5, #92]	; 0x5c
 800189a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800189c:	3103      	adds	r1, #3
 800189e:	438a      	bics	r2, r1
 80018a0:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1cd      	bne.n	8001842 <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 80018a6:	f7ff fced 	bl	8001284 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018aa:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80018ac:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ae:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80018b0:	423b      	tst	r3, r7
 80018b2:	d0cd      	beq.n	8001850 <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff fce6 	bl	8001284 <HAL_GetTick>
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_RCC_OscConfig+0x318>)
 80018ba:	1b80      	subs	r0, r0, r6
 80018bc:	4298      	cmp	r0, r3
 80018be:	d9f6      	bls.n	80018ae <HAL_RCC_OscConfig+0x2ca>
 80018c0:	e6d4      	b.n	800166c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff fcdf 	bl	8001284 <HAL_GetTick>
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_RCC_OscConfig+0x318>)
 80018c8:	1b80      	subs	r0, r0, r6
 80018ca:	4298      	cmp	r0, r3
 80018cc:	d9bd      	bls.n	800184a <HAL_RCC_OscConfig+0x266>
 80018ce:	e6cd      	b.n	800166c <HAL_RCC_OscConfig+0x88>
 80018d0:	40021000 	.word	0x40021000
 80018d4:	fffeffff 	.word	0xfffeffff
 80018d8:	fffbffff 	.word	0xfffbffff
 80018dc:	ffff80ff 	.word	0xffff80ff
 80018e0:	ffffc7ff 	.word	0xffffc7ff
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	20000004 	.word	0x20000004
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	fffffeff 	.word	0xfffffeff
 80018f4:	40007000 	.word	0x40007000
 80018f8:	efffffff 	.word	0xefffffff
 80018fc:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001900:	2038      	movs	r0, #56	; 0x38
 8001902:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <HAL_RCC_OscConfig+0x430>)
 8001904:	6899      	ldr	r1, [r3, #8]
 8001906:	001d      	movs	r5, r3
 8001908:	4001      	ands	r1, r0
 800190a:	2910      	cmp	r1, #16
 800190c:	d052      	beq.n	80019b4 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_DISABLE();
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4941      	ldr	r1, [pc, #260]	; (8001a18 <HAL_RCC_OscConfig+0x434>)
 8001912:	400b      	ands	r3, r1
 8001914:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001916:	2a02      	cmp	r2, #2
 8001918:	d135      	bne.n	8001986 <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 800191a:	f7ff fcb3 	bl	8001284 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001920:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001922:	04b6      	lsls	r6, r6, #18
 8001924:	682b      	ldr	r3, [r5, #0]
 8001926:	4233      	tst	r3, r6
 8001928:	d127      	bne.n	800197a <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800192c:	6a23      	ldr	r3, [r4, #32]
 800192e:	68ea      	ldr	r2, [r5, #12]
 8001930:	430b      	orrs	r3, r1
 8001932:	493a      	ldr	r1, [pc, #232]	; (8001a1c <HAL_RCC_OscConfig+0x438>)
 8001934:	400a      	ands	r2, r1
 8001936:	4313      	orrs	r3, r2
 8001938:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800193a:	4313      	orrs	r3, r2
 800193c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800193e:	4313      	orrs	r3, r2
 8001940:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001944:	0212      	lsls	r2, r2, #8
 8001946:	4313      	orrs	r3, r2
 8001948:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	682a      	ldr	r2, [r5, #0]
 800194e:	045b      	lsls	r3, r3, #17
 8001950:	4313      	orrs	r3, r2
 8001952:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	68ea      	ldr	r2, [r5, #12]
 8001958:	055b      	lsls	r3, r3, #21
 800195a:	4313      	orrs	r3, r2
 800195c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800195e:	f7ff fc91 	bl	8001284 <HAL_GetTick>
 8001962:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001964:	04a4      	lsls	r4, r4, #18
 8001966:	682b      	ldr	r3, [r5, #0]
 8001968:	4223      	tst	r3, r4
 800196a:	d000      	beq.n	800196e <HAL_RCC_OscConfig+0x38a>
 800196c:	e654      	b.n	8001618 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff fc89 	bl	8001284 <HAL_GetTick>
 8001972:	1b80      	subs	r0, r0, r6
 8001974:	2802      	cmp	r0, #2
 8001976:	d9f6      	bls.n	8001966 <HAL_RCC_OscConfig+0x382>
 8001978:	e678      	b.n	800166c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff fc83 	bl	8001284 <HAL_GetTick>
 800197e:	1bc0      	subs	r0, r0, r7
 8001980:	2802      	cmp	r0, #2
 8001982:	d9cf      	bls.n	8001924 <HAL_RCC_OscConfig+0x340>
 8001984:	e672      	b.n	800166c <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001986:	2203      	movs	r2, #3
 8001988:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198a:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800198c:	4393      	bics	r3, r2
 800198e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001990:	68eb      	ldr	r3, [r5, #12]
 8001992:	4a23      	ldr	r2, [pc, #140]	; (8001a20 <HAL_RCC_OscConfig+0x43c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001994:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001996:	4013      	ands	r3, r2
 8001998:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800199a:	f7ff fc73 	bl	8001284 <HAL_GetTick>
 800199e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a0:	682b      	ldr	r3, [r5, #0]
 80019a2:	4223      	tst	r3, r4
 80019a4:	d100      	bne.n	80019a8 <HAL_RCC_OscConfig+0x3c4>
 80019a6:	e637      	b.n	8001618 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff fc6c 	bl	8001284 <HAL_GetTick>
 80019ac:	1b80      	subs	r0, r0, r6
 80019ae:	2802      	cmp	r0, #2
 80019b0:	d9f6      	bls.n	80019a0 <HAL_RCC_OscConfig+0x3bc>
 80019b2:	e65b      	b.n	800166c <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b4:	2a01      	cmp	r2, #1
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x3d6>
 80019b8:	e619      	b.n	80015ee <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 80019ba:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019bc:	2303      	movs	r3, #3
 80019be:	6a22      	ldr	r2, [r4, #32]
 80019c0:	4003      	ands	r3, r0
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d000      	beq.n	80019c8 <HAL_RCC_OscConfig+0x3e4>
 80019c6:	e612      	b.n	80015ee <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c8:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019cc:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d000      	beq.n	80019d4 <HAL_RCC_OscConfig+0x3f0>
 80019d2:	e60c      	b.n	80015ee <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d4:	22fe      	movs	r2, #254	; 0xfe
 80019d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019d8:	01d2      	lsls	r2, r2, #7
 80019da:	4002      	ands	r2, r0
 80019dc:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d000      	beq.n	80019e4 <HAL_RCC_OscConfig+0x400>
 80019e2:	e604      	b.n	80015ee <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019e4:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019e8:	039b      	lsls	r3, r3, #14
 80019ea:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d000      	beq.n	80019f2 <HAL_RCC_OscConfig+0x40e>
 80019f0:	e5fd      	b.n	80015ee <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019f4:	0f40      	lsrs	r0, r0, #29
 80019f6:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019f8:	1ac0      	subs	r0, r0, r3
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80019fe:	b2c0      	uxtb	r0, r0
 8001a00:	e5f6      	b.n	80015f0 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a04:	4313      	orrs	r3, r2
 8001a06:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001a08:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	9303      	str	r3, [sp, #12]
 8001a0e:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e709      	b.n	8001828 <HAL_RCC_OscConfig+0x244>
 8001a14:	40021000 	.word	0x40021000
 8001a18:	feffffff 	.word	0xfeffffff
 8001a1c:	1fc1808c 	.word	0x1fc1808c
 8001a20:	effeffff 	.word	0xeffeffff

08001a24 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a24:	2338      	movs	r3, #56	; 0x38
 8001a26:	4a1f      	ldr	r2, [pc, #124]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x80>)
{
 8001a28:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a2a:	6891      	ldr	r1, [r2, #8]
 8001a2c:	0014      	movs	r4, r2
 8001a2e:	4219      	tst	r1, r3
 8001a30:	d108      	bne.n	8001a44 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a32:	2101      	movs	r1, #1
 8001a34:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a36:	481c      	ldr	r0, [pc, #112]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a38:	049b      	lsls	r3, r3, #18
 8001a3a:	0f5b      	lsrs	r3, r3, #29
 8001a3c:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 8001a3e:	f7fe fb85 	bl	800014c <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a44:	6891      	ldr	r1, [r2, #8]
 8001a46:	4019      	ands	r1, r3
 8001a48:	2908      	cmp	r1, #8
 8001a4a:	d025      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a4c:	6891      	ldr	r1, [r2, #8]
 8001a4e:	4019      	ands	r1, r3
 8001a50:	2910      	cmp	r1, #16
 8001a52:	d115      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a54:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a56:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a5c:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a5e:	0649      	lsls	r1, r1, #25
 8001a60:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a62:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a64:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a66:	4015      	ands	r5, r2
    switch (pllsource)
 8001a68:	079b      	lsls	r3, r3, #30
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a6c:	480f      	ldr	r0, [pc, #60]	; (8001aac <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a6e:	f7fe fb6d 	bl	800014c <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a72:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a74:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a76:	0f49      	lsrs	r1, r1, #29
 8001a78:	3101      	adds	r1, #1
 8001a7a:	e7e0      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a7c:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x84>)
 8001a7e:	e7f6      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a80:	6891      	ldr	r1, [r2, #8]
 8001a82:	4019      	ands	r1, r3
 8001a84:	2920      	cmp	r1, #32
 8001a86:	d009      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a88:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8001a8a:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b18      	cmp	r3, #24
 8001a90:	d1d7      	bne.n	8001a42 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8001a92:	20fa      	movs	r0, #250	; 0xfa
 8001a94:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8001a96:	e7d4      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <HAL_RCC_GetSysClockFreq+0x88>)
 8001a9a:	e7d2      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 8001a9c:	2080      	movs	r0, #128	; 0x80
 8001a9e:	0200      	lsls	r0, r0, #8
 8001aa0:	e7cf      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x1e>
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	007a1200 	.word	0x007a1200

08001ab0 <HAL_RCC_ClockConfig>:
{
 8001ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ab2:	0005      	movs	r5, r0
 8001ab4:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001aba:	2001      	movs	r0, #1
}
 8001abc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001abe:	2707      	movs	r7, #7
 8001ac0:	4c4a      	ldr	r4, [pc, #296]	; (8001bec <HAL_RCC_ClockConfig+0x13c>)
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	403b      	ands	r3, r7
 8001ac6:	428b      	cmp	r3, r1
 8001ac8:	d32a      	bcc.n	8001b20 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aca:	6829      	ldr	r1, [r5, #0]
 8001acc:	078b      	lsls	r3, r1, #30
 8001ace:	d43b      	bmi.n	8001b48 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad0:	07cb      	lsls	r3, r1, #31
 8001ad2:	d448      	bmi.n	8001b66 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad4:	2707      	movs	r7, #7
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	403b      	ands	r3, r7
 8001ada:	429e      	cmp	r6, r3
 8001adc:	d20a      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	43bb      	bics	r3, r7
 8001ae2:	4333      	orrs	r3, r6
 8001ae4:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001ae6:	f7ff fbcd 	bl	8001284 <HAL_GetTick>
 8001aea:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	403b      	ands	r3, r7
 8001af0:	429e      	cmp	r6, r3
 8001af2:	d16b      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	682b      	ldr	r3, [r5, #0]
 8001af6:	4c3e      	ldr	r4, [pc, #248]	; (8001bf0 <HAL_RCC_ClockConfig+0x140>)
 8001af8:	075b      	lsls	r3, r3, #29
 8001afa:	d46f      	bmi.n	8001bdc <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001afc:	f7ff ff92 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 8001b00:	68a3      	ldr	r3, [r4, #8]
 8001b02:	4a3c      	ldr	r2, [pc, #240]	; (8001bf4 <HAL_RCC_ClockConfig+0x144>)
 8001b04:	051b      	lsls	r3, r3, #20
 8001b06:	0f1b      	lsrs	r3, r3, #28
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	589b      	ldr	r3, [r3, r2]
 8001b0c:	221f      	movs	r2, #31
 8001b0e:	4013      	ands	r3, r2
 8001b10:	40d8      	lsrs	r0, r3
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_RCC_ClockConfig+0x148>)
 8001b14:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001b16:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_RCC_ClockConfig+0x14c>)
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	f7ff fb6b 	bl	80011f4 <HAL_InitTick>
 8001b1e:	e7cd      	b.n	8001abc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	43bb      	bics	r3, r7
 8001b24:	430b      	orrs	r3, r1
 8001b26:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001b28:	f7ff fbac 	bl	8001284 <HAL_GetTick>
 8001b2c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	403b      	ands	r3, r7
 8001b32:	429e      	cmp	r6, r3
 8001b34:	d0c9      	beq.n	8001aca <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b36:	f7ff fba5 	bl	8001284 <HAL_GetTick>
 8001b3a:	9b01      	ldr	r3, [sp, #4]
 8001b3c:	1ac0      	subs	r0, r0, r3
 8001b3e:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_RCC_ClockConfig+0x150>)
 8001b40:	4298      	cmp	r0, r3
 8001b42:	d9f4      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001b44:	2003      	movs	r0, #3
 8001b46:	e7b9      	b.n	8001abc <HAL_RCC_ClockConfig+0xc>
 8001b48:	4a29      	ldr	r2, [pc, #164]	; (8001bf0 <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4a:	074b      	lsls	r3, r1, #29
 8001b4c:	d504      	bpl.n	8001b58 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b4e:	23e0      	movs	r3, #224	; 0xe0
 8001b50:	6890      	ldr	r0, [r2, #8]
 8001b52:	01db      	lsls	r3, r3, #7
 8001b54:	4303      	orrs	r3, r0
 8001b56:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	6893      	ldr	r3, [r2, #8]
 8001b5a:	482a      	ldr	r0, [pc, #168]	; (8001c04 <HAL_RCC_ClockConfig+0x154>)
 8001b5c:	4003      	ands	r3, r0
 8001b5e:	68a8      	ldr	r0, [r5, #8]
 8001b60:	4303      	orrs	r3, r0
 8001b62:	6093      	str	r3, [r2, #8]
 8001b64:	e7b4      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	686a      	ldr	r2, [r5, #4]
 8001b68:	4f21      	ldr	r7, [pc, #132]	; (8001bf0 <HAL_RCC_ClockConfig+0x140>)
 8001b6a:	2a01      	cmp	r2, #1
 8001b6c:	d119      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	039b      	lsls	r3, r3, #14
 8001b72:	d5a2      	bpl.n	8001aba <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b74:	2107      	movs	r1, #7
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	438b      	bics	r3, r1
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8001b7e:	f7ff fb81 	bl	8001284 <HAL_GetTick>
 8001b82:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b84:	2338      	movs	r3, #56	; 0x38
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	401a      	ands	r2, r3
 8001b8a:	686b      	ldr	r3, [r5, #4]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d0a0      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b92:	f7ff fb77 	bl	8001284 <HAL_GetTick>
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	1ac0      	subs	r0, r0, r3
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_ClockConfig+0x150>)
 8001b9c:	4298      	cmp	r0, r3
 8001b9e:	d9f1      	bls.n	8001b84 <HAL_RCC_ClockConfig+0xd4>
 8001ba0:	e7d0      	b.n	8001b44 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba2:	2a02      	cmp	r2, #2
 8001ba4:	d103      	bne.n	8001bae <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	019b      	lsls	r3, r3, #6
 8001baa:	d4e3      	bmi.n	8001b74 <HAL_RCC_ClockConfig+0xc4>
 8001bac:	e785      	b.n	8001aba <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	d103      	bne.n	8001bba <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	055b      	lsls	r3, r3, #21
 8001bb6:	d4dd      	bmi.n	8001b74 <HAL_RCC_ClockConfig+0xc4>
 8001bb8:	e77f      	b.n	8001aba <HAL_RCC_ClockConfig+0xa>
 8001bba:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001bbc:	2a03      	cmp	r2, #3
 8001bbe:	d103      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc0:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc2:	4219      	tst	r1, r3
 8001bc4:	d1d6      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xc4>
 8001bc6:	e778      	b.n	8001aba <HAL_RCC_ClockConfig+0xa>
 8001bc8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001bca:	e7fa      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bcc:	f7ff fb5a 	bl	8001284 <HAL_GetTick>
 8001bd0:	9b01      	ldr	r3, [sp, #4]
 8001bd2:	1ac0      	subs	r0, r0, r3
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_RCC_ClockConfig+0x150>)
 8001bd6:	4298      	cmp	r0, r3
 8001bd8:	d988      	bls.n	8001aec <HAL_RCC_ClockConfig+0x3c>
 8001bda:	e7b3      	b.n	8001b44 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bdc:	68a3      	ldr	r3, [r4, #8]
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_RCC_ClockConfig+0x158>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	68ea      	ldr	r2, [r5, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60a3      	str	r3, [r4, #8]
 8001be8:	e788      	b.n	8001afc <HAL_RCC_ClockConfig+0x4c>
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08004e88 	.word	0x08004e88
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	2000000c 	.word	0x2000000c
 8001c00:	00001388 	.word	0x00001388
 8001c04:	fffff0ff 	.word	0xfffff0ff
 8001c08:	ffff8fff 	.word	0xffff8fff

08001c0c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c0e:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	045b      	lsls	r3, r3, #17
 8001c14:	0f5b      	lsrs	r3, r3, #29
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	589b      	ldr	r3, [r3, r2]
 8001c1a:	221f      	movs	r2, #31
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c20:	6810      	ldr	r0, [r2, #0]
 8001c22:	40d8      	lsrs	r0, r3
}
 8001c24:	4770      	bx	lr
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08004ec8 	.word	0x08004ec8
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c36:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c38:	682b      	ldr	r3, [r5, #0]
{
 8001c3a:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c3c:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c3e:	039b      	lsls	r3, r3, #14
 8001c40:	d54f      	bpl.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	4c4b      	ldr	r4, [pc, #300]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001c46:	0552      	lsls	r2, r2, #21
 8001c48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001c4a:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4c:	4213      	tst	r3, r2
 8001c4e:	d108      	bne.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c52:	4313      	orrs	r3, r2
 8001c54:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001c56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c58:	4013      	ands	r3, r2
 8001c5a:	9303      	str	r3, [sp, #12]
 8001c5c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c62:	2780      	movs	r7, #128	; 0x80
 8001c64:	4e44      	ldr	r6, [pc, #272]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001c66:	007f      	lsls	r7, r7, #1
 8001c68:	6833      	ldr	r3, [r6, #0]
 8001c6a:	433b      	orrs	r3, r7
 8001c6c:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c6e:	f7ff fb09 	bl	8001284 <HAL_GetTick>
 8001c72:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c74:	6833      	ldr	r3, [r6, #0]
 8001c76:	423b      	tst	r3, r7
 8001c78:	d025      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c7a:	23c0      	movs	r3, #192	; 0xc0
 8001c7c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c82:	d00f      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001c84:	69aa      	ldr	r2, [r5, #24]
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00c      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x148>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c8e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c90:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	0252      	lsls	r2, r2, #9
 8001c96:	430a      	orrs	r2, r1
 8001c98:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c9a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c9c:	4938      	ldr	r1, [pc, #224]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ca2:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ca4:	07db      	lsls	r3, r3, #31
 8001ca6:	d506      	bpl.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff faec 	bl	8001284 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cac:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001cae:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001cb2:	423b      	tst	r3, r7
 8001cb4:	d057      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x132>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001cb8:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x148>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cba:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	69aa      	ldr	r2, [r5, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001cc4:	e006      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc6:	f7ff fadd 	bl	8001284 <HAL_GetTick>
 8001cca:	9b01      	ldr	r3, [sp, #4]
 8001ccc:	1ac0      	subs	r0, r0, r3
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	d9d0      	bls.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8001cd2:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cd4:	9b00      	ldr	r3, [sp, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d103      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cdc:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ce2:	682a      	ldr	r2, [r5, #0]
 8001ce4:	07d3      	lsls	r3, r2, #31
 8001ce6:	d506      	bpl.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ce8:	2403      	movs	r4, #3
 8001cea:	4922      	ldr	r1, [pc, #136]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001cec:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001cee:	43a3      	bics	r3, r4
 8001cf0:	686c      	ldr	r4, [r5, #4]
 8001cf2:	4323      	orrs	r3, r4
 8001cf4:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cf6:	0793      	lsls	r3, r2, #30
 8001cf8:	d506      	bpl.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cfa:	240c      	movs	r4, #12
 8001cfc:	491d      	ldr	r1, [pc, #116]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001cfe:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001d00:	43a3      	bics	r3, r4
 8001d02:	68ac      	ldr	r4, [r5, #8]
 8001d04:	4323      	orrs	r3, r4
 8001d06:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d08:	0653      	lsls	r3, r2, #25
 8001d0a:	d506      	bpl.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d0c:	4919      	ldr	r1, [pc, #100]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d0e:	4c1e      	ldr	r4, [pc, #120]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d10:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001d12:	4023      	ands	r3, r4
 8001d14:	68ec      	ldr	r4, [r5, #12]
 8001d16:	4323      	orrs	r3, r4
 8001d18:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d1a:	0453      	lsls	r3, r2, #17
 8001d1c:	d50f      	bpl.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d1e:	4915      	ldr	r1, [pc, #84]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d20:	696c      	ldr	r4, [r5, #20]
 8001d22:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	4323      	orrs	r3, r4
 8001d2a:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	05db      	lsls	r3, r3, #23
 8001d30:	429c      	cmp	r4, r3
 8001d32:	d104      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	68cc      	ldr	r4, [r1, #12]
 8001d38:	025b      	lsls	r3, r3, #9
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d3e:	0513      	lsls	r3, r2, #20
 8001d40:	d50f      	bpl.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d42:	490c      	ldr	r1, [pc, #48]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d44:	4c11      	ldr	r4, [pc, #68]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001d46:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001d48:	692a      	ldr	r2, [r5, #16]
 8001d4a:	4023      	ands	r3, r4
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	01db      	lsls	r3, r3, #7
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d104      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	68ca      	ldr	r2, [r1, #12]
 8001d5c:	025b      	lsls	r3, r3, #9
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 8001d62:	b005      	add	sp, #20
 8001d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7ff fa8d 	bl	8001284 <HAL_GetTick>
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d6c:	1b80      	subs	r0, r0, r6
 8001d6e:	4298      	cmp	r0, r3
 8001d70:	d99e      	bls.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d72:	e7ae      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	fffffcff 	.word	0xfffffcff
 8001d80:	fffeffff 	.word	0xfffeffff
 8001d84:	efffffff 	.word	0xefffffff
 8001d88:	ffffcfff 	.word	0xffffcfff
 8001d8c:	ffff3fff 	.word	0xffff3fff
 8001d90:	00001388 	.word	0x00001388

08001d94 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001d94:	21a0      	movs	r1, #160	; 0xa0
 8001d96:	6802      	ldr	r2, [r0, #0]
{
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001d9a:	68d3      	ldr	r3, [r2, #12]
{
 8001d9c:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001d9e:	438b      	bics	r3, r1
 8001da0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001da2:	f7ff fa6f 	bl	8001284 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001da6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8001da8:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001daa:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001dac:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	422b      	tst	r3, r5
 8001db4:	d001      	beq.n	8001dba <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001db6:	2000      	movs	r0, #0
}
 8001db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001dba:	f7ff fa63 	bl	8001284 <HAL_GetTick>
 8001dbe:	1b80      	subs	r0, r0, r6
 8001dc0:	42b8      	cmp	r0, r7
 8001dc2:	d9f4      	bls.n	8001dae <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	e7f7      	b.n	8001db8 <HAL_RTC_WaitForSynchro+0x24>

08001dc8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001dca:	2740      	movs	r7, #64	; 0x40
 8001dcc:	6803      	ldr	r3, [r0, #0]
{
 8001dce:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001dd0:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 8001dd2:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001dd4:	423a      	tst	r2, r7
 8001dd6:	d10c      	bne.n	8001df2 <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	68d9      	ldr	r1, [r3, #12]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001de0:	f7ff fa50 	bl	8001284 <HAL_GetTick>
 8001de4:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001de6:	682b      	ldr	r3, [r5, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	423b      	tst	r3, r7
 8001dec:	d101      	bne.n	8001df2 <RTC_EnterInitMode+0x2a>
 8001dee:	2c03      	cmp	r4, #3
 8001df0:	d101      	bne.n	8001df6 <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 8001df2:	0020      	movs	r0, r4
 8001df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001df6:	f7ff fa45 	bl	8001284 <HAL_GetTick>
 8001dfa:	23fa      	movs	r3, #250	; 0xfa
 8001dfc:	1b80      	subs	r0, r0, r6
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4298      	cmp	r0, r3
 8001e02:	d9f0      	bls.n	8001de6 <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e04:	002b      	movs	r3, r5
 8001e06:	2403      	movs	r4, #3
 8001e08:	3329      	adds	r3, #41	; 0x29
 8001e0a:	701c      	strb	r4, [r3, #0]
 8001e0c:	e7eb      	b.n	8001de6 <RTC_EnterInitMode+0x1e>
	...

08001e10 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001e10:	2280      	movs	r2, #128	; 0x80
{
 8001e12:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001e14:	4c0f      	ldr	r4, [pc, #60]	; (8001e54 <RTC_ExitInitMode+0x44>)
{
 8001e16:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001e18:	68e3      	ldr	r3, [r4, #12]
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001e1e:	69a3      	ldr	r3, [r4, #24]
 8001e20:	3a60      	subs	r2, #96	; 0x60
 8001e22:	4213      	tst	r3, r2
 8001e24:	d107      	bne.n	8001e36 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e26:	f7ff ffb5 	bl	8001d94 <HAL_RTC_WaitForSynchro>
 8001e2a:	2800      	cmp	r0, #0
 8001e2c:	d002      	beq.n	8001e34 <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e2e:	2003      	movs	r0, #3
 8001e30:	3529      	adds	r5, #41	; 0x29
 8001e32:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8001e34:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e36:	69a3      	ldr	r3, [r4, #24]
 8001e38:	4393      	bics	r3, r2
 8001e3a:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e3c:	f7ff ffaa 	bl	8001d94 <HAL_RTC_WaitForSynchro>
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d002      	beq.n	8001e4a <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e44:	2003      	movs	r0, #3
 8001e46:	3529      	adds	r5, #41	; 0x29
 8001e48:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e4a:	2320      	movs	r3, #32
 8001e4c:	69a2      	ldr	r2, [r4, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61a3      	str	r3, [r4, #24]
 8001e52:	e7ef      	b.n	8001e34 <RTC_ExitInitMode+0x24>
 8001e54:	40002800 	.word	0x40002800

08001e58 <HAL_RTC_Init>:
{
 8001e58:	b570      	push	{r4, r5, r6, lr}
 8001e5a:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e5c:	2001      	movs	r0, #1
  if(hrtc != NULL)
 8001e5e:	2c00      	cmp	r4, #0
 8001e60:	d047      	beq.n	8001ef2 <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e62:	0025      	movs	r5, r4
 8001e64:	3529      	adds	r5, #41	; 0x29
 8001e66:	782b      	ldrb	r3, [r5, #0]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d108      	bne.n	8001e80 <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 8001e6e:	0022      	movs	r2, r4
 8001e70:	3228      	adds	r2, #40	; 0x28
 8001e72:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001e74:	2388      	movs	r3, #136	; 0x88
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 8001e7a:	0020      	movs	r0, r4
 8001e7c:	f7ff f81e 	bl	8000ebc <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001e80:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e82:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001e84:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e86:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 8001e88:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e8c:	3a77      	subs	r2, #119	; 0x77
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8001e90:	f7ff ff9a 	bl	8001dc8 <RTC_EnterInitMode>
    if(status == HAL_OK)
 8001e94:	2800      	cmp	r0, #0
 8001e96:	d125      	bne.n	8001ee4 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	4916      	ldr	r1, [pc, #88]	; (8001ef4 <HAL_RTC_Init+0x9c>)
 8001e9c:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e9e:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ea4:	68a2      	ldr	r2, [r4, #8]
 8001ea6:	6999      	ldr	r1, [r3, #24]
 8001ea8:	4302      	orrs	r2, r0
 8001eaa:	69e0      	ldr	r0, [r4, #28]
 8001eac:	4302      	orrs	r2, r0
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001eb2:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 8001eb4:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001eb6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001eb8:	68e2      	ldr	r2, [r4, #12]
 8001eba:	6919      	ldr	r1, [r3, #16]
 8001ebc:	0412      	lsls	r2, r2, #16
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8001ec2:	f7ff ffa5 	bl	8001e10 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001eca:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001ecc:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001ece:	6993      	ldr	r3, [r2, #24]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	08db      	lsrs	r3, r3, #3
 8001ed4:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ed8:	6991      	ldr	r1, [r2, #24]
 8001eda:	4333      	orrs	r3, r6
 8001edc:	69a6      	ldr	r6, [r4, #24]
 8001ede:	4333      	orrs	r3, r6
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ee4:	22ff      	movs	r2, #255	; 0xff
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	702b      	strb	r3, [r5, #0]
}
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
 8001ef4:	fb8fffbf 	.word	0xfb8fffbf

08001ef8 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ef8:	21e0      	movs	r1, #224	; 0xe0
 8001efa:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001efc:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	438a      	bics	r2, r1
 8001f02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f04:	2282      	movs	r2, #130	; 0x82
 8001f06:	6841      	ldr	r1, [r0, #4]
 8001f08:	0052      	lsls	r2, r2, #1
 8001f0a:	4291      	cmp	r1, r2
 8001f0c:	d10c      	bne.n	8001f28 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	6882      	ldr	r2, [r0, #8]
 8001f12:	0209      	lsls	r1, r1, #8
 8001f14:	428a      	cmp	r2, r1
 8001f16:	d003      	beq.n	8001f20 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	00c9      	lsls	r1, r1, #3
 8001f1c:	428a      	cmp	r2, r1
 8001f1e:	d103      	bne.n	8001f28 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f20:	2140      	movs	r1, #64	; 0x40
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	438a      	bics	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001f2c:	0189      	lsls	r1, r1, #6
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	d106      	bne.n	8001f40 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8001f32:	6819      	ldr	r1, [r3, #0]
 8001f34:	4c07      	ldr	r4, [pc, #28]	; (8001f54 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8001f36:	4021      	ands	r1, r4
 8001f38:	6019      	str	r1, [r3, #0]
 8001f3a:	6819      	ldr	r1, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f40:	0003      	movs	r3, r0
 8001f42:	2201      	movs	r2, #1
 8001f44:	335d      	adds	r3, #93	; 0x5d
 8001f46:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	305c      	adds	r0, #92	; 0x5c
 8001f4c:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8001f4e:	2003      	movs	r0, #3
 8001f50:	bd10      	pop	{r4, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	ffffdfff 	.word	0xffffdfff

08001f58 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5a:	0004      	movs	r4, r0
 8001f5c:	000d      	movs	r5, r1
 8001f5e:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f60:	2680      	movs	r6, #128	; 0x80
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	6898      	ldr	r0, [r3, #8]
 8001f66:	4030      	ands	r0, r6
 8001f68:	d009      	beq.n	8001f7e <SPI_WaitFlagStateUntilTimeout.constprop.10+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8001f6a:	1c6a      	adds	r2, r5, #1
 8001f6c:	d0fa      	beq.n	8001f64 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001f6e:	f7ff f989 	bl	8001284 <HAL_GetTick>
 8001f72:	1bc0      	subs	r0, r0, r7
 8001f74:	4285      	cmp	r5, r0
 8001f76:	d8f4      	bhi.n	8001f62 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
 8001f78:	0020      	movs	r0, r4
 8001f7a:	f7ff ffbd 	bl	8001ef8 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f80 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f82:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001f84:	0005      	movs	r5, r0
 8001f86:	000c      	movs	r4, r1
 8001f88:	0016      	movs	r6, r2
 8001f8a:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f8c:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8001f8e:	682b      	ldr	r3, [r5, #0]
 8001f90:	6898      	ldr	r0, [r3, #8]
 8001f92:	4020      	ands	r0, r4
 8001f94:	d00d      	beq.n	8001fb2 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f96:	42bc      	cmp	r4, r7
 8001f98:	d100      	bne.n	8001f9c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001f9a:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001f9c:	1c72      	adds	r2, r6, #1
 8001f9e:	d0f7      	beq.n	8001f90 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001fa0:	f7ff f970 	bl	8001284 <HAL_GetTick>
 8001fa4:	9b01      	ldr	r3, [sp, #4]
 8001fa6:	1ac0      	subs	r0, r0, r3
 8001fa8:	4286      	cmp	r6, r0
 8001faa:	d8f0      	bhi.n	8001f8e <SPI_WaitFifoStateUntilTimeout.constprop.11+0xe>
 8001fac:	0028      	movs	r0, r5
 8001fae:	f7ff ffa3 	bl	8001ef8 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001fb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fb6:	0013      	movs	r3, r2
{
 8001fb8:	000d      	movs	r5, r1
 8001fba:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fbc:	000a      	movs	r2, r1
 8001fbe:	21c0      	movs	r1, #192	; 0xc0
 8001fc0:	0149      	lsls	r1, r1, #5
{
 8001fc2:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fc4:	f7ff ffdc 	bl	8001f80 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d005      	beq.n	8001fd8 <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fcc:	2320      	movs	r3, #32
 8001fce:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001fd0:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	6623      	str	r3, [r4, #96]	; 0x60
 8001fd6:	e00f      	b.n	8001ff8 <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd8:	0032      	movs	r2, r6
 8001fda:	0029      	movs	r1, r5
 8001fdc:	0020      	movs	r0, r4
 8001fde:	f7ff ffbb 	bl	8001f58 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	d1f2      	bne.n	8001fcc <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fe6:	21c0      	movs	r1, #192	; 0xc0
 8001fe8:	0033      	movs	r3, r6
 8001fea:	002a      	movs	r2, r5
 8001fec:	00c9      	lsls	r1, r1, #3
 8001fee:	0020      	movs	r0, r4
 8001ff0:	f7ff ffc6 	bl	8001f80 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	d1e9      	bne.n	8001fcc <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001ff8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ffc <HAL_SPI_Init>:
{
 8001ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002002:	2c00      	cmp	r4, #0
 8002004:	d04b      	beq.n	800209e <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002006:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002008:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800200a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800200c:	355d      	adds	r5, #93	; 0x5d
 800200e:	782b      	ldrb	r3, [r5, #0]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8002016:	0022      	movs	r2, r4
 8002018:	325c      	adds	r2, #92	; 0x5c
 800201a:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 800201c:	0020      	movs	r0, r4
 800201e:	f7fe ff67 	bl	8000ef0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002022:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002028:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800202a:	680b      	ldr	r3, [r1, #0]
 800202c:	2000      	movs	r0, #0
 800202e:	4393      	bics	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
 8002032:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002034:	68e2      	ldr	r2, [r4, #12]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	429a      	cmp	r2, r3
 800203a:	d931      	bls.n	80020a0 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800203c:	26f0      	movs	r6, #240	; 0xf0
 800203e:	0136      	lsls	r6, r6, #4
 8002040:	42b2      	cmp	r2, r6
 8002042:	d133      	bne.n	80020ac <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002044:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002046:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002048:	2800      	cmp	r0, #0
 800204a:	d103      	bne.n	8002054 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800204c:	429a      	cmp	r2, r3
 800204e:	d92f      	bls.n	80020b0 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002050:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002052:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002054:	68a7      	ldr	r7, [r4, #8]
 8002056:	6863      	ldr	r3, [r4, #4]
 8002058:	69a0      	ldr	r0, [r4, #24]
 800205a:	433b      	orrs	r3, r7
 800205c:	6927      	ldr	r7, [r4, #16]
 800205e:	433b      	orrs	r3, r7
 8002060:	6967      	ldr	r7, [r4, #20]
 8002062:	433b      	orrs	r3, r7
 8002064:	69e7      	ldr	r7, [r4, #28]
 8002066:	433b      	orrs	r3, r7
 8002068:	6a27      	ldr	r7, [r4, #32]
 800206a:	433b      	orrs	r3, r7
 800206c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800206e:	433b      	orrs	r3, r7
 8002070:	2780      	movs	r7, #128	; 0x80
 8002072:	00bf      	lsls	r7, r7, #2
 8002074:	4007      	ands	r7, r0
 8002076:	433b      	orrs	r3, r7
 8002078:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800207a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800207c:	0c00      	lsrs	r0, r0, #16
 800207e:	431a      	orrs	r2, r3
 8002080:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002082:	431a      	orrs	r2, r3
 8002084:	2304      	movs	r3, #4
 8002086:	4018      	ands	r0, r3
 8002088:	4310      	orrs	r0, r2
 800208a:	4306      	orrs	r6, r0
 800208c:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800208e:	69cb      	ldr	r3, [r1, #28]
 8002090:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002092:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002094:	4013      	ands	r3, r2
 8002096:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002098:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800209a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800209c:	702b      	strb	r3, [r5, #0]
}
 800209e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020a0:	2680      	movs	r6, #128	; 0x80
 80020a2:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d0ce      	beq.n	8002046 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a8:	62a0      	str	r0, [r4, #40]	; 0x28
 80020aa:	e7cc      	b.n	8002046 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020ac:	0006      	movs	r6, r0
 80020ae:	e7fb      	b.n	80020a8 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e7ce      	b.n	8002052 <HAL_SPI_Init+0x56>
 80020b4:	fffff7ff 	.word	0xfffff7ff

080020b8 <HAL_SPI_DeInit>:
{
 80020b8:	b570      	push	{r4, r5, r6, lr}
 80020ba:	0004      	movs	r4, r0
    return HAL_ERROR;
 80020bc:	2001      	movs	r0, #1
  if (hspi == NULL)
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d010      	beq.n	80020e4 <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 80020c2:	0025      	movs	r5, r4
 80020c4:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80020c6:	2140      	movs	r1, #64	; 0x40
 80020c8:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80020ca:	355d      	adds	r5, #93	; 0x5d
 80020cc:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80020ce:	6813      	ldr	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80020d0:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 80020d2:	438b      	bics	r3, r1
 80020d4:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80020d6:	f7fe ff39 	bl	8000f4c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020da:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 80020dc:	345c      	adds	r4, #92	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020de:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 80020e0:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 80020e2:	7020      	strb	r0, [r4, #0]
}
 80020e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080020e8 <HAL_SPI_TransmitReceive>:
{
 80020e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020ea:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80020ec:	0003      	movs	r3, r0
{
 80020ee:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 80020f0:	335c      	adds	r3, #92	; 0x5c
 80020f2:	781a      	ldrb	r2, [r3, #0]
{
 80020f4:	0004      	movs	r4, r0
 80020f6:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 80020f8:	2502      	movs	r5, #2
 80020fa:	2a01      	cmp	r2, #1
 80020fc:	d100      	bne.n	8002100 <HAL_SPI_TransmitReceive+0x18>
 80020fe:	e0ac      	b.n	800225a <HAL_SPI_TransmitReceive+0x172>
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002104:	f7ff f8be 	bl	8001284 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002108:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 800210a:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 800210c:	335d      	adds	r3, #93	; 0x5d
 800210e:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002110:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002112:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002114:	2b01      	cmp	r3, #1
 8002116:	d00b      	beq.n	8002130 <HAL_SPI_TransmitReceive+0x48>
 8002118:	2282      	movs	r2, #130	; 0x82
 800211a:	0052      	lsls	r2, r2, #1
 800211c:	4291      	cmp	r1, r2
 800211e:	d000      	beq.n	8002122 <HAL_SPI_TransmitReceive+0x3a>
 8002120:	e094      	b.n	800224c <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002122:	68a2      	ldr	r2, [r4, #8]
 8002124:	2a00      	cmp	r2, #0
 8002126:	d000      	beq.n	800212a <HAL_SPI_TransmitReceive+0x42>
 8002128:	e090      	b.n	800224c <HAL_SPI_TransmitReceive+0x164>
 800212a:	2b04      	cmp	r3, #4
 800212c:	d000      	beq.n	8002130 <HAL_SPI_TransmitReceive+0x48>
 800212e:	e08d      	b.n	800224c <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 8002130:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002132:	2f00      	cmp	r7, #0
 8002134:	d100      	bne.n	8002138 <HAL_SPI_TransmitReceive+0x50>
 8002136:	e089      	b.n	800224c <HAL_SPI_TransmitReceive+0x164>
 8002138:	9b01      	ldr	r3, [sp, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d100      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x58>
 800213e:	e085      	b.n	800224c <HAL_SPI_TransmitReceive+0x164>
 8002140:	2e00      	cmp	r6, #0
 8002142:	d100      	bne.n	8002146 <HAL_SPI_TransmitReceive+0x5e>
 8002144:	e082      	b.n	800224c <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002146:	0023      	movs	r3, r4
 8002148:	335d      	adds	r3, #93	; 0x5d
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	2a04      	cmp	r2, #4
 800214e:	d001      	beq.n	8002154 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002150:	2205      	movs	r2, #5
 8002152:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002154:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002156:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002158:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800215a:	0022      	movs	r2, r4
 800215c:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800215e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8002160:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002162:	1da2      	adds	r2, r4, #6
 8002164:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002166:	22e0      	movs	r2, #224	; 0xe0
 8002168:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 800216a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800216c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800216e:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002170:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002172:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002174:	00d2      	lsls	r2, r2, #3
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	4290      	cmp	r0, r2
 800217a:	d801      	bhi.n	8002180 <HAL_SPI_TransmitReceive+0x98>
 800217c:	2e01      	cmp	r6, #1
 800217e:	d931      	bls.n	80021e4 <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4d71      	ldr	r5, [pc, #452]	; (8002348 <HAL_SPI_TransmitReceive+0x260>)
 8002184:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002186:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002188:	2240      	movs	r2, #64	; 0x40
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	681d      	ldr	r5, [r3, #0]
 800218e:	4215      	tst	r5, r2
 8002190:	d102      	bne.n	8002198 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8002192:	681d      	ldr	r5, [r3, #0]
 8002194:	432a      	orrs	r2, r5
 8002196:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002198:	22e0      	movs	r2, #224	; 0xe0
 800219a:	00d2      	lsls	r2, r2, #3
 800219c:	4290      	cmp	r0, r2
 800219e:	d95e      	bls.n	800225e <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a0:	2900      	cmp	r1, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0xc0>
 80021a4:	2e01      	cmp	r6, #1
 80021a6:	d107      	bne.n	80021b8 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021a8:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021aa:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ac:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80021ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b0:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80021b8:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021ba:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021bc:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d114      	bne.n	80021ee <HAL_SPI_TransmitReceive+0x106>
 80021c4:	0023      	movs	r3, r4
 80021c6:	3308      	adds	r3, #8
 80021c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10f      	bne.n	80021ee <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ce:	9a00      	ldr	r2, [sp, #0]
 80021d0:	9908      	ldr	r1, [sp, #32]
 80021d2:	0020      	movs	r0, r4
 80021d4:	f7ff feee 	bl	8001fb4 <SPI_EndRxTxTransaction>
 80021d8:	1e05      	subs	r5, r0, #0
 80021da:	d037      	beq.n	800224c <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021dc:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80021de:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021e0:	6623      	str	r3, [r4, #96]	; 0x60
 80021e2:	e033      	b.n	800224c <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	685d      	ldr	r5, [r3, #4]
 80021e8:	0152      	lsls	r2, r2, #5
 80021ea:	432a      	orrs	r2, r5
 80021ec:	e7cb      	b.n	8002186 <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021ee:	6822      	ldr	r2, [r4, #0]
 80021f0:	6893      	ldr	r3, [r2, #8]
 80021f2:	423b      	tst	r3, r7
 80021f4:	d00e      	beq.n	8002214 <HAL_SPI_TransmitReceive+0x12c>
 80021f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00b      	beq.n	8002214 <HAL_SPI_TransmitReceive+0x12c>
 80021fc:	2d01      	cmp	r5, #1
 80021fe:	d109      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 8002200:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002204:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002206:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002208:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800220a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800220c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800220e:	3b01      	subs	r3, #1
 8002210:	b29b      	uxth	r3, r3
 8002212:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002214:	6893      	ldr	r3, [r2, #8]
 8002216:	4233      	tst	r3, r6
 8002218:	d00e      	beq.n	8002238 <HAL_SPI_TransmitReceive+0x150>
 800221a:	0021      	movs	r1, r4
 800221c:	3108      	adds	r1, #8
 800221e:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8002224:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002228:	68d2      	ldr	r2, [r2, #12]
 800222a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800222c:	3302      	adds	r3, #2
 800222e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002230:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8002232:	3b01      	subs	r3, #1
 8002234:	b29b      	uxth	r3, r3
 8002236:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002238:	f7ff f824 	bl	8001284 <HAL_GetTick>
 800223c:	9b00      	ldr	r3, [sp, #0]
 800223e:	1ac0      	subs	r0, r0, r3
 8002240:	9b08      	ldr	r3, [sp, #32]
 8002242:	4283      	cmp	r3, r0
 8002244:	d8bb      	bhi.n	80021be <HAL_SPI_TransmitReceive+0xd6>
 8002246:	3301      	adds	r3, #1
 8002248:	d0b9      	beq.n	80021be <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 800224a:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800224c:	0023      	movs	r3, r4
 800224e:	2201      	movs	r2, #1
 8002250:	335d      	adds	r3, #93	; 0x5d
 8002252:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8002254:	2300      	movs	r3, #0
 8002256:	345c      	adds	r4, #92	; 0x5c
 8002258:	7023      	strb	r3, [r4, #0]
}
 800225a:	0028      	movs	r0, r5
 800225c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800225e:	2900      	cmp	r1, #0
 8002260:	d001      	beq.n	8002266 <HAL_SPI_TransmitReceive+0x17e>
 8002262:	2e01      	cmp	r6, #1
 8002264:	d10a      	bne.n	800227c <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 8002266:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002268:	2a01      	cmp	r2, #1
 800226a:	d951      	bls.n	8002310 <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800226c:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800226e:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002270:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8002272:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002274:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002276:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8002278:	b29b      	uxth	r3, r3
 800227a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800227c:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800227e:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002280:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002282:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_SPI_TransmitReceive+0x1ac>
 8002288:	0023      	movs	r3, r4
 800228a:	3308      	adds	r3, #8
 800228c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228e:	2b00      	cmp	r3, #0
 8002290:	d100      	bne.n	8002294 <HAL_SPI_TransmitReceive+0x1ac>
 8002292:	e79c      	b.n	80021ce <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002294:	6822      	ldr	r2, [r4, #0]
 8002296:	6893      	ldr	r3, [r2, #8]
 8002298:	423b      	tst	r3, r7
 800229a:	d011      	beq.n	80022c0 <HAL_SPI_TransmitReceive+0x1d8>
 800229c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00e      	beq.n	80022c0 <HAL_SPI_TransmitReceive+0x1d8>
 80022a2:	2d01      	cmp	r5, #1
 80022a4:	d10c      	bne.n	80022c0 <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 80022a6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80022a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022aa:	2901      	cmp	r1, #1
 80022ac:	d938      	bls.n	8002320 <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022ae:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b0:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b2:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80022b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022b8:	3b02      	subs	r3, #2
        txallowed = 0U;
 80022ba:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 80022bc:	b29b      	uxth	r3, r3
 80022be:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022c0:	6821      	ldr	r1, [r4, #0]
 80022c2:	688b      	ldr	r3, [r1, #8]
 80022c4:	4233      	tst	r3, r6
 80022c6:	d019      	beq.n	80022fc <HAL_SPI_TransmitReceive+0x214>
 80022c8:	0023      	movs	r3, r4
 80022ca:	3308      	adds	r3, #8
 80022cc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80022ce:	2a00      	cmp	r2, #0
 80022d0:	d014      	beq.n	80022fc <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 80022d2:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 80022d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80022d6:	2801      	cmp	r0, #1
 80022d8:	d92a      	bls.n	8002330 <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022da:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 80022dc:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022de:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80022e0:	3202      	adds	r2, #2
 80022e2:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80022e4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80022e6:	3a02      	subs	r2, #2
 80022e8:	b292      	uxth	r2, r2
 80022ea:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 80022ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d804      	bhi.n	80022fc <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	684a      	ldr	r2, [r1, #4]
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022fc:	f7fe ffc2 	bl	8001284 <HAL_GetTick>
 8002300:	9b00      	ldr	r3, [sp, #0]
 8002302:	1ac0      	subs	r0, r0, r3
 8002304:	9b08      	ldr	r3, [sp, #32]
 8002306:	4283      	cmp	r3, r0
 8002308:	d8bb      	bhi.n	8002282 <HAL_SPI_TransmitReceive+0x19a>
 800230a:	3301      	adds	r3, #1
 800230c:	d0b9      	beq.n	8002282 <HAL_SPI_TransmitReceive+0x19a>
 800230e:	e79c      	b.n	800224a <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002310:	783a      	ldrb	r2, [r7, #0]
 8002312:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002316:	3301      	adds	r3, #1
 8002318:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800231a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800231c:	3b01      	subs	r3, #1
 800231e:	e7ab      	b.n	8002278 <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002324:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002326:	3301      	adds	r3, #1
 8002328:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800232a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800232c:	3b01      	subs	r3, #1
 800232e:	e7c4      	b.n	80022ba <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002330:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 8002332:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002334:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8002336:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002338:	3201      	adds	r2, #1
 800233a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800233c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800233e:	3a01      	subs	r2, #1
 8002340:	b292      	uxth	r2, r2
 8002342:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002344:	e7da      	b.n	80022fc <HAL_SPI_TransmitReceive+0x214>
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	ffffefff 	.word	0xffffefff

0800234c <HAL_SPI_GetState>:
  return hspi->State;
 800234c:	305d      	adds	r0, #93	; 0x5d
 800234e:	7800      	ldrb	r0, [r0, #0]
 8002350:	b2c0      	uxtb	r0, r0
}
 8002352:	4770      	bx	lr

08002354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002358:	6902      	ldr	r2, [r0, #16]
 800235a:	6883      	ldr	r3, [r0, #8]
 800235c:	69c1      	ldr	r1, [r0, #28]
 800235e:	4313      	orrs	r3, r2
 8002360:	6942      	ldr	r2, [r0, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002362:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002364:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002366:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002368:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800236a:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 800236c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800236e:	4d9f      	ldr	r5, [pc, #636]	; (80025ec <UART_SetConfig+0x298>)
 8002370:	4028      	ands	r0, r5
 8002372:	4303      	orrs	r3, r0
 8002374:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002376:	6853      	ldr	r3, [r2, #4]
 8002378:	489d      	ldr	r0, [pc, #628]	; (80025f0 <UART_SetConfig+0x29c>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800237a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800237c:	4003      	ands	r3, r0
 800237e:	68e0      	ldr	r0, [r4, #12]
 8002380:	4303      	orrs	r3, r0
 8002382:	6053      	str	r3, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8002384:	69a3      	ldr	r3, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002386:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8002388:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800238a:	4d9a      	ldr	r5, [pc, #616]	; (80025f4 <UART_SetConfig+0x2a0>)
 800238c:	4028      	ands	r0, r5

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800238e:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002390:	4303      	orrs	r3, r0
 8002392:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002394:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8002396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002398:	43a8      	bics	r0, r5
 800239a:	4318      	orrs	r0, r3
 800239c:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800239e:	4896      	ldr	r0, [pc, #600]	; (80025f8 <UART_SetConfig+0x2a4>)
 80023a0:	4282      	cmp	r2, r0
 80023a2:	d113      	bne.n	80023cc <UART_SetConfig+0x78>
 80023a4:	2003      	movs	r0, #3
 80023a6:	4a95      	ldr	r2, [pc, #596]	; (80025fc <UART_SetConfig+0x2a8>)
 80023a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80023aa:	4002      	ands	r2, r0
 80023ac:	4894      	ldr	r0, [pc, #592]	; (8002600 <UART_SetConfig+0x2ac>)
 80023ae:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	0212      	lsls	r2, r2, #8
 80023b4:	4291      	cmp	r1, r2
 80023b6:	d100      	bne.n	80023ba <UART_SetConfig+0x66>
 80023b8:	e1b7      	b.n	800272a <UART_SetConfig+0x3d6>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80023ba:	2808      	cmp	r0, #8
 80023bc:	d817      	bhi.n	80023ee <UART_SetConfig+0x9a>
 80023be:	f7fd feb1 	bl	8000124 <__gnu_thumb1_case_uqi>
 80023c2:	1684      	.short	0x1684
 80023c4:	16f216be 	.word	0x16f216be
 80023c8:	1616      	.short	0x1616
 80023ca:	f5          	.byte	0xf5
 80023cb:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023cc:	488d      	ldr	r0, [pc, #564]	; (8002604 <UART_SetConfig+0x2b0>)
 80023ce:	4282      	cmp	r2, r0
 80023d0:	d105      	bne.n	80023de <UART_SetConfig+0x8a>
 80023d2:	200c      	movs	r0, #12
 80023d4:	4a89      	ldr	r2, [pc, #548]	; (80025fc <UART_SetConfig+0x2a8>)
 80023d6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80023d8:	4002      	ands	r2, r0
 80023da:	488b      	ldr	r0, [pc, #556]	; (8002608 <UART_SetConfig+0x2b4>)
 80023dc:	e7e7      	b.n	80023ae <UART_SetConfig+0x5a>
 80023de:	4b8b      	ldr	r3, [pc, #556]	; (800260c <UART_SetConfig+0x2b8>)
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d100      	bne.n	80023e6 <UART_SetConfig+0x92>
 80023e4:	e150      	b.n	8002688 <UART_SetConfig+0x334>
 80023e6:	4b8a      	ldr	r3, [pc, #552]	; (8002610 <UART_SetConfig+0x2bc>)
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d100      	bne.n	80023ee <UART_SetConfig+0x9a>
 80023ec:	e14c      	b.n	8002688 <UART_SetConfig+0x334>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 80023ee:	2001      	movs	r0, #1
 80023f0:	e191      	b.n	8002716 <UART_SetConfig+0x3c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d02f      	beq.n	8002456 <UART_SetConfig+0x102>
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d019      	beq.n	800242e <UART_SetConfig+0xda>
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d019      	beq.n	8002432 <UART_SetConfig+0xde>
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d019      	beq.n	8002436 <UART_SetConfig+0xe2>
 8002402:	2b04      	cmp	r3, #4
 8002404:	d019      	beq.n	800243a <UART_SetConfig+0xe6>
 8002406:	2b05      	cmp	r3, #5
 8002408:	d019      	beq.n	800243e <UART_SetConfig+0xea>
 800240a:	2b06      	cmp	r3, #6
 800240c:	d019      	beq.n	8002442 <UART_SetConfig+0xee>
 800240e:	2b07      	cmp	r3, #7
 8002410:	d019      	beq.n	8002446 <UART_SetConfig+0xf2>
 8002412:	2b08      	cmp	r3, #8
 8002414:	d019      	beq.n	800244a <UART_SetConfig+0xf6>
 8002416:	2b09      	cmp	r3, #9
 8002418:	d019      	beq.n	800244e <UART_SetConfig+0xfa>
 800241a:	2b0a      	cmp	r3, #10
 800241c:	d019      	beq.n	8002452 <UART_SetConfig+0xfe>
 800241e:	2b0b      	cmp	r3, #11
 8002420:	d119      	bne.n	8002456 <UART_SetConfig+0x102>
 8002422:	487c      	ldr	r0, [pc, #496]	; (8002614 <UART_SetConfig+0x2c0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002424:	6863      	ldr	r3, [r4, #4]
 8002426:	6861      	ldr	r1, [r4, #4]
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	1818      	adds	r0, r3, r0
 800242c:	e160      	b.n	80026f0 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800242e:	487a      	ldr	r0, [pc, #488]	; (8002618 <UART_SetConfig+0x2c4>)
 8002430:	e7f8      	b.n	8002424 <UART_SetConfig+0xd0>
 8002432:	487a      	ldr	r0, [pc, #488]	; (800261c <UART_SetConfig+0x2c8>)
 8002434:	e7f6      	b.n	8002424 <UART_SetConfig+0xd0>
 8002436:	487a      	ldr	r0, [pc, #488]	; (8002620 <UART_SetConfig+0x2cc>)
 8002438:	e7f4      	b.n	8002424 <UART_SetConfig+0xd0>
 800243a:	487a      	ldr	r0, [pc, #488]	; (8002624 <UART_SetConfig+0x2d0>)
 800243c:	e7f2      	b.n	8002424 <UART_SetConfig+0xd0>
 800243e:	487a      	ldr	r0, [pc, #488]	; (8002628 <UART_SetConfig+0x2d4>)
 8002440:	e7f0      	b.n	8002424 <UART_SetConfig+0xd0>
 8002442:	487a      	ldr	r0, [pc, #488]	; (800262c <UART_SetConfig+0x2d8>)
 8002444:	e7ee      	b.n	8002424 <UART_SetConfig+0xd0>
 8002446:	487a      	ldr	r0, [pc, #488]	; (8002630 <UART_SetConfig+0x2dc>)
 8002448:	e7ec      	b.n	8002424 <UART_SetConfig+0xd0>
 800244a:	487a      	ldr	r0, [pc, #488]	; (8002634 <UART_SetConfig+0x2e0>)
 800244c:	e7ea      	b.n	8002424 <UART_SetConfig+0xd0>
 800244e:	487a      	ldr	r0, [pc, #488]	; (8002638 <UART_SetConfig+0x2e4>)
 8002450:	e7e8      	b.n	8002424 <UART_SetConfig+0xd0>
 8002452:	487a      	ldr	r0, [pc, #488]	; (800263c <UART_SetConfig+0x2e8>)
 8002454:	e7e6      	b.n	8002424 <UART_SetConfig+0xd0>
 8002456:	487a      	ldr	r0, [pc, #488]	; (8002640 <UART_SetConfig+0x2ec>)
 8002458:	e7e4      	b.n	8002424 <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetSysClockFreq();
 800245a:	f7ff fae3 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 800245e:	e11a      	b.n	8002696 <UART_SetConfig+0x342>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002460:	2b00      	cmp	r3, #0
 8002462:	d018      	beq.n	8002496 <UART_SetConfig+0x142>
 8002464:	2b01      	cmp	r3, #1
 8002466:	d019      	beq.n	800249c <UART_SetConfig+0x148>
 8002468:	2b02      	cmp	r3, #2
 800246a:	d01a      	beq.n	80024a2 <UART_SetConfig+0x14e>
 800246c:	2b03      	cmp	r3, #3
 800246e:	d01b      	beq.n	80024a8 <UART_SetConfig+0x154>
 8002470:	2b04      	cmp	r3, #4
 8002472:	d01b      	beq.n	80024ac <UART_SetConfig+0x158>
 8002474:	2b05      	cmp	r3, #5
 8002476:	d01c      	beq.n	80024b2 <UART_SetConfig+0x15e>
 8002478:	2b06      	cmp	r3, #6
 800247a:	d01c      	beq.n	80024b6 <UART_SetConfig+0x162>
 800247c:	2080      	movs	r0, #128	; 0x80
 800247e:	2b07      	cmp	r3, #7
 8002480:	d01b      	beq.n	80024ba <UART_SetConfig+0x166>
 8002482:	2b08      	cmp	r3, #8
 8002484:	d01b      	beq.n	80024be <UART_SetConfig+0x16a>
 8002486:	2b09      	cmp	r3, #9
 8002488:	d01b      	beq.n	80024c2 <UART_SetConfig+0x16e>
 800248a:	2b0a      	cmp	r3, #10
 800248c:	d01b      	beq.n	80024c6 <UART_SetConfig+0x172>
 800248e:	2b0b      	cmp	r3, #11
 8002490:	d102      	bne.n	8002498 <UART_SetConfig+0x144>
 8002492:	0040      	lsls	r0, r0, #1
 8002494:	e7c6      	b.n	8002424 <UART_SetConfig+0xd0>
 8002496:	2080      	movs	r0, #128	; 0x80
 8002498:	0240      	lsls	r0, r0, #9
 800249a:	e7c3      	b.n	8002424 <UART_SetConfig+0xd0>
 800249c:	2080      	movs	r0, #128	; 0x80
 800249e:	0200      	lsls	r0, r0, #8
 80024a0:	e7c0      	b.n	8002424 <UART_SetConfig+0xd0>
 80024a2:	2080      	movs	r0, #128	; 0x80
 80024a4:	01c0      	lsls	r0, r0, #7
 80024a6:	e7bd      	b.n	8002424 <UART_SetConfig+0xd0>
 80024a8:	4866      	ldr	r0, [pc, #408]	; (8002644 <UART_SetConfig+0x2f0>)
 80024aa:	e7bb      	b.n	8002424 <UART_SetConfig+0xd0>
 80024ac:	2080      	movs	r0, #128	; 0x80
 80024ae:	0180      	lsls	r0, r0, #6
 80024b0:	e7b8      	b.n	8002424 <UART_SetConfig+0xd0>
 80024b2:	4865      	ldr	r0, [pc, #404]	; (8002648 <UART_SetConfig+0x2f4>)
 80024b4:	e7b6      	b.n	8002424 <UART_SetConfig+0xd0>
 80024b6:	4865      	ldr	r0, [pc, #404]	; (800264c <UART_SetConfig+0x2f8>)
 80024b8:	e7b4      	b.n	8002424 <UART_SetConfig+0xd0>
 80024ba:	0140      	lsls	r0, r0, #5
 80024bc:	e7b2      	b.n	8002424 <UART_SetConfig+0xd0>
 80024be:	0100      	lsls	r0, r0, #4
 80024c0:	e7b0      	b.n	8002424 <UART_SetConfig+0xd0>
 80024c2:	00c0      	lsls	r0, r0, #3
 80024c4:	e7ae      	b.n	8002424 <UART_SetConfig+0xd0>
 80024c6:	0080      	lsls	r0, r0, #2
 80024c8:	e7ac      	b.n	8002424 <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80024ca:	f7ff fb9f 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024d0:	2101      	movs	r1, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d021      	beq.n	800251a <UART_SetConfig+0x1c6>
 80024d6:	1849      	adds	r1, r1, r1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d01e      	beq.n	800251a <UART_SetConfig+0x1c6>
 80024dc:	3102      	adds	r1, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d01b      	beq.n	800251a <UART_SetConfig+0x1c6>
 80024e2:	3102      	adds	r1, #2
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d018      	beq.n	800251a <UART_SetConfig+0x1c6>
 80024e8:	3102      	adds	r1, #2
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d015      	beq.n	800251a <UART_SetConfig+0x1c6>
 80024ee:	3102      	adds	r1, #2
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d012      	beq.n	800251a <UART_SetConfig+0x1c6>
 80024f4:	3102      	adds	r1, #2
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d00f      	beq.n	800251a <UART_SetConfig+0x1c6>
 80024fa:	3104      	adds	r1, #4
 80024fc:	2b07      	cmp	r3, #7
 80024fe:	d00c      	beq.n	800251a <UART_SetConfig+0x1c6>
 8002500:	3110      	adds	r1, #16
 8002502:	2b08      	cmp	r3, #8
 8002504:	d009      	beq.n	800251a <UART_SetConfig+0x1c6>
 8002506:	3120      	adds	r1, #32
 8002508:	2b09      	cmp	r3, #9
 800250a:	d006      	beq.n	800251a <UART_SetConfig+0x1c6>
 800250c:	3140      	adds	r1, #64	; 0x40
 800250e:	2b0a      	cmp	r3, #10
 8002510:	d003      	beq.n	800251a <UART_SetConfig+0x1c6>
 8002512:	397f      	subs	r1, #127	; 0x7f
 8002514:	2b0b      	cmp	r3, #11
 8002516:	d100      	bne.n	800251a <UART_SetConfig+0x1c6>
 8002518:	31ff      	adds	r1, #255	; 0xff
 800251a:	6865      	ldr	r5, [r4, #4]
 800251c:	f7fd fe16 	bl	800014c <__udivsi3>
 8002520:	0029      	movs	r1, r5
 8002522:	086b      	lsrs	r3, r5, #1
 8002524:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002526:	f7fd fe11 	bl	800014c <__udivsi3>
 800252a:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800252c:	0003      	movs	r3, r0
 800252e:	4a48      	ldr	r2, [pc, #288]	; (8002650 <UART_SetConfig+0x2fc>)
 8002530:	3b10      	subs	r3, #16
 8002532:	4293      	cmp	r3, r2
 8002534:	d900      	bls.n	8002538 <UART_SetConfig+0x1e4>
 8002536:	e75a      	b.n	80023ee <UART_SetConfig+0x9a>
      huart->Instance->BRR = usartdiv;
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	60d8      	str	r0, [r3, #12]
 800253c:	e0ea      	b.n	8002714 <UART_SetConfig+0x3c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800253e:	2b00      	cmp	r3, #0
 8002540:	d02f      	beq.n	80025a2 <UART_SetConfig+0x24e>
 8002542:	2b01      	cmp	r3, #1
 8002544:	d019      	beq.n	800257a <UART_SetConfig+0x226>
 8002546:	2b02      	cmp	r3, #2
 8002548:	d019      	beq.n	800257e <UART_SetConfig+0x22a>
 800254a:	2b03      	cmp	r3, #3
 800254c:	d019      	beq.n	8002582 <UART_SetConfig+0x22e>
 800254e:	2b04      	cmp	r3, #4
 8002550:	d019      	beq.n	8002586 <UART_SetConfig+0x232>
 8002552:	2b05      	cmp	r3, #5
 8002554:	d019      	beq.n	800258a <UART_SetConfig+0x236>
 8002556:	2b06      	cmp	r3, #6
 8002558:	d019      	beq.n	800258e <UART_SetConfig+0x23a>
 800255a:	2b07      	cmp	r3, #7
 800255c:	d019      	beq.n	8002592 <UART_SetConfig+0x23e>
 800255e:	2b08      	cmp	r3, #8
 8002560:	d019      	beq.n	8002596 <UART_SetConfig+0x242>
 8002562:	2b09      	cmp	r3, #9
 8002564:	d019      	beq.n	800259a <UART_SetConfig+0x246>
 8002566:	2b0a      	cmp	r3, #10
 8002568:	d019      	beq.n	800259e <UART_SetConfig+0x24a>
 800256a:	2b0b      	cmp	r3, #11
 800256c:	d119      	bne.n	80025a2 <UART_SetConfig+0x24e>
 800256e:	4839      	ldr	r0, [pc, #228]	; (8002654 <UART_SetConfig+0x300>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002570:	6863      	ldr	r3, [r4, #4]
 8002572:	6861      	ldr	r1, [r4, #4]
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	1818      	adds	r0, r3, r0
 8002578:	e7d5      	b.n	8002526 <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800257a:	4828      	ldr	r0, [pc, #160]	; (800261c <UART_SetConfig+0x2c8>)
 800257c:	e7f8      	b.n	8002570 <UART_SetConfig+0x21c>
 800257e:	4829      	ldr	r0, [pc, #164]	; (8002624 <UART_SetConfig+0x2d0>)
 8002580:	e7f6      	b.n	8002570 <UART_SetConfig+0x21c>
 8002582:	482a      	ldr	r0, [pc, #168]	; (800262c <UART_SetConfig+0x2d8>)
 8002584:	e7f4      	b.n	8002570 <UART_SetConfig+0x21c>
 8002586:	482a      	ldr	r0, [pc, #168]	; (8002630 <UART_SetConfig+0x2dc>)
 8002588:	e7f2      	b.n	8002570 <UART_SetConfig+0x21c>
 800258a:	4833      	ldr	r0, [pc, #204]	; (8002658 <UART_SetConfig+0x304>)
 800258c:	e7f0      	b.n	8002570 <UART_SetConfig+0x21c>
 800258e:	4833      	ldr	r0, [pc, #204]	; (800265c <UART_SetConfig+0x308>)
 8002590:	e7ee      	b.n	8002570 <UART_SetConfig+0x21c>
 8002592:	4828      	ldr	r0, [pc, #160]	; (8002634 <UART_SetConfig+0x2e0>)
 8002594:	e7ec      	b.n	8002570 <UART_SetConfig+0x21c>
 8002596:	4828      	ldr	r0, [pc, #160]	; (8002638 <UART_SetConfig+0x2e4>)
 8002598:	e7ea      	b.n	8002570 <UART_SetConfig+0x21c>
 800259a:	4828      	ldr	r0, [pc, #160]	; (800263c <UART_SetConfig+0x2e8>)
 800259c:	e7e8      	b.n	8002570 <UART_SetConfig+0x21c>
 800259e:	481d      	ldr	r0, [pc, #116]	; (8002614 <UART_SetConfig+0x2c0>)
 80025a0:	e7e6      	b.n	8002570 <UART_SetConfig+0x21c>
 80025a2:	481d      	ldr	r0, [pc, #116]	; (8002618 <UART_SetConfig+0x2c4>)
 80025a4:	e7e4      	b.n	8002570 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 80025a6:	f7ff fa3d 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80025aa:	e790      	b.n	80024ce <UART_SetConfig+0x17a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d018      	beq.n	80025e2 <UART_SetConfig+0x28e>
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d018      	beq.n	80025e6 <UART_SetConfig+0x292>
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d053      	beq.n	8002660 <UART_SetConfig+0x30c>
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d054      	beq.n	8002666 <UART_SetConfig+0x312>
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d054      	beq.n	800266a <UART_SetConfig+0x316>
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d055      	beq.n	8002670 <UART_SetConfig+0x31c>
 80025c4:	2b06      	cmp	r3, #6
 80025c6:	d055      	beq.n	8002674 <UART_SetConfig+0x320>
 80025c8:	2080      	movs	r0, #128	; 0x80
 80025ca:	2b07      	cmp	r3, #7
 80025cc:	d054      	beq.n	8002678 <UART_SetConfig+0x324>
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d054      	beq.n	800267c <UART_SetConfig+0x328>
 80025d2:	2b09      	cmp	r3, #9
 80025d4:	d054      	beq.n	8002680 <UART_SetConfig+0x32c>
 80025d6:	2b0a      	cmp	r3, #10
 80025d8:	d054      	beq.n	8002684 <UART_SetConfig+0x330>
 80025da:	2b0b      	cmp	r3, #11
 80025dc:	d0c8      	beq.n	8002570 <UART_SetConfig+0x21c>
 80025de:	0200      	lsls	r0, r0, #8
 80025e0:	e7c6      	b.n	8002570 <UART_SetConfig+0x21c>
 80025e2:	2080      	movs	r0, #128	; 0x80
 80025e4:	e7fb      	b.n	80025de <UART_SetConfig+0x28a>
 80025e6:	2080      	movs	r0, #128	; 0x80
 80025e8:	01c0      	lsls	r0, r0, #7
 80025ea:	e7c1      	b.n	8002570 <UART_SetConfig+0x21c>
 80025ec:	cfff69f3 	.word	0xcfff69f3
 80025f0:	ffffcfff 	.word	0xffffcfff
 80025f4:	11fff4ff 	.word	0x11fff4ff
 80025f8:	40013800 	.word	0x40013800
 80025fc:	40021000 	.word	0x40021000
 8002600:	08004ee8 	.word	0x08004ee8
 8002604:	40004400 	.word	0x40004400
 8002608:	08004eec 	.word	0x08004eec
 800260c:	40004800 	.word	0x40004800
 8002610:	40004c00 	.word	0x40004c00
 8002614:	0001e848 	.word	0x0001e848
 8002618:	00f42400 	.word	0x00f42400
 800261c:	007a1200 	.word	0x007a1200
 8002620:	00516154 	.word	0x00516154
 8002624:	003d0900 	.word	0x003d0900
 8002628:	0030d400 	.word	0x0030d400
 800262c:	0028b0aa 	.word	0x0028b0aa
 8002630:	001e8480 	.word	0x001e8480
 8002634:	000f4240 	.word	0x000f4240
 8002638:	0007a120 	.word	0x0007a120
 800263c:	0003d090 	.word	0x0003d090
 8002640:	01e84800 	.word	0x01e84800
 8002644:	00002aaa 	.word	0x00002aaa
 8002648:	00001998 	.word	0x00001998
 800264c:	00001554 	.word	0x00001554
 8002650:	0000ffef 	.word	0x0000ffef
 8002654:	0000f424 	.word	0x0000f424
 8002658:	00186a00 	.word	0x00186a00
 800265c:	00145855 	.word	0x00145855
 8002660:	2080      	movs	r0, #128	; 0x80
 8002662:	0180      	lsls	r0, r0, #6
 8002664:	e784      	b.n	8002570 <UART_SetConfig+0x21c>
 8002666:	4838      	ldr	r0, [pc, #224]	; (8002748 <UART_SetConfig+0x3f4>)
 8002668:	e782      	b.n	8002570 <UART_SetConfig+0x21c>
 800266a:	2080      	movs	r0, #128	; 0x80
 800266c:	0140      	lsls	r0, r0, #5
 800266e:	e77f      	b.n	8002570 <UART_SetConfig+0x21c>
 8002670:	4836      	ldr	r0, [pc, #216]	; (800274c <UART_SetConfig+0x3f8>)
 8002672:	e77d      	b.n	8002570 <UART_SetConfig+0x21c>
 8002674:	4836      	ldr	r0, [pc, #216]	; (8002750 <UART_SetConfig+0x3fc>)
 8002676:	e77b      	b.n	8002570 <UART_SetConfig+0x21c>
 8002678:	0100      	lsls	r0, r0, #4
 800267a:	e779      	b.n	8002570 <UART_SetConfig+0x21c>
 800267c:	00c0      	lsls	r0, r0, #3
 800267e:	e777      	b.n	8002570 <UART_SetConfig+0x21c>
 8002680:	0080      	lsls	r0, r0, #2
 8002682:	e775      	b.n	8002570 <UART_SetConfig+0x21c>
 8002684:	0040      	lsls	r0, r0, #1
 8002686:	e773      	b.n	8002570 <UART_SetConfig+0x21c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	4299      	cmp	r1, r3
 800268e:	d000      	beq.n	8002692 <UART_SetConfig+0x33e>
 8002690:	e71b      	b.n	80024ca <UART_SetConfig+0x176>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002692:	f7ff fabb 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002698:	2101      	movs	r1, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d021      	beq.n	80026e2 <UART_SetConfig+0x38e>
 800269e:	1849      	adds	r1, r1, r1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d01e      	beq.n	80026e2 <UART_SetConfig+0x38e>
 80026a4:	3102      	adds	r1, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d01b      	beq.n	80026e2 <UART_SetConfig+0x38e>
 80026aa:	3102      	adds	r1, #2
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d018      	beq.n	80026e2 <UART_SetConfig+0x38e>
 80026b0:	3102      	adds	r1, #2
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d015      	beq.n	80026e2 <UART_SetConfig+0x38e>
 80026b6:	3102      	adds	r1, #2
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d012      	beq.n	80026e2 <UART_SetConfig+0x38e>
 80026bc:	3102      	adds	r1, #2
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d00f      	beq.n	80026e2 <UART_SetConfig+0x38e>
 80026c2:	3104      	adds	r1, #4
 80026c4:	2b07      	cmp	r3, #7
 80026c6:	d00c      	beq.n	80026e2 <UART_SetConfig+0x38e>
 80026c8:	3110      	adds	r1, #16
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d009      	beq.n	80026e2 <UART_SetConfig+0x38e>
 80026ce:	3120      	adds	r1, #32
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d006      	beq.n	80026e2 <UART_SetConfig+0x38e>
 80026d4:	3140      	adds	r1, #64	; 0x40
 80026d6:	2b0a      	cmp	r3, #10
 80026d8:	d003      	beq.n	80026e2 <UART_SetConfig+0x38e>
 80026da:	397f      	subs	r1, #127	; 0x7f
 80026dc:	2b0b      	cmp	r3, #11
 80026de:	d100      	bne.n	80026e2 <UART_SetConfig+0x38e>
 80026e0:	31ff      	adds	r1, #255	; 0xff
 80026e2:	f7fd fd33 	bl	800014c <__udivsi3>
 80026e6:	6865      	ldr	r5, [r4, #4]
 80026e8:	0040      	lsls	r0, r0, #1
 80026ea:	0029      	movs	r1, r5
 80026ec:	086b      	lsrs	r3, r5, #1
 80026ee:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026f0:	f7fd fd2c 	bl	800014c <__udivsi3>
 80026f4:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026f6:	0003      	movs	r3, r0
 80026f8:	4a16      	ldr	r2, [pc, #88]	; (8002754 <UART_SetConfig+0x400>)
 80026fa:	3b10      	subs	r3, #16
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d900      	bls.n	8002702 <UART_SetConfig+0x3ae>
 8002700:	e675      	b.n	80023ee <UART_SetConfig+0x9a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002702:	230f      	movs	r3, #15
 8002704:	0002      	movs	r2, r0
 8002706:	439a      	bics	r2, r3
 8002708:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800270a:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 800270c:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800270e:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8002710:	4318      	orrs	r0, r3
 8002712:	60d0      	str	r0, [r2, #12]
 8002714:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002716:	0022      	movs	r2, r4
 8002718:	2301      	movs	r3, #1
 800271a:	326a      	adds	r2, #106	; 0x6a
 800271c:	8013      	strh	r3, [r2, #0]
  huart->NbRxDataToProcess = 1;
 800271e:	3a02      	subs	r2, #2
 8002720:	8013      	strh	r3, [r2, #0]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002722:	2300      	movs	r3, #0
 8002724:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8002726:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 8002728:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 800272a:	2808      	cmp	r0, #8
 800272c:	d900      	bls.n	8002730 <UART_SetConfig+0x3dc>
 800272e:	e65e      	b.n	80023ee <UART_SetConfig+0x9a>
 8002730:	f7fd fd02 	bl	8000138 <__gnu_thumb1_case_shi>
 8002734:	fe5dffaf 	.word	0xfe5dffaf
 8002738:	fe5dfe5f 	.word	0xfe5dfe5f
 800273c:	fe5dfe93 	.word	0xfe5dfe93
 8002740:	fe5dfe5d 	.word	0xfe5dfe5d
 8002744:	fe96      	.short	0xfe96
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	00001555 	.word	0x00001555
 800274c:	00000ccc 	.word	0x00000ccc
 8002750:	00000aaa 	.word	0x00000aaa
 8002754:	0000ffef 	.word	0x0000ffef

08002758 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002758:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800275a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800275c:	07da      	lsls	r2, r3, #31
 800275e:	d506      	bpl.n	800276e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002760:	6801      	ldr	r1, [r0, #0]
 8002762:	4c28      	ldr	r4, [pc, #160]	; (8002804 <UART_AdvFeatureConfig+0xac>)
 8002764:	684a      	ldr	r2, [r1, #4]
 8002766:	4022      	ands	r2, r4
 8002768:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800276a:	4322      	orrs	r2, r4
 800276c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800276e:	079a      	lsls	r2, r3, #30
 8002770:	d506      	bpl.n	8002780 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002772:	6801      	ldr	r1, [r0, #0]
 8002774:	4c24      	ldr	r4, [pc, #144]	; (8002808 <UART_AdvFeatureConfig+0xb0>)
 8002776:	684a      	ldr	r2, [r1, #4]
 8002778:	4022      	ands	r2, r4
 800277a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800277c:	4322      	orrs	r2, r4
 800277e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002780:	075a      	lsls	r2, r3, #29
 8002782:	d506      	bpl.n	8002792 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002784:	6801      	ldr	r1, [r0, #0]
 8002786:	4c21      	ldr	r4, [pc, #132]	; (800280c <UART_AdvFeatureConfig+0xb4>)
 8002788:	684a      	ldr	r2, [r1, #4]
 800278a:	4022      	ands	r2, r4
 800278c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800278e:	4322      	orrs	r2, r4
 8002790:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002792:	071a      	lsls	r2, r3, #28
 8002794:	d506      	bpl.n	80027a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002796:	6801      	ldr	r1, [r0, #0]
 8002798:	4c1d      	ldr	r4, [pc, #116]	; (8002810 <UART_AdvFeatureConfig+0xb8>)
 800279a:	684a      	ldr	r2, [r1, #4]
 800279c:	4022      	ands	r2, r4
 800279e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80027a0:	4322      	orrs	r2, r4
 80027a2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027a4:	06da      	lsls	r2, r3, #27
 80027a6:	d506      	bpl.n	80027b6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027a8:	6801      	ldr	r1, [r0, #0]
 80027aa:	4c1a      	ldr	r4, [pc, #104]	; (8002814 <UART_AdvFeatureConfig+0xbc>)
 80027ac:	688a      	ldr	r2, [r1, #8]
 80027ae:	4022      	ands	r2, r4
 80027b0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80027b2:	4322      	orrs	r2, r4
 80027b4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027b6:	069a      	lsls	r2, r3, #26
 80027b8:	d506      	bpl.n	80027c8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027ba:	6801      	ldr	r1, [r0, #0]
 80027bc:	4c16      	ldr	r4, [pc, #88]	; (8002818 <UART_AdvFeatureConfig+0xc0>)
 80027be:	688a      	ldr	r2, [r1, #8]
 80027c0:	4022      	ands	r2, r4
 80027c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80027c4:	4322      	orrs	r2, r4
 80027c6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027c8:	065a      	lsls	r2, r3, #25
 80027ca:	d510      	bpl.n	80027ee <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027cc:	6801      	ldr	r1, [r0, #0]
 80027ce:	4d13      	ldr	r5, [pc, #76]	; (800281c <UART_AdvFeatureConfig+0xc4>)
 80027d0:	684a      	ldr	r2, [r1, #4]
 80027d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80027d4:	402a      	ands	r2, r5
 80027d6:	4322      	orrs	r2, r4
 80027d8:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	0352      	lsls	r2, r2, #13
 80027de:	4294      	cmp	r4, r2
 80027e0:	d105      	bne.n	80027ee <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027e2:	684a      	ldr	r2, [r1, #4]
 80027e4:	4c0e      	ldr	r4, [pc, #56]	; (8002820 <UART_AdvFeatureConfig+0xc8>)
 80027e6:	4022      	ands	r2, r4
 80027e8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80027ea:	4322      	orrs	r2, r4
 80027ec:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027ee:	061b      	lsls	r3, r3, #24
 80027f0:	d506      	bpl.n	8002800 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027f2:	6802      	ldr	r2, [r0, #0]
 80027f4:	490b      	ldr	r1, [pc, #44]	; (8002824 <UART_AdvFeatureConfig+0xcc>)
 80027f6:	6853      	ldr	r3, [r2, #4]
 80027f8:	400b      	ands	r3, r1
 80027fa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6053      	str	r3, [r2, #4]
  }
}
 8002800:	bd30      	pop	{r4, r5, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	fffdffff 	.word	0xfffdffff
 8002808:	fffeffff 	.word	0xfffeffff
 800280c:	fffbffff 	.word	0xfffbffff
 8002810:	ffff7fff 	.word	0xffff7fff
 8002814:	ffffefff 	.word	0xffffefff
 8002818:	ffffdfff 	.word	0xffffdfff
 800281c:	ffefffff 	.word	0xffefffff
 8002820:	ff9fffff 	.word	0xff9fffff
 8002824:	fff7ffff 	.word	0xfff7ffff

08002828 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	0004      	movs	r4, r0
 800282c:	000e      	movs	r6, r1
 800282e:	0015      	movs	r5, r2
 8002830:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002832:	6822      	ldr	r2, [r4, #0]
 8002834:	69d3      	ldr	r3, [r2, #28]
 8002836:	4033      	ands	r3, r6
 8002838:	1b9b      	subs	r3, r3, r6
 800283a:	4259      	negs	r1, r3
 800283c:	414b      	adcs	r3, r1
 800283e:	42ab      	cmp	r3, r5
 8002840:	d001      	beq.n	8002846 <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002842:	2000      	movs	r0, #0
 8002844:	e01e      	b.n	8002884 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002846:	9b06      	ldr	r3, [sp, #24]
 8002848:	3301      	adds	r3, #1
 800284a:	d0f3      	beq.n	8002834 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284c:	f7fe fd1a 	bl	8001284 <HAL_GetTick>
 8002850:	9b06      	ldr	r3, [sp, #24]
 8002852:	1bc0      	subs	r0, r0, r7
 8002854:	4283      	cmp	r3, r0
 8002856:	d301      	bcc.n	800285c <UART_WaitOnFlagUntilTimeout+0x34>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ea      	bne.n	8002832 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800285c:	0022      	movs	r2, r4
 800285e:	ca08      	ldmia	r2!, {r3}
 8002860:	4809      	ldr	r0, [pc, #36]	; (8002888 <UART_WaitOnFlagUntilTimeout+0x60>)
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	4001      	ands	r1, r0
 8002866:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002868:	6899      	ldr	r1, [r3, #8]
 800286a:	30a3      	adds	r0, #163	; 0xa3
 800286c:	30ff      	adds	r0, #255	; 0xff
 800286e:	4381      	bics	r1, r0
 8002870:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002872:	2320      	movs	r3, #32
 8002874:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002876:	0022      	movs	r2, r4
 8002878:	3208      	adds	r2, #8
 800287a:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800287c:	2300      	movs	r3, #0
 800287e:	347c      	adds	r4, #124	; 0x7c
 8002880:	7023      	strb	r3, [r4, #0]
 8002882:	3002      	adds	r0, #2
}
 8002884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	fffffe5f 	.word	0xfffffe5f

0800288c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288c:	0003      	movs	r3, r0
{
 800288e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002890:	2600      	movs	r6, #0
{
 8002892:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002894:	3388      	adds	r3, #136	; 0x88
 8002896:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8002898:	f7fe fcf4 	bl	8001284 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800289c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800289e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	071b      	lsls	r3, r3, #28
 80028a4:	d417      	bmi.n	80028d6 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	075b      	lsls	r3, r3, #29
 80028ac:	d50a      	bpl.n	80028c4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <UART_CheckIdleState+0x64>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	03c9      	lsls	r1, r1, #15
 80028b8:	002b      	movs	r3, r5
 80028ba:	0020      	movs	r0, r4
 80028bc:	f7ff ffb4 	bl	8002828 <UART_WaitOnFlagUntilTimeout>
 80028c0:	2800      	cmp	r0, #0
 80028c2:	d113      	bne.n	80028ec <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80028c4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80028c6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80028c8:	1d22      	adds	r2, r4, #4
 80028ca:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80028cc:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80028ce:	3204      	adds	r2, #4
 80028d0:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80028d2:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80028d4:	e00b      	b.n	80028ee <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <UART_CheckIdleState+0x64>)
 80028da:	0032      	movs	r2, r6
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	0389      	lsls	r1, r1, #14
 80028e0:	0003      	movs	r3, r0
 80028e2:	0020      	movs	r0, r4
 80028e4:	f7ff ffa0 	bl	8002828 <UART_WaitOnFlagUntilTimeout>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d0dc      	beq.n	80028a6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80028ec:	2003      	movs	r0, #3
}
 80028ee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80028f0:	01ffffff 	.word	0x01ffffff

080028f4 <HAL_UART_Init>:
{
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80028f8:	d101      	bne.n	80028fe <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80028fa:	2001      	movs	r0, #1
}
 80028fc:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80028fe:	1d05      	adds	r5, r0, #4
 8002900:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8002906:	0002      	movs	r2, r0
 8002908:	327c      	adds	r2, #124	; 0x7c
 800290a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800290c:	f7fe fb36 	bl	8000f7c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002910:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002912:	2101      	movs	r1, #1
 8002914:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002916:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002918:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800291a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800291c:	438b      	bics	r3, r1
 800291e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002920:	f7ff fd18 	bl	8002354 <UART_SetConfig>
 8002924:	2801      	cmp	r0, #1
 8002926:	d0e8      	beq.n	80028fa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002928:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 800292e:	0020      	movs	r0, r4
 8002930:	f7ff ff12 	bl	8002758 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	4908      	ldr	r1, [pc, #32]	; (8002958 <HAL_UART_Init+0x64>)
 8002938:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800293a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800293c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002940:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	438a      	bics	r2, r1
 8002946:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002948:	2201      	movs	r2, #1
 800294a:	6819      	ldr	r1, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002950:	f7ff ff9c 	bl	800288c <UART_CheckIdleState>
 8002954:	e7d2      	b.n	80028fc <HAL_UART_Init+0x8>
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	ffffb7ff 	.word	0xffffb7ff

0800295c <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800295c:	2301      	movs	r3, #1
{
 800295e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002960:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002962:	aa02      	add	r2, sp, #8
 8002964:	7013      	strb	r3, [r2, #0]
 8002966:	7053      	strb	r3, [r2, #1]
 8002968:	7093      	strb	r3, [r2, #2]
 800296a:	2203      	movs	r2, #3
 800296c:	a902      	add	r1, sp, #8
 800296e:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002970:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002972:	2200      	movs	r2, #0
 8002974:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002976:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002978:	718a      	strb	r2, [r1, #6]
 800297a:	71ca      	strb	r2, [r1, #7]
 800297c:	710e      	strb	r6, [r1, #4]
 800297e:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002980:	70a5      	strb	r5, [r4, #2]
 8002982:	2104      	movs	r1, #4
 8002984:	0007      	movs	r7, r0
 8002986:	0005      	movs	r5, r0
 8002988:	3208      	adds	r2, #8
 800298a:	7022      	strb	r2, [r4, #0]
 800298c:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800298e:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002990:	7061      	strb	r1, [r4, #1]
 8002992:	70e1      	strb	r1, [r4, #3]
 8002994:	7163      	strb	r3, [r4, #5]
 8002996:	71a3      	strb	r3, [r4, #6]
 8002998:	71e3      	strb	r3, [r4, #7]
 800299a:	376a      	adds	r7, #106	; 0x6a
 800299c:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800299e:	2a00      	cmp	r2, #0
 80029a0:	d103      	bne.n	80029aa <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 80029a2:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 80029a4:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80029a6:	b007      	add	sp, #28
 80029a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80029aa:	6803      	ldr	r3, [r0, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80029ae:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80029b0:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80029b2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80029b4:	aa02      	add	r2, sp, #8
 80029b6:	5cd0      	ldrb	r0, [r2, r3]
 80029b8:	5ce1      	ldrb	r1, [r4, r3]
 80029ba:	00c0      	lsls	r0, r0, #3
 80029bc:	f7fd fc50 	bl	8000260 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80029c0:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80029c2:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80029c4:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80029c6:	401e      	ands	r6, r3
 80029c8:	ab02      	add	r3, sp, #8
 80029ca:	5d98      	ldrb	r0, [r3, r6]
 80029cc:	5da1      	ldrb	r1, [r4, r6]
 80029ce:	00c0      	lsls	r0, r0, #3
 80029d0:	f7fd fc46 	bl	8000260 <__divsi3>
 80029d4:	8028      	strh	r0, [r5, #0]
}
 80029d6:	e7e6      	b.n	80029a6 <UARTEx_SetNbDataToProcess+0x4a>

080029d8 <HAL_UARTEx_DisableFifoMode>:
{
 80029d8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80029da:	0004      	movs	r4, r0
 80029dc:	347c      	adds	r4, #124	; 0x7c
 80029de:	7822      	ldrb	r2, [r4, #0]
 80029e0:	2302      	movs	r3, #2
 80029e2:	2a01      	cmp	r2, #1
 80029e4:	d010      	beq.n	8002a08 <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 80029e6:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029e8:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029ea:	1d05      	adds	r5, r0, #4
 80029ec:	3322      	adds	r3, #34	; 0x22
 80029ee:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029f0:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80029f2:	6813      	ldr	r3, [r2, #0]
 80029f4:	43b3      	bics	r3, r6
 80029f6:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <HAL_UARTEx_DisableFifoMode+0x34>)
 80029fa:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a00:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002a02:	2220      	movs	r2, #32
 8002a04:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002a06:	7023      	strb	r3, [r4, #0]
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	dfffffff 	.word	0xdfffffff

08002a10 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8002a12:	0005      	movs	r5, r0
 8002a14:	357c      	adds	r5, #124	; 0x7c
 8002a16:	782b      	ldrb	r3, [r5, #0]
{
 8002a18:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8002a1a:	2002      	movs	r0, #2
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d017      	beq.n	8002a50 <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a20:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a22:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 8002a24:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002a26:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8002a28:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a2a:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a2c:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002a2e:	6813      	ldr	r3, [r2, #0]
 8002a30:	4383      	bics	r3, r0
 8002a32:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002a34:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002a36:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	08db      	lsrs	r3, r3, #3
 8002a3c:	4319      	orrs	r1, r3
 8002a3e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002a40:	f7ff ff8c 	bl	800295c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a44:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8002a46:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a48:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002a4e:	7028      	strb	r0, [r5, #0]
}
 8002a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a54 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8002a56:	0005      	movs	r5, r0
 8002a58:	357c      	adds	r5, #124	; 0x7c
 8002a5a:	782b      	ldrb	r3, [r5, #0]
{
 8002a5c:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8002a5e:	2002      	movs	r0, #2
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d017      	beq.n	8002a94 <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a64:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8002a66:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002a68:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8002a6a:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a6c:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4382      	bics	r2, r0
 8002a76:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	4807      	ldr	r0, [pc, #28]	; (8002a98 <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8002a7c:	4002      	ands	r2, r0
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002a82:	0020      	movs	r0, r4
 8002a84:	f7ff ff6a 	bl	800295c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a88:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8002a8a:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a8c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002a92:	7028      	strb	r0, [r5, #0]
}
 8002a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	f1ffffff 	.word	0xf1ffffff

08002a9c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 8002a9c:	b510      	push	{r4, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8002a9e:	4906      	ldr	r1, [pc, #24]	; (8002ab8 <MX_FATFS_Init+0x1c>)
 8002aa0:	4806      	ldr	r0, [pc, #24]	; (8002abc <MX_FATFS_Init+0x20>)
 8002aa2:	f000 f89f 	bl	8002be4 <FATFS_LinkDriver>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d103      	bne.n	8002ab2 <MX_FATFS_Init+0x16>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <MX_FATFS_Init+0x24>)
 8002aae:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 8002ab0:	bd10      	pop	{r4, pc}
    return APP_ERROR;
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	4240      	negs	r0, r0
 8002ab6:	e7fb      	b.n	8002ab0 <MX_FATFS_Init+0x14>
 8002ab8:	200043f8 	.word	0x200043f8
 8002abc:	08004efc 	.word	0x08004efc
 8002ac0:	20001268 	.word	0x20001268

08002ac4 <SD_CheckStatus.isra.0>:
  SD_ioctl,
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8002ac4:	b570      	push	{r4, r5, r6, lr}
{
  Stat = STA_NOINIT;
 8002ac6:	2501      	movs	r5, #1
 8002ac8:	4c05      	ldr	r4, [pc, #20]	; (8002ae0 <SD_CheckStatus.isra.0+0x1c>)
 8002aca:	7025      	strb	r5, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8002acc:	f7fe f9c4 	bl	8000e58 <BSP_SD_GetCardState>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d102      	bne.n	8002ada <SD_CheckStatus.isra.0+0x16>
  {
    Stat &= ~STA_NOINIT;
 8002ad4:	7823      	ldrb	r3, [r4, #0]
 8002ad6:	43ab      	bics	r3, r5
 8002ad8:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 8002ada:	7820      	ldrb	r0, [r4, #0]
 8002adc:	b2c0      	uxtb	r0, r0
}
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
 8002ae0:	20000010 	.word	0x20000010

08002ae4 <SD_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  /* USER CODE BEGIN SDinitialize */
  Stat = STA_NOINIT;
 8002ae4:	2301      	movs	r3, #1
{
 8002ae6:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8002ae8:	4c05      	ldr	r4, [pc, #20]	; (8002b00 <SD_initialize+0x1c>)
 8002aea:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8002aec:	f7fd fe2e 	bl	800074c <BSP_SD_Init>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d102      	bne.n	8002afa <SD_initialize+0x16>
  {
    Stat = SD_CheckStatus(lun);
 8002af4:	f7ff ffe6 	bl	8002ac4 <SD_CheckStatus.isra.0>
 8002af8:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8002afa:	7820      	ldrb	r0, [r4, #0]
 8002afc:	b2c0      	uxtb	r0, r0
  /* USER CODE END SDinitialize */
}
 8002afe:	bd10      	pop	{r4, pc}
 8002b00:	20000010 	.word	0x20000010

08002b04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8002b04:	b510      	push	{r4, lr}
  return SD_CheckStatus(lun);
 8002b06:	f7ff ffdd 	bl	8002ac4 <SD_CheckStatus.isra.0>
}
 8002b0a:	bd10      	pop	{r4, pc}

08002b0c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8002b0c:	0008      	movs	r0, r1
 8002b0e:	b510      	push	{r4, lr}
 8002b10:	0011      	movs	r1, r2
 8002b12:	001a      	movs	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <SD_read+0x20>)
 8002b16:	f7fe f8a1 	bl	8000c5c <BSP_SD_ReadBlocks>
 8002b1a:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 8002b1c:	2001      	movs	r0, #1
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <SD_read+0x1e>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8002b22:	f7fe f999 	bl	8000e58 <BSP_SD_GetCardState>
 8002b26:	2800      	cmp	r0, #0
 8002b28:	d1fb      	bne.n	8002b22 <SD_read+0x16>
}
 8002b2a:	bd10      	pop	{r4, pc}
 8002b2c:	05f5e100 	.word	0x05f5e100

08002b30 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8002b30:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <SD_ioctl+0x48>)
{
 8002b34:	0014      	movs	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002b36:	781a      	ldrb	r2, [r3, #0]
{
 8002b38:	b090      	sub	sp, #64	; 0x40
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002b3a:	2003      	movs	r0, #3
 8002b3c:	07d3      	lsls	r3, r2, #31
 8002b3e:	d413      	bmi.n	8002b68 <SD_ioctl+0x38>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
     res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8002b40:	3001      	adds	r0, #1
  switch (cmd)
 8002b42:	2903      	cmp	r1, #3
 8002b44:	d810      	bhi.n	8002b68 <SD_ioctl+0x38>
 8002b46:	0008      	movs	r0, r1
 8002b48:	f7fd faec 	bl	8000124 <__gnu_thumb1_case_uqi>
 8002b4c:	1008020d 	.word	0x1008020d
    BSP_SD_GetCardInfo(&CardInfo);
 8002b50:	4668      	mov	r0, sp
 8002b52:	f7fd febd 	bl	80008d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8002b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002b58:	6023      	str	r3, [r4, #0]
 8002b5a:	e004      	b.n	8002b66 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8002b5c:	4668      	mov	r0, sp
 8002b5e:	f7fd feb7 	bl	80008d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8002b62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b64:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8002b66:	2000      	movs	r0, #0
  }

  return res;
}
 8002b68:	b010      	add	sp, #64	; 0x40
 8002b6a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8002b6c:	4668      	mov	r0, sp
 8002b6e:	f7fd feaf 	bl	80008d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b74:	0a5b      	lsrs	r3, r3, #9
 8002b76:	e7ef      	b.n	8002b58 <SD_ioctl+0x28>
 8002b78:	20000010 	.word	0x20000010

08002b7c <SD_write>:
{
 8002b7c:	0008      	movs	r0, r1
 8002b7e:	b510      	push	{r4, lr}
 8002b80:	0011      	movs	r1, r2
 8002b82:	001a      	movs	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <SD_write+0x20>)
 8002b86:	f7fe f8db 	bl	8000d40 <BSP_SD_WriteBlocks>
 8002b8a:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 8002b8c:	2001      	movs	r0, #1
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <SD_write+0x1e>
    while(BSP_SD_GetCardState() != MSD_OK)
 8002b92:	f7fe f961 	bl	8000e58 <BSP_SD_GetCardState>
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d1fb      	bne.n	8002b92 <SD_write+0x16>
}
 8002b9a:	bd10      	pop	{r4, pc}
 8002b9c:	05f5e100 	.word	0x05f5e100

08002ba0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002ba0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <FATFS_LinkDriverEx+0x40>)
  uint8_t ret = 1;
 8002ba4:	2501      	movs	r5, #1
  if(disk.nbr < _VOLUMES)
 8002ba6:	7a5c      	ldrb	r4, [r3, #9]
 8002ba8:	b2e4      	uxtb	r4, r4
 8002baa:	2c00      	cmp	r4, #0
 8002bac:	d115      	bne.n	8002bda <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002bae:	7a5d      	ldrb	r5, [r3, #9]
 8002bb0:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8002bb2:	7a5d      	ldrb	r5, [r3, #9]
 8002bb4:	00ad      	lsls	r5, r5, #2
 8002bb6:	195d      	adds	r5, r3, r5
 8002bb8:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8002bba:	7a58      	ldrb	r0, [r3, #9]
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
    path[1] = ':';
    path[2] = '/';
    path[3] = 0;
 8002bbc:	0025      	movs	r5, r4
    disk.lun[disk.nbr] = lun;
 8002bbe:	1818      	adds	r0, r3, r0
 8002bc0:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8002bc2:	7a5a      	ldrb	r2, [r3, #9]
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	1c50      	adds	r0, r2, #1
 8002bc8:	b2c0      	uxtb	r0, r0
 8002bca:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 8002bcc:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8002bce:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8002bd0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8002bd2:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 8002bd4:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8002bd6:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8002bd8:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8002bda:	0028      	movs	r0, r5
 8002bdc:	bd30      	pop	{r4, r5, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	2000126c 	.word	0x2000126c

08002be4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8002be4:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	f7ff ffda 	bl	8002ba0 <FATFS_LinkDriverEx>
}
 8002bec:	bd10      	pop	{r4, pc}
	...

08002bf0 <lv_group_init>:

/**
 * Init. the group module
 */
void lv_group_init(void)
{
 8002bf0:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8002bf2:	215c      	movs	r1, #92	; 0x5c
 8002bf4:	4801      	ldr	r0, [pc, #4]	; (8002bfc <lv_group_init+0xc>)
 8002bf6:	f001 fa52 	bl	800409e <lv_ll_init>
}
 8002bfa:	bd10      	pop	{r4, pc}
 8002bfc:	20004bbc 	.word	0x20004bbc

08002c00 <lv_indev_reset.part.1>:
}
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
 8002c00:	b510      	push	{r4, lr}
{
    if(indev)
        indev->proc.reset_query = 1;
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f001 f896 	bl	8003d34 <lv_indev_get_next>
        while(i) {
            i->proc.reset_query = 1;
 8002c08:	2402      	movs	r4, #2
        while(i) {
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d100      	bne.n	8002c10 <lv_indev_reset.part.1+0x10>

            i = lv_indev_get_next(i);
        }
    }
}
 8002c0e:	bd10      	pop	{r4, pc}
            i->proc.reset_query = 1;
 8002c10:	0002      	movs	r2, r0
 8002c12:	324c      	adds	r2, #76	; 0x4c
 8002c14:	7813      	ldrb	r3, [r2, #0]
 8002c16:	4323      	orrs	r3, r4
 8002c18:	7013      	strb	r3, [r2, #0]
            i = lv_indev_get_next(i);
 8002c1a:	f001 f88b 	bl	8003d34 <lv_indev_get_next>
 8002c1e:	e7f4      	b.n	8002c0a <lv_indev_reset.part.1+0xa>

08002c20 <lv_indev_init>:
{
 8002c20:	b510      	push	{r4, lr}
 8002c22:	f7ff ffed 	bl	8002c00 <lv_indev_reset.part.1>
}
 8002c26:	bd10      	pop	{r4, pc}

08002c28 <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
 8002c28:	b510      	push	{r4, lr}
    /* Do nothing if already initialized */
    if(lv_initialized) {
 8002c2a:	4c12      	ldr	r4, [pc, #72]	; (8002c74 <lv_init+0x4c>)
 8002c2c:	7823      	ldrb	r3, [r4, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11f      	bne.n	8002c72 <lv_init+0x4a>
    }

    LV_LOG_TRACE("lv_init started");

    /*Initialize the lv_misc modules*/
    lv_mem_init();
 8002c32:	f001 fb8b 	bl	800434c <lv_mem_init>
    lv_task_core_init();
 8002c36:	f001 fbfb 	bl	8004430 <lv_task_core_init>

#if LV_USE_FILESYSTEM
    lv_fs_init();
 8002c3a:	f001 f953 	bl	8003ee4 <lv_fs_init>
#endif

#if LV_USE_ANIMATION
    lv_anim_core_init();
 8002c3e:	f001 f92f 	bl	8003ea0 <lv_anim_core_init>
#endif

#if LV_USE_GROUP
    lv_group_init();
 8002c42:	f7ff ffd5 	bl	8002bf0 <lv_group_init>
#endif

    /*Init. the sstyles*/
    lv_style_init();
 8002c46:	f000 f821 	bl	8002c8c <lv_style_init>

    /*Initialize the screen refresh system*/
    lv_refr_init();
 8002c4a:	f000 f819 	bl	8002c80 <lv_refr_init>

    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8002c4e:	21b6      	movs	r1, #182	; 0xb6
 8002c50:	4809      	ldr	r0, [pc, #36]	; (8002c78 <lv_init+0x50>)
 8002c52:	0049      	lsls	r1, r1, #1
 8002c54:	f001 fa23 	bl	800409e <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8002c58:	215c      	movs	r1, #92	; 0x5c
 8002c5a:	4808      	ldr	r0, [pc, #32]	; (8002c7c <lv_init+0x54>)
 8002c5c:	f001 fa1f 	bl	800409e <lv_ll_init>

    /*Init the input device handling*/
    lv_indev_init();
 8002c60:	f7ff ffde 	bl	8002c20 <lv_indev_init>

    lv_img_decoder_init();
 8002c64:	f000 ff2c 	bl	8003ac0 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f000 fc47 	bl	80034fc <lv_img_cache_set_size>

    lv_initialized = true;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	7023      	strb	r3, [r4, #0]
    LV_LOG_INFO("lv_init ready");
}
 8002c72:	bd10      	pop	{r4, pc}
 8002c74:	20001278 	.word	0x20001278
 8002c78:	20004b84 	.word	0x20004b84
 8002c7c:	20004b74 	.word	0x20004b74

08002c80 <lv_refr_init>:
 * Initialize the screen refresh subsystem
 */
void lv_refr_init(void)
{
    /*Nothing to do*/
}
 8002c80:	4770      	bx	lr

08002c82 <lv_style_copy>:
 * Copy a style to an other
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
 8002c82:	b510      	push	{r4, lr}
    memcpy(dest, src, sizeof(lv_style_t));
 8002c84:	223c      	movs	r2, #60	; 0x3c
 8002c86:	f001 ffa9 	bl	8004bdc <memcpy>
}
 8002c8a:	bd10      	pop	{r4, pc}

08002c8c <lv_style_init>:
{
 8002c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_style_scr.glass               = 0;
 8002c8e:	2201      	movs	r2, #1
 8002c90:	49f0      	ldr	r1, [pc, #960]	; (8003054 <lv_style_init+0x3c8>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8002c92:	241f      	movs	r4, #31
    lv_style_scr.glass               = 0;
 8002c94:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.radius         = 0;
 8002c96:	2700      	movs	r7, #0
    lv_style_scr.glass               = 0;
 8002c98:	4393      	bics	r3, r2
 8002c9a:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8002c9c:	4bee      	ldr	r3, [pc, #952]	; (8003058 <lv_style_init+0x3cc>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8002c9e:	48ef      	ldr	r0, [pc, #956]	; (800305c <lv_style_init+0x3d0>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8002ca0:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8002ca2:	2506      	movs	r5, #6
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	466b      	mov	r3, sp
 8002ca8:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8002caa:	32fe      	adds	r2, #254	; 0xfe
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8002cac:	804b      	strh	r3, [r1, #2]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 8002cae:	466b      	mov	r3, sp
 8002cb0:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8002cb2:	720a      	strb	r2, [r1, #8]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 8002cb4:	808b      	strh	r3, [r1, #4]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	83cb      	strh	r3, [r1, #30]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8002cba:	7a8b      	ldrb	r3, [r1, #10]
    lv_style_scr.body.radius         = 0;
 8002cbc:	80cf      	strh	r7, [r1, #6]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8002cbe:	43a3      	bics	r3, r4
 8002cc0:	728b      	strb	r3, [r1, #10]
 8002cc2:	894b      	ldrh	r3, [r1, #10]
    lv_style_scr.body.padding.left   = 0;
 8002cc4:	834f      	strh	r7, [r1, #26]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8002cc6:	4003      	ands	r3, r0
 8002cc8:	814b      	strh	r3, [r1, #10]
 8002cca:	003b      	movs	r3, r7
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 8002ccc:	330f      	adds	r3, #15
 8002cce:	738b      	strb	r3, [r1, #14]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8002cd0:	4be1      	ldr	r3, [pc, #900]	; (8003058 <lv_style_init+0x3cc>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8002cd2:	72cf      	strb	r7, [r1, #11]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8002cd4:	885b      	ldrh	r3, [r3, #2]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8002cd6:	1c48      	adds	r0, r1, #1
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	466b      	mov	r3, sp
 8002cdc:	889b      	ldrh	r3, [r3, #4]
    lv_style_scr.body.padding.right  = 0;
 8002cde:	838f      	strh	r7, [r1, #28]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8002ce0:	820b      	strh	r3, [r1, #16]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	750b      	strb	r3, [r1, #20]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 8002ce6:	000b      	movs	r3, r1
 8002ce8:	332c      	adds	r3, #44	; 0x2c
    lv_style_scr.body.padding.top    = 0;
 8002cea:	82cf      	strh	r7, [r1, #22]
    lv_style_scr.body.padding.bottom = 0;
 8002cec:	830f      	strh	r7, [r1, #24]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 8002cee:	73ca      	strb	r2, [r1, #15]
    lv_style_scr.body.border.width = 0;
 8002cf0:	818f      	strh	r7, [r1, #12]
    lv_style_scr.body.shadow.width = 0;
 8002cf2:	824f      	strh	r7, [r1, #18]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 8002cf4:	701a      	strb	r2, [r3, #0]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8002cf6:	7fc3      	ldrb	r3, [r0, #31]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8002cf8:	261e      	movs	r6, #30
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8002cfa:	43a3      	bics	r3, r4
 8002cfc:	432b      	orrs	r3, r5
 8002cfe:	77c3      	strb	r3, [r0, #31]
 8002d00:	8c0d      	ldrh	r5, [r1, #32]
 8002d02:	4bd6      	ldr	r3, [pc, #856]	; (800305c <lv_style_init+0x3d0>)
 8002d04:	1c88      	adds	r0, r1, #2
 8002d06:	401d      	ands	r5, r3
 8002d08:	23c0      	movs	r3, #192	; 0xc0
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	432b      	orrs	r3, r5
 8002d0e:	2507      	movs	r5, #7
 8002d10:	840b      	strh	r3, [r1, #32]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	402b      	ands	r3, r5
 8002d16:	3529      	adds	r5, #41	; 0x29
 8002d18:	432b      	orrs	r3, r5
 8002d1a:	77c3      	strb	r3, [r0, #31]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8002d1c:	1cc8      	adds	r0, r1, #3
 8002d1e:	7fc3      	ldrb	r3, [r0, #31]
 8002d20:	3d15      	subs	r5, #21
 8002d22:	43a3      	bics	r3, r4
 8002d24:	432b      	orrs	r3, r5
 8002d26:	77c3      	strb	r3, [r0, #31]
 8002d28:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8002d2a:	48cc      	ldr	r0, [pc, #816]	; (800305c <lv_style_init+0x3d0>)
 8002d2c:	3d14      	subs	r5, #20
 8002d2e:	4003      	ands	r3, r0
 8002d30:	2094      	movs	r0, #148	; 0x94
 8002d32:	00c0      	lsls	r0, r0, #3
 8002d34:	4303      	orrs	r3, r0
 8002d36:	844b      	strh	r3, [r1, #34]	; 0x22
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	402b      	ands	r3, r5
 8002d3c:	3549      	adds	r5, #73	; 0x49
 8002d3e:	1d08      	adds	r0, r1, #4
 8002d40:	432b      	orrs	r3, r5
 8002d42:	77c3      	strb	r3, [r0, #31]
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8002d44:	4bc6      	ldr	r3, [pc, #792]	; (8003060 <lv_style_init+0x3d4>)
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8002d46:	0008      	movs	r0, r1
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8002d48:	624b      	str	r3, [r1, #36]	; 0x24
    lv_style_scr.text.line_space   = 2;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	854b      	strh	r3, [r1, #42]	; 0x2a
    lv_style_scr.image.opa     = LV_OPA_COVER;
 8002d4e:	000b      	movs	r3, r1
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8002d50:	3030      	adds	r0, #48	; 0x30
    lv_style_scr.image.opa     = LV_OPA_COVER;
 8002d52:	3333      	adds	r3, #51	; 0x33
 8002d54:	701a      	strb	r2, [r3, #0]
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8002d56:	7803      	ldrb	r3, [r0, #0]
 8002d58:	3d4c      	subs	r5, #76	; 0x4c
 8002d5a:	43a3      	bics	r3, r4
 8002d5c:	432b      	orrs	r3, r5
 8002d5e:	7003      	strb	r3, [r0, #0]
 8002d60:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 8002d62:	4dbe      	ldr	r5, [pc, #760]	; (800305c <lv_style_init+0x3d0>)
    lv_style_scr.text.letter_space = 0;
 8002d64:	850f      	strh	r7, [r1, #40]	; 0x28
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8002d66:	402b      	ands	r3, r5
 8002d68:	2580      	movs	r5, #128	; 0x80
 8002d6a:	006d      	lsls	r5, r5, #1
 8002d6c:	432b      	orrs	r3, r5
 8002d6e:	860b      	strh	r3, [r1, #48]	; 0x30
 8002d70:	3df9      	subs	r5, #249	; 0xf9
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	402b      	ands	r3, r5
 8002d76:	3519      	adds	r5, #25
 8002d78:	432b      	orrs	r3, r5
 8002d7a:	7043      	strb	r3, [r0, #1]
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 8002d7c:	000b      	movs	r3, r1
 8002d7e:	3332      	adds	r3, #50	; 0x32
 8002d80:	701f      	strb	r7, [r3, #0]
    lv_style_scr.line.opa     = LV_OPA_COVER;
 8002d82:	000b      	movs	r3, r1
 8002d84:	3338      	adds	r3, #56	; 0x38
 8002d86:	701a      	strb	r2, [r3, #0]
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8002d88:	000a      	movs	r2, r1
 8002d8a:	2004      	movs	r0, #4
 8002d8c:	3234      	adds	r2, #52	; 0x34
 8002d8e:	7813      	ldrb	r3, [r2, #0]
 8002d90:	43a3      	bics	r3, r4
 8002d92:	4303      	orrs	r3, r0
 8002d94:	7013      	strb	r3, [r2, #0]
 8002d96:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
 8002d98:	48b0      	ldr	r0, [pc, #704]	; (800305c <lv_style_init+0x3d0>)
 8002d9a:	4003      	ands	r3, r0
 8002d9c:	2080      	movs	r0, #128	; 0x80
 8002d9e:	0040      	lsls	r0, r0, #1
 8002da0:	4303      	orrs	r3, r0
 8002da2:	868b      	strh	r3, [r1, #52]	; 0x34
 8002da4:	38f9      	subs	r0, #249	; 0xf9
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	4003      	ands	r3, r0
 8002daa:	432b      	orrs	r3, r5
 8002dac:	7053      	strb	r3, [r2, #1]
    lv_style_scr.line.rounded = 0;
 8002dae:	000a      	movs	r2, r1
    lv_style_scr.line.width   = 2;
 8002db0:	2302      	movs	r3, #2
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8002db2:	0028      	movs	r0, r5
    lv_style_scr.line.rounded = 0;
 8002db4:	3239      	adds	r2, #57	; 0x39
    lv_style_scr.line.width   = 2;
 8002db6:	86cb      	strh	r3, [r1, #54]	; 0x36
    lv_style_scr.line.rounded = 0;
 8002db8:	7813      	ldrb	r3, [r2, #0]
 8002dba:	381f      	subs	r0, #31
 8002dbc:	4383      	bics	r3, r0
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8002dbe:	48a9      	ldr	r0, [pc, #676]	; (8003064 <lv_style_init+0x3d8>)
    lv_style_scr.line.rounded = 0;
 8002dc0:	7013      	strb	r3, [r2, #0]
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8002dc2:	f7ff ff5e 	bl	8002c82 <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4ba6      	ldr	r3, [pc, #664]	; (8003064 <lv_style_init+0x3d8>)
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8002dca:	4da7      	ldr	r5, [pc, #668]	; (8003068 <lv_style_init+0x3dc>)
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 8002dcc:	835a      	strh	r2, [r3, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 8002dce:	2201      	movs	r2, #1
 8002dd0:	839a      	strh	r2, [r3, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	82da      	strh	r2, [r3, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8002dd6:	2201      	movs	r2, #1
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8002dd8:	0019      	movs	r1, r3
 8002dda:	0028      	movs	r0, r5
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8002ddc:	831a      	strh	r2, [r3, #24]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8002dde:	f7ff ff50 	bl	8002c82 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8002de2:	221e      	movs	r2, #30
 8002de4:	1c68      	adds	r0, r5, #1
 8002de6:	7fc3      	ldrb	r3, [r0, #31]
 8002de8:	2107      	movs	r1, #7
 8002dea:	43a3      	bics	r3, r4
 8002dec:	4313      	orrs	r3, r2
 8002dee:	77c3      	strb	r3, [r0, #31]
 8002df0:	8c2b      	ldrh	r3, [r5, #32]
 8002df2:	4a9a      	ldr	r2, [pc, #616]	; (800305c <lv_style_init+0x3d0>)
 8002df4:	1ca8      	adds	r0, r5, #2
 8002df6:	4013      	ands	r3, r2
 8002df8:	22f0      	movs	r2, #240	; 0xf0
 8002dfa:	00d2      	lsls	r2, r2, #3
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	842b      	strh	r3, [r5, #32]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	400b      	ands	r3, r1
 8002e04:	3917      	subs	r1, #23
 8002e06:	430b      	orrs	r3, r1
 8002e08:	77c3      	strb	r3, [r0, #31]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8002e0a:	0028      	movs	r0, r5
 8002e0c:	3030      	adds	r0, #48	; 0x30
 8002e0e:	7803      	ldrb	r3, [r0, #0]
 8002e10:	43a3      	bics	r3, r4
 8002e12:	4333      	orrs	r3, r6
 8002e14:	7003      	strb	r3, [r0, #0]
 8002e16:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8002e18:	4e90      	ldr	r6, [pc, #576]	; (800305c <lv_style_init+0x3d0>)
 8002e1a:	4033      	ands	r3, r6
 8002e1c:	2607      	movs	r6, #7
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	862b      	strh	r3, [r5, #48]	; 0x30
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	4033      	ands	r3, r6
 8002e26:	430b      	orrs	r3, r1
 8002e28:	7043      	strb	r3, [r0, #1]
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8002e2a:	002b      	movs	r3, r5
 8002e2c:	3334      	adds	r3, #52	; 0x34
 8002e2e:	7818      	ldrb	r0, [r3, #0]
 8002e30:	3617      	adds	r6, #23
 8002e32:	43a0      	bics	r0, r4
 8002e34:	4330      	orrs	r0, r6
 8002e36:	7018      	strb	r0, [r3, #0]
 8002e38:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002e3a:	4e88      	ldr	r6, [pc, #544]	; (800305c <lv_style_init+0x3d0>)
 8002e3c:	4030      	ands	r0, r6
 8002e3e:	4302      	orrs	r2, r0
 8002e40:	2007      	movs	r0, #7
 8002e42:	86aa      	strh	r2, [r5, #52]	; 0x34
 8002e44:	0a12      	lsrs	r2, r2, #8
 8002e46:	4002      	ands	r2, r0
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	705a      	strb	r2, [r3, #1]
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8002e4c:	221b      	movs	r2, #27
 8002e4e:	78ab      	ldrb	r3, [r5, #2]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8002e50:	4984      	ldr	r1, [pc, #528]	; (8003064 <lv_style_init+0x3d8>)
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8002e52:	43a3      	bics	r3, r4
 8002e54:	4313      	orrs	r3, r2
 8002e56:	2294      	movs	r2, #148	; 0x94
 8002e58:	70ab      	strb	r3, [r5, #2]
 8002e5a:	886b      	ldrh	r3, [r5, #2]
 8002e5c:	00d2      	lsls	r2, r2, #3
 8002e5e:	4033      	ands	r3, r6
 8002e60:	4313      	orrs	r3, r2
 8002e62:	0002      	movs	r2, r0
 8002e64:	806b      	strh	r3, [r5, #2]
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	3249      	adds	r2, #73	; 0x49
 8002e6a:	4003      	ands	r3, r0
 8002e6c:	4313      	orrs	r3, r2
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8002e6e:	4e7f      	ldr	r6, [pc, #508]	; (800306c <lv_style_init+0x3e0>)
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8002e70:	70eb      	strb	r3, [r5, #3]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8002e72:	886b      	ldrh	r3, [r5, #2]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8002e74:	0030      	movs	r0, r6
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8002e76:	80ab      	strh	r3, [r5, #4]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8002e78:	f7ff ff03 	bl	8002c82 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8002e7c:	2104      	movs	r1, #4
 8002e7e:	1c72      	adds	r2, r6, #1
 8002e80:	7fd3      	ldrb	r3, [r2, #31]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8002e82:	4d7b      	ldr	r5, [pc, #492]	; (8003070 <lv_style_init+0x3e4>)
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8002e84:	43a3      	bics	r3, r4
 8002e86:	430b      	orrs	r3, r1
 8002e88:	77d3      	strb	r3, [r2, #31]
 8002e8a:	8c33      	ldrh	r3, [r6, #32]
 8002e8c:	4973      	ldr	r1, [pc, #460]	; (800305c <lv_style_init+0x3d0>)
 8002e8e:	1cb2      	adds	r2, r6, #2
 8002e90:	400b      	ands	r3, r1
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	0049      	lsls	r1, r1, #1
 8002e96:	430b      	orrs	r3, r1
 8002e98:	8433      	strh	r3, [r6, #32]
 8002e9a:	39f9      	subs	r1, #249	; 0xf9
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	400b      	ands	r3, r1
 8002ea0:	3119      	adds	r1, #25
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	77d3      	strb	r3, [r2, #31]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8002ea6:	0032      	movs	r2, r6
 8002ea8:	3230      	adds	r2, #48	; 0x30
 8002eaa:	7813      	ldrb	r3, [r2, #0]
 8002eac:	391c      	subs	r1, #28
 8002eae:	43a3      	bics	r3, r4
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	7013      	strb	r3, [r2, #0]
 8002eb4:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8002eb6:	4969      	ldr	r1, [pc, #420]	; (800305c <lv_style_init+0x3d0>)
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8002eb8:	0028      	movs	r0, r5
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8002eba:	400b      	ands	r3, r1
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	0049      	lsls	r1, r1, #1
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	8633      	strh	r3, [r6, #48]	; 0x30
 8002ec4:	39f9      	subs	r1, #249	; 0xf9
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	400b      	ands	r3, r1
 8002eca:	3119      	adds	r1, #25
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	7053      	strb	r3, [r2, #1]
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 8002ed0:	0032      	movs	r2, r6
 8002ed2:	3234      	adds	r2, #52	; 0x34
 8002ed4:	7813      	ldrb	r3, [r2, #0]
 8002ed6:	391c      	subs	r1, #28
 8002ed8:	43a3      	bics	r3, r4
 8002eda:	430b      	orrs	r3, r1
 8002edc:	7013      	strb	r3, [r2, #0]
 8002ede:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 8002ee0:	495e      	ldr	r1, [pc, #376]	; (800305c <lv_style_init+0x3d0>)
 8002ee2:	400b      	ands	r3, r1
 8002ee4:	2180      	movs	r1, #128	; 0x80
 8002ee6:	0049      	lsls	r1, r1, #1
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	86b3      	strh	r3, [r6, #52]	; 0x34
 8002eec:	39f9      	subs	r1, #249	; 0xf9
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	400b      	ands	r3, r1
 8002ef2:	3119      	adds	r1, #25
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	7053      	strb	r3, [r2, #1]
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8002ef8:	466b      	mov	r3, sp
 8002efa:	881b      	ldrh	r3, [r3, #0]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8002efc:	2208      	movs	r2, #8
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8002efe:	8073      	strh	r3, [r6, #2]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8002f00:	4b55      	ldr	r3, [pc, #340]	; (8003058 <lv_style_init+0x3cc>)
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8002f02:	0031      	movs	r1, r6
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8002f04:	889b      	ldrh	r3, [r3, #4]
 8002f06:	80b3      	strh	r3, [r6, #4]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	80f3      	strh	r3, [r6, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8002f0c:	7ab3      	ldrb	r3, [r6, #10]
 8002f0e:	43a3      	bics	r3, r4
 8002f10:	4313      	orrs	r3, r2
 8002f12:	72b3      	strb	r3, [r6, #10]
 8002f14:	8972      	ldrh	r2, [r6, #10]
 8002f16:	4b51      	ldr	r3, [pc, #324]	; (800305c <lv_style_init+0x3d0>)
 8002f18:	401a      	ands	r2, r3
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	2207      	movs	r2, #7
 8002f22:	8173      	strh	r3, [r6, #10]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	4013      	ands	r3, r2
 8002f28:	3239      	adds	r2, #57	; 0x39
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	72f3      	strb	r3, [r6, #11]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	81b3      	strh	r3, [r6, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8002f32:	234c      	movs	r3, #76	; 0x4c
 8002f34:	73f3      	strb	r3, [r6, #15]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8002f36:	f7ff fea4 	bl	8002c82 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 8002f3a:	201c      	movs	r0, #28
 8002f3c:	1c69      	adds	r1, r5, #1
 8002f3e:	7fcb      	ldrb	r3, [r1, #31]
 8002f40:	4a46      	ldr	r2, [pc, #280]	; (800305c <lv_style_init+0x3d0>)
 8002f42:	43a3      	bics	r3, r4
 8002f44:	4303      	orrs	r3, r0
 8002f46:	77cb      	strb	r3, [r1, #31]
 8002f48:	8c2b      	ldrh	r3, [r5, #32]
 8002f4a:	2607      	movs	r6, #7
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	22e0      	movs	r2, #224	; 0xe0
 8002f50:	00d2      	lsls	r2, r2, #3
 8002f52:	4313      	orrs	r3, r2
 8002f54:	842b      	strh	r3, [r5, #32]
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	4033      	ands	r3, r6
 8002f5a:	3e27      	subs	r6, #39	; 0x27
 8002f5c:	1ca9      	adds	r1, r5, #2
 8002f5e:	4333      	orrs	r3, r6
 8002f60:	77cb      	strb	r3, [r1, #31]
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 8002f62:	002b      	movs	r3, r5
 8002f64:	3330      	adds	r3, #48	; 0x30
 8002f66:	7819      	ldrb	r1, [r3, #0]
 8002f68:	43a1      	bics	r1, r4
 8002f6a:	4308      	orrs	r0, r1
 8002f6c:	7018      	strb	r0, [r3, #0]
 8002f6e:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8002f70:	483a      	ldr	r0, [pc, #232]	; (800305c <lv_style_init+0x3d0>)
 8002f72:	4001      	ands	r1, r0
 8002f74:	430a      	orrs	r2, r1
 8002f76:	2107      	movs	r1, #7
 8002f78:	862a      	strh	r2, [r5, #48]	; 0x30
 8002f7a:	0a12      	lsrs	r2, r2, #8
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	4332      	orrs	r2, r6
 8002f80:	705a      	strb	r2, [r3, #1]
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 8002f82:	002a      	movs	r2, r5
 8002f84:	3234      	adds	r2, #52	; 0x34
 8002f86:	7813      	ldrb	r3, [r2, #0]
 8002f88:	3111      	adds	r1, #17
 8002f8a:	43a3      	bics	r3, r4
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	7013      	strb	r3, [r2, #0]
 8002f90:	23c0      	movs	r3, #192	; 0xc0
 8002f92:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4001      	ands	r1, r0
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	2107      	movs	r1, #7
 8002f9c:	86ab      	strh	r3, [r5, #52]	; 0x34
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	3947      	subs	r1, #71	; 0x47
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	7053      	strb	r3, [r2, #1]
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8002fa8:	2218      	movs	r2, #24
 8002faa:	78ab      	ldrb	r3, [r5, #2]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8002fac:	4e31      	ldr	r6, [pc, #196]	; (8003074 <lv_style_init+0x3e8>)
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8002fae:	43a3      	bics	r3, r4
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	70ab      	strb	r3, [r5, #2]
 8002fb4:	2398      	movs	r3, #152	; 0x98
 8002fb6:	886a      	ldrh	r2, [r5, #2]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4002      	ands	r2, r0
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	2207      	movs	r2, #7
 8002fc0:	806b      	strh	r3, [r5, #2]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	3261      	adds	r2, #97	; 0x61
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	70eb      	strb	r3, [r5, #3]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8002fcc:	2311      	movs	r3, #17
 8002fce:	792a      	ldrb	r2, [r5, #4]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8002fd0:	4924      	ldr	r1, [pc, #144]	; (8003064 <lv_style_init+0x3d8>)
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8002fd2:	43a2      	bics	r2, r4
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	712b      	strb	r3, [r5, #4]
 8002fd8:	23b0      	movs	r3, #176	; 0xb0
 8002fda:	88aa      	ldrh	r2, [r5, #4]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4002      	ands	r2, r0
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	80ab      	strh	r3, [r5, #4]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	4013      	ands	r3, r2
 8002fea:	3221      	adds	r2, #33	; 0x21
 8002fec:	4313      	orrs	r3, r2
 8002fee:	716b      	strb	r3, [r5, #5]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 8002ff0:	7aab      	ldrb	r3, [r5, #10]
 8002ff2:	3a20      	subs	r2, #32
 8002ff4:	43a3      	bics	r3, r4
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	72ab      	strb	r3, [r5, #10]
 8002ffa:	23b0      	movs	r3, #176	; 0xb0
 8002ffc:	896a      	ldrh	r2, [r5, #10]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4002      	ands	r2, r0
 8003002:	4313      	orrs	r3, r2
 8003004:	2207      	movs	r2, #7
 8003006:	816b      	strh	r3, [r5, #10]
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	4013      	ands	r3, r2
 800300c:	3209      	adds	r2, #9
 800300e:	4313      	orrs	r3, r2
 8003010:	72eb      	strb	r3, [r5, #11]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8003012:	0030      	movs	r0, r6
 8003014:	f7ff fe35 	bl	8002c82 <lv_style_copy>
    lv_style_transp.glass             = 1;
 8003018:	2201      	movs	r2, #1
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800301a:	4d17      	ldr	r5, [pc, #92]	; (8003078 <lv_style_init+0x3ec>)
    lv_style_transp.glass             = 1;
 800301c:	7833      	ldrb	r3, [r6, #0]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800301e:	0031      	movs	r1, r6
    lv_style_transp.glass             = 1;
 8003020:	4313      	orrs	r3, r2
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8003022:	0028      	movs	r0, r5
    lv_style_transp.glass             = 1;
 8003024:	7033      	strb	r3, [r6, #0]
    lv_style_transp.body.border.width = 0;
 8003026:	81b7      	strh	r7, [r6, #12]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8003028:	7237      	strb	r7, [r6, #8]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800302a:	f7ff fe2a 	bl	8002c82 <lv_style_copy>
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800302e:	4e13      	ldr	r6, [pc, #76]	; (800307c <lv_style_init+0x3f0>)
 8003030:	0029      	movs	r1, r5
 8003032:	0030      	movs	r0, r6
    lv_style_transp_fit.body.padding.left   = 0;
 8003034:	836f      	strh	r7, [r5, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 8003036:	83af      	strh	r7, [r5, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 8003038:	82ef      	strh	r7, [r5, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 800303a:	832f      	strh	r7, [r5, #24]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800303c:	f7ff fe21 	bl	8002c82 <lv_style_copy>
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8003040:	4d0f      	ldr	r5, [pc, #60]	; (8003080 <lv_style_init+0x3f4>)
 8003042:	4908      	ldr	r1, [pc, #32]	; (8003064 <lv_style_init+0x3d8>)
 8003044:	0028      	movs	r0, r5
    lv_style_transp_tight.body.padding.inner = 0;
 8003046:	83f7      	strh	r7, [r6, #30]
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8003048:	f7ff fe1b 	bl	8002c82 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 800304c:	231a      	movs	r3, #26
 800304e:	78aa      	ldrb	r2, [r5, #2]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8003050:	2008      	movs	r0, #8
 8003052:	e017      	b.n	8003084 <lv_style_init+0x3f8>
 8003054:	20004ab4 	.word	0x20004ab4
 8003058:	08004e70 	.word	0x08004e70
 800305c:	fffff81f 	.word	0xfffff81f
 8003060:	20000030 	.word	0x20000030
 8003064:	20004a3c 	.word	0x20004a3c
 8003068:	20004b2c 	.word	0x20004b2c
 800306c:	2000494c 	.word	0x2000494c
 8003070:	2000485c 	.word	0x2000485c
 8003074:	20004898 	.word	0x20004898
 8003078:	20004a00 	.word	0x20004a00
 800307c:	20004988 	.word	0x20004988
 8003080:	200048d4 	.word	0x200048d4
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8003084:	43a2      	bics	r2, r4
 8003086:	4313      	orrs	r3, r2
 8003088:	70ab      	strb	r3, [r5, #2]
 800308a:	886a      	ldrh	r2, [r5, #2]
 800308c:	4bf1      	ldr	r3, [pc, #964]	; (8003454 <lv_style_init+0x7c8>)
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 800308e:	1c69      	adds	r1, r5, #1
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8003090:	401a      	ands	r2, r3
 8003092:	23a0      	movs	r3, #160	; 0xa0
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4313      	orrs	r3, r2
 8003098:	2207      	movs	r2, #7
 800309a:	806b      	strh	r3, [r5, #2]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	4013      	ands	r3, r2
 80030a0:	3269      	adds	r2, #105	; 0x69
 80030a2:	4313      	orrs	r3, r2
 80030a4:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 80030a6:	230b      	movs	r3, #11
 80030a8:	792a      	ldrb	r2, [r5, #4]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80030aa:	4240      	negs	r0, r0
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 80030ac:	43a2      	bics	r2, r4
 80030ae:	4313      	orrs	r3, r2
 80030b0:	712b      	strb	r3, [r5, #4]
 80030b2:	88aa      	ldrh	r2, [r5, #4]
 80030b4:	4be7      	ldr	r3, [pc, #924]	; (8003454 <lv_style_init+0x7c8>)
    lv_style_btn_rel.body.shadow.width   = 0;
 80030b6:	826f      	strh	r7, [r5, #18]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 80030b8:	401a      	ands	r2, r3
 80030ba:	23e0      	movs	r3, #224	; 0xe0
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4313      	orrs	r3, r2
 80030c0:	2207      	movs	r2, #7
 80030c2:	80ab      	strh	r3, [r5, #4]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	4013      	ands	r3, r2
 80030c8:	3211      	adds	r2, #17
 80030ca:	4313      	orrs	r3, r2
 80030cc:	716b      	strb	r3, [r5, #5]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 80030ce:	2301      	movs	r3, #1
 80030d0:	80eb      	strh	r3, [r5, #6]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 80030d2:	2306      	movs	r3, #6
 80030d4:	836b      	strh	r3, [r5, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 80030d6:	2306      	movs	r3, #6
 80030d8:	83ab      	strh	r3, [r5, #28]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 80030da:	2304      	movs	r3, #4
 80030dc:	82eb      	strh	r3, [r5, #22]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 80030de:	2304      	movs	r3, #4
 80030e0:	832b      	strh	r3, [r5, #24]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 80030e2:	2302      	movs	r3, #2
 80030e4:	83eb      	strh	r3, [r5, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 80030e6:	2305      	movs	r3, #5
 80030e8:	7aaa      	ldrb	r2, [r5, #10]
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 80030ea:	27c0      	movs	r7, #192	; 0xc0
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 80030ec:	43a2      	bics	r2, r4
 80030ee:	4313      	orrs	r3, r2
 80030f0:	72ab      	strb	r3, [r5, #10]
 80030f2:	896a      	ldrh	r2, [r5, #10]
 80030f4:	4bd7      	ldr	r3, [pc, #860]	; (8003454 <lv_style_init+0x7c8>)
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 80030f6:	00bf      	lsls	r7, r7, #2
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 80030f8:	401a      	ands	r2, r3
 80030fa:	23c0      	movs	r3, #192	; 0xc0
 80030fc:	4313      	orrs	r3, r2
 80030fe:	816b      	strh	r3, [r5, #10]
 8003100:	2308      	movs	r3, #8
 8003102:	72eb      	strb	r3, [r5, #11]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8003104:	2301      	movs	r3, #1
 8003106:	81ab      	strh	r3, [r5, #12]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 8003108:	23b2      	movs	r3, #178	; 0xb2
 800310a:	73eb      	strb	r3, [r5, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 800310c:	466b      	mov	r3, sp
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 800310e:	22fc      	movs	r2, #252	; 0xfc
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8003110:	889b      	ldrh	r3, [r3, #4]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8003112:	00d2      	lsls	r2, r2, #3
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8003114:	822b      	strh	r3, [r5, #16]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8003116:	7fcb      	ldrb	r3, [r1, #31]
 8003118:	4323      	orrs	r3, r4
 800311a:	77cb      	strb	r3, [r1, #31]
 800311c:	8c2b      	ldrh	r3, [r5, #32]
 800311e:	1ca9      	adds	r1, r5, #2
 8003120:	4313      	orrs	r3, r2
 8003122:	842b      	strh	r3, [r5, #32]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	4303      	orrs	r3, r0
 8003128:	77cb      	strb	r3, [r1, #31]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 800312a:	002b      	movs	r3, r5
 800312c:	3330      	adds	r3, #48	; 0x30
 800312e:	7819      	ldrb	r1, [r3, #0]
 8003130:	4321      	orrs	r1, r4
 8003132:	7019      	strb	r1, [r3, #0]
 8003134:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8003136:	4ec8      	ldr	r6, [pc, #800]	; (8003458 <lv_style_init+0x7cc>)
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 8003138:	430a      	orrs	r2, r1
 800313a:	862a      	strh	r2, [r5, #48]	; 0x30
 800313c:	0a12      	lsrs	r2, r2, #8
 800313e:	4302      	orrs	r2, r0
 8003140:	705a      	strb	r2, [r3, #1]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8003142:	0029      	movs	r1, r5
 8003144:	0030      	movs	r0, r6
 8003146:	f7ff fd9c 	bl	8002c82 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 800314a:	2212      	movs	r2, #18
 800314c:	78b3      	ldrb	r3, [r6, #2]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800314e:	2118      	movs	r1, #24
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8003150:	43a3      	bics	r3, r4
 8003152:	4313      	orrs	r3, r2
 8003154:	70b3      	strb	r3, [r6, #2]
 8003156:	8873      	ldrh	r3, [r6, #2]
 8003158:	4abe      	ldr	r2, [pc, #760]	; (8003454 <lv_style_init+0x7c8>)
 800315a:	4013      	ands	r3, r2
 800315c:	2207      	movs	r2, #7
 800315e:	433b      	orrs	r3, r7
 8003160:	8073      	strh	r3, [r6, #2]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	4013      	ands	r3, r2
 8003166:	3229      	adds	r2, #41	; 0x29
 8003168:	4313      	orrs	r3, r2
 800316a:	70f3      	strb	r3, [r6, #3]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 800316c:	7933      	ldrb	r3, [r6, #4]
 800316e:	3a29      	subs	r2, #41	; 0x29
 8003170:	43a3      	bics	r3, r4
 8003172:	4313      	orrs	r3, r2
 8003174:	7133      	strb	r3, [r6, #4]
 8003176:	88b2      	ldrh	r2, [r6, #4]
 8003178:	4bb6      	ldr	r3, [pc, #728]	; (8003454 <lv_style_init+0x7c8>)
 800317a:	401a      	ands	r2, r3
 800317c:	2390      	movs	r3, #144	; 0x90
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4313      	orrs	r3, r2
 8003182:	2207      	movs	r2, #7
 8003184:	80b3      	strh	r3, [r6, #4]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	4013      	ands	r3, r2
 800318a:	3209      	adds	r2, #9
 800318c:	4313      	orrs	r3, r2
 800318e:	7173      	strb	r3, [r6, #5]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8003190:	1c72      	adds	r2, r6, #1
 8003192:	7fd3      	ldrb	r3, [r2, #31]
 8003194:	43a3      	bics	r3, r4
 8003196:	430b      	orrs	r3, r1
 8003198:	77d3      	strb	r3, [r2, #31]
 800319a:	8c33      	ldrh	r3, [r6, #32]
 800319c:	49ad      	ldr	r1, [pc, #692]	; (8003454 <lv_style_init+0x7c8>)
 800319e:	1cb2      	adds	r2, r6, #2
 80031a0:	400b      	ands	r3, r1
 80031a2:	21b4      	movs	r1, #180	; 0xb4
 80031a4:	00c9      	lsls	r1, r1, #3
 80031a6:	430b      	orrs	r3, r1
 80031a8:	2107      	movs	r1, #7
 80031aa:	8433      	strh	r3, [r6, #32]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	400b      	ands	r3, r1
 80031b0:	3967      	subs	r1, #103	; 0x67
 80031b2:	430b      	orrs	r3, r1
 80031b4:	77d3      	strb	r3, [r2, #31]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 80031b6:	0032      	movs	r2, r6
 80031b8:	3230      	adds	r2, #48	; 0x30
 80031ba:	7813      	ldrb	r3, [r2, #0]
 80031bc:	3178      	adds	r1, #120	; 0x78
 80031be:	43a3      	bics	r3, r4
 80031c0:	430b      	orrs	r3, r1
 80031c2:	7013      	strb	r3, [r2, #0]
 80031c4:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 80031c6:	49a3      	ldr	r1, [pc, #652]	; (8003454 <lv_style_init+0x7c8>)
 80031c8:	400b      	ands	r3, r1
 80031ca:	21b4      	movs	r1, #180	; 0xb4
 80031cc:	00c9      	lsls	r1, r1, #3
 80031ce:	430b      	orrs	r3, r1
 80031d0:	2107      	movs	r1, #7
 80031d2:	8633      	strh	r3, [r6, #48]	; 0x30
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	400b      	ands	r3, r1
 80031d8:	3967      	subs	r1, #103	; 0x67
 80031da:	430b      	orrs	r3, r1
 80031dc:	7053      	strb	r3, [r2, #1]
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80031de:	0032      	movs	r2, r6
 80031e0:	3234      	adds	r2, #52	; 0x34
 80031e2:	7813      	ldrb	r3, [r2, #0]
 80031e4:	3178      	adds	r1, #120	; 0x78
 80031e6:	43a3      	bics	r3, r4
 80031e8:	430b      	orrs	r3, r1
 80031ea:	7013      	strb	r3, [r2, #0]
 80031ec:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 80031ee:	4999      	ldr	r1, [pc, #612]	; (8003454 <lv_style_init+0x7c8>)
 80031f0:	400b      	ands	r3, r1
 80031f2:	21b4      	movs	r1, #180	; 0xb4
 80031f4:	00c9      	lsls	r1, r1, #3
 80031f6:	430b      	orrs	r3, r1
 80031f8:	2107      	movs	r1, #7
 80031fa:	86b3      	strh	r3, [r6, #52]	; 0x34
 80031fc:	0a1b      	lsrs	r3, r3, #8
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 80031fe:	4e97      	ldr	r6, [pc, #604]	; (800345c <lv_style_init+0x7d0>)
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8003200:	400b      	ands	r3, r1
 8003202:	3967      	subs	r1, #103	; 0x67
 8003204:	430b      	orrs	r3, r1
 8003206:	7053      	strb	r3, [r2, #1]
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 8003208:	0029      	movs	r1, r5
 800320a:	0030      	movs	r0, r6
 800320c:	f7ff fd39 	bl	8002c82 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8003210:	2204      	movs	r2, #4
 8003212:	78b3      	ldrb	r3, [r6, #2]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8003214:	1c70      	adds	r0, r6, #1
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8003216:	43a3      	bics	r3, r4
 8003218:	4313      	orrs	r3, r2
 800321a:	70b3      	strb	r3, [r6, #2]
 800321c:	8872      	ldrh	r2, [r6, #2]
 800321e:	4b8d      	ldr	r3, [pc, #564]	; (8003454 <lv_style_init+0x7c8>)
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8003220:	2107      	movs	r1, #7
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8003222:	401a      	ands	r2, r3
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	4313      	orrs	r3, r2
 8003228:	8073      	strh	r3, [r6, #2]
 800322a:	2308      	movs	r3, #8
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 800322c:	2212      	movs	r2, #18
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 800322e:	70f3      	strb	r3, [r6, #3]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8003230:	7933      	ldrb	r3, [r6, #4]
 8003232:	43a3      	bics	r3, r4
 8003234:	4313      	orrs	r3, r2
 8003236:	7133      	strb	r3, [r6, #4]
 8003238:	88b3      	ldrh	r3, [r6, #4]
 800323a:	4a86      	ldr	r2, [pc, #536]	; (8003454 <lv_style_init+0x7c8>)
 800323c:	4013      	ands	r3, r2
 800323e:	431f      	orrs	r7, r3
 8003240:	2307      	movs	r3, #7
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8003242:	2201      	movs	r2, #1
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8003244:	80b7      	strh	r7, [r6, #4]
 8003246:	0a3f      	lsrs	r7, r7, #8
 8003248:	401f      	ands	r7, r3
 800324a:	3329      	adds	r3, #41	; 0x29
 800324c:	431f      	orrs	r7, r3
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800324e:	7ab3      	ldrb	r3, [r6, #10]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8003250:	7177      	strb	r7, [r6, #5]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8003252:	43a3      	bics	r3, r4
 8003254:	4313      	orrs	r3, r2
 8003256:	72b3      	strb	r3, [r6, #10]
 8003258:	8973      	ldrh	r3, [r6, #10]
 800325a:	4a7e      	ldr	r2, [pc, #504]	; (8003454 <lv_style_init+0x7c8>)
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 800325c:	271e      	movs	r7, #30
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800325e:	4013      	ands	r3, r2
 8003260:	2220      	movs	r2, #32
 8003262:	4313      	orrs	r3, r2
 8003264:	8173      	strh	r3, [r6, #10]
 8003266:	2300      	movs	r3, #0
 8003268:	72f3      	strb	r3, [r6, #11]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800326a:	7fc3      	ldrb	r3, [r0, #31]
 800326c:	3a02      	subs	r2, #2
 800326e:	43a3      	bics	r3, r4
 8003270:	4313      	orrs	r3, r2
 8003272:	77c3      	strb	r3, [r0, #31]
 8003274:	8c33      	ldrh	r3, [r6, #32]
 8003276:	4a77      	ldr	r2, [pc, #476]	; (8003454 <lv_style_init+0x7c8>)
 8003278:	1cb0      	adds	r0, r6, #2
 800327a:	4013      	ands	r3, r2
 800327c:	22dc      	movs	r2, #220	; 0xdc
 800327e:	00d2      	lsls	r2, r2, #3
 8003280:	4313      	orrs	r3, r2
 8003282:	8433      	strh	r3, [r6, #32]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	400b      	ands	r3, r1
 8003288:	393f      	subs	r1, #63	; 0x3f
 800328a:	430b      	orrs	r3, r1
 800328c:	77c3      	strb	r3, [r0, #31]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 800328e:	0030      	movs	r0, r6
 8003290:	3030      	adds	r0, #48	; 0x30
 8003292:	7803      	ldrb	r3, [r0, #0]
 8003294:	43a3      	bics	r3, r4
 8003296:	433b      	orrs	r3, r7
 8003298:	7003      	strb	r3, [r0, #0]
 800329a:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800329c:	4f6d      	ldr	r7, [pc, #436]	; (8003454 <lv_style_init+0x7c8>)
 800329e:	403b      	ands	r3, r7
 80032a0:	2707      	movs	r7, #7
 80032a2:	4313      	orrs	r3, r2
 80032a4:	8633      	strh	r3, [r6, #48]	; 0x30
 80032a6:	0a1b      	lsrs	r3, r3, #8
 80032a8:	403b      	ands	r3, r7
 80032aa:	430b      	orrs	r3, r1
 80032ac:	7043      	strb	r3, [r0, #1]
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80032ae:	0033      	movs	r3, r6
 80032b0:	3334      	adds	r3, #52	; 0x34
 80032b2:	7818      	ldrb	r0, [r3, #0]
 80032b4:	3717      	adds	r7, #23
 80032b6:	43a0      	bics	r0, r4
 80032b8:	4338      	orrs	r0, r7
 80032ba:	7018      	strb	r0, [r3, #0]
 80032bc:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
 80032be:	4f65      	ldr	r7, [pc, #404]	; (8003454 <lv_style_init+0x7c8>)
 80032c0:	4038      	ands	r0, r7
 80032c2:	4302      	orrs	r2, r0
 80032c4:	2007      	movs	r0, #7
 80032c6:	86b2      	strh	r2, [r6, #52]	; 0x34
 80032c8:	0a12      	lsrs	r2, r2, #8
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 80032ca:	4f65      	ldr	r7, [pc, #404]	; (8003460 <lv_style_init+0x7d4>)
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80032cc:	4002      	ands	r2, r0
 80032ce:	430a      	orrs	r2, r1
 80032d0:	705a      	strb	r2, [r3, #1]
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 80032d2:	0031      	movs	r1, r6
 80032d4:	0038      	movs	r0, r7
 80032d6:	f7ff fcd4 	bl	8002c82 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80032da:	2204      	movs	r2, #4
 80032dc:	78bb      	ldrb	r3, [r7, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 80032de:	260e      	movs	r6, #14
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80032e0:	43a3      	bics	r3, r4
 80032e2:	4313      	orrs	r3, r2
 80032e4:	70bb      	strb	r3, [r7, #2]
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	4b5a      	ldr	r3, [pc, #360]	; (8003454 <lv_style_init+0x7c8>)
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80032ea:	2118      	movs	r1, #24
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80032ec:	401a      	ands	r2, r3
 80032ee:	23a0      	movs	r3, #160	; 0xa0
 80032f0:	4313      	orrs	r3, r2
 80032f2:	807b      	strh	r3, [r7, #2]
 80032f4:	2300      	movs	r3, #0
 80032f6:	70fb      	strb	r3, [r7, #3]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 80032f8:	793b      	ldrb	r3, [r7, #4]
 80032fa:	43a3      	bics	r3, r4
 80032fc:	4333      	orrs	r3, r6
 80032fe:	713b      	strb	r3, [r7, #4]
 8003300:	88ba      	ldrh	r2, [r7, #4]
 8003302:	4b54      	ldr	r3, [pc, #336]	; (8003454 <lv_style_init+0x7c8>)
 8003304:	401a      	ands	r2, r3
 8003306:	2398      	movs	r3, #152	; 0x98
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4313      	orrs	r3, r2
 800330c:	2207      	movs	r2, #7
 800330e:	80bb      	strh	r3, [r7, #4]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	4013      	ands	r3, r2
 8003314:	3221      	adds	r2, #33	; 0x21
 8003316:	4313      	orrs	r3, r2
 8003318:	717b      	strb	r3, [r7, #5]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800331a:	1c7a      	adds	r2, r7, #1
 800331c:	7fd3      	ldrb	r3, [r2, #31]
 800331e:	43a3      	bics	r3, r4
 8003320:	430b      	orrs	r3, r1
 8003322:	77d3      	strb	r3, [r2, #31]
 8003324:	8c3b      	ldrh	r3, [r7, #32]
 8003326:	494b      	ldr	r1, [pc, #300]	; (8003454 <lv_style_init+0x7c8>)
 8003328:	1cba      	adds	r2, r7, #2
 800332a:	400b      	ands	r3, r1
 800332c:	21b4      	movs	r1, #180	; 0xb4
 800332e:	00c9      	lsls	r1, r1, #3
 8003330:	430b      	orrs	r3, r1
 8003332:	2107      	movs	r1, #7
 8003334:	843b      	strh	r3, [r7, #32]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	400b      	ands	r3, r1
 800333a:	3967      	subs	r1, #103	; 0x67
 800333c:	430b      	orrs	r3, r1
 800333e:	77d3      	strb	r3, [r2, #31]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8003340:	003a      	movs	r2, r7
 8003342:	3230      	adds	r2, #48	; 0x30
 8003344:	7813      	ldrb	r3, [r2, #0]
 8003346:	3178      	adds	r1, #120	; 0x78
 8003348:	43a3      	bics	r3, r4
 800334a:	430b      	orrs	r3, r1
 800334c:	7013      	strb	r3, [r2, #0]
 800334e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003350:	4940      	ldr	r1, [pc, #256]	; (8003454 <lv_style_init+0x7c8>)
 8003352:	400b      	ands	r3, r1
 8003354:	21b4      	movs	r1, #180	; 0xb4
 8003356:	00c9      	lsls	r1, r1, #3
 8003358:	430b      	orrs	r3, r1
 800335a:	2107      	movs	r1, #7
 800335c:	863b      	strh	r3, [r7, #48]	; 0x30
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	400b      	ands	r3, r1
 8003362:	3967      	subs	r1, #103	; 0x67
 8003364:	430b      	orrs	r3, r1
 8003366:	7053      	strb	r3, [r2, #1]
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8003368:	003a      	movs	r2, r7
 800336a:	3234      	adds	r2, #52	; 0x34
 800336c:	7813      	ldrb	r3, [r2, #0]
 800336e:	3178      	adds	r1, #120	; 0x78
 8003370:	43a3      	bics	r3, r4
 8003372:	430b      	orrs	r3, r1
 8003374:	7013      	strb	r3, [r2, #0]
 8003376:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003378:	4936      	ldr	r1, [pc, #216]	; (8003454 <lv_style_init+0x7c8>)
 800337a:	400b      	ands	r3, r1
 800337c:	21b4      	movs	r1, #180	; 0xb4
 800337e:	00c9      	lsls	r1, r1, #3
 8003380:	430b      	orrs	r3, r1
 8003382:	2107      	movs	r1, #7
 8003384:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003386:	0a1b      	lsrs	r3, r3, #8
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8003388:	4f36      	ldr	r7, [pc, #216]	; (8003464 <lv_style_init+0x7d8>)
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800338a:	400b      	ands	r3, r1
 800338c:	3967      	subs	r1, #103	; 0x67
 800338e:	430b      	orrs	r3, r1
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8003390:	0038      	movs	r0, r7
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8003392:	7053      	strb	r3, [r2, #1]
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8003394:	0029      	movs	r1, r5
 8003396:	f7ff fc74 	bl	8002c82 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 800339a:	221b      	movs	r2, #27
 800339c:	78bb      	ldrb	r3, [r7, #2]
 800339e:	2107      	movs	r1, #7
 80033a0:	43a3      	bics	r3, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	70bb      	strb	r3, [r7, #2]
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <lv_style_init+0x7c8>)
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 80033aa:	201b      	movs	r0, #27
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 80033ac:	4013      	ands	r3, r2
 80033ae:	22d8      	movs	r2, #216	; 0xd8
 80033b0:	00d2      	lsls	r2, r2, #3
 80033b2:	4313      	orrs	r3, r2
 80033b4:	807b      	strh	r3, [r7, #2]
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	400b      	ands	r3, r1
 80033ba:	392f      	subs	r1, #47	; 0x2f
 80033bc:	430b      	orrs	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 80033c0:	793b      	ldrb	r3, [r7, #4]
 80033c2:	43a3      	bics	r3, r4
 80033c4:	4303      	orrs	r3, r0
 80033c6:	713b      	strb	r3, [r7, #4]
 80033c8:	88bb      	ldrh	r3, [r7, #4]
 80033ca:	4822      	ldr	r0, [pc, #136]	; (8003454 <lv_style_init+0x7c8>)
 80033cc:	4003      	ands	r3, r0
 80033ce:	431a      	orrs	r2, r3
 80033d0:	2307      	movs	r3, #7
 80033d2:	80ba      	strh	r2, [r7, #4]
 80033d4:	0a12      	lsrs	r2, r2, #8
 80033d6:	401a      	ands	r2, r3
 80033d8:	430a      	orrs	r2, r1
 80033da:	717a      	strb	r2, [r7, #5]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 80033dc:	2212      	movs	r2, #18
 80033de:	7abb      	ldrb	r3, [r7, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 80033e0:	1c79      	adds	r1, r7, #1
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 80033e2:	43a3      	bics	r3, r4
 80033e4:	4313      	orrs	r3, r2
 80033e6:	72bb      	strb	r3, [r7, #10]
 80033e8:	2390      	movs	r3, #144	; 0x90
 80033ea:	897a      	ldrh	r2, [r7, #10]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4002      	ands	r2, r0
 80033f0:	4313      	orrs	r3, r2
 80033f2:	2207      	movs	r2, #7
 80033f4:	817b      	strh	r3, [r7, #10]
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	4013      	ands	r3, r2
 80033fa:	3a77      	subs	r2, #119	; 0x77
 80033fc:	4313      	orrs	r3, r2
 80033fe:	72fb      	strb	r3, [r7, #11]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8003400:	7fcb      	ldrb	r3, [r1, #31]
 8003402:	22e0      	movs	r2, #224	; 0xe0
 8003404:	43a3      	bics	r3, r4
 8003406:	4333      	orrs	r3, r6
 8003408:	77cb      	strb	r3, [r1, #31]
 800340a:	8c3b      	ldrh	r3, [r7, #32]
 800340c:	0092      	lsls	r2, r2, #2
 800340e:	4003      	ands	r3, r0
 8003410:	2007      	movs	r0, #7
 8003412:	4313      	orrs	r3, r2
 8003414:	843b      	strh	r3, [r7, #32]
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	4003      	ands	r3, r0
 800341a:	3069      	adds	r0, #105	; 0x69
 800341c:	1cb9      	adds	r1, r7, #2
 800341e:	4303      	orrs	r3, r0
 8003420:	77cb      	strb	r3, [r1, #31]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 8003422:	0039      	movs	r1, r7
 8003424:	3130      	adds	r1, #48	; 0x30
 8003426:	780b      	ldrb	r3, [r1, #0]
 8003428:	480a      	ldr	r0, [pc, #40]	; (8003454 <lv_style_init+0x7c8>)
 800342a:	43a3      	bics	r3, r4
 800342c:	4333      	orrs	r3, r6
 800342e:	700b      	strb	r3, [r1, #0]
 8003430:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003432:	4003      	ands	r3, r0
 8003434:	2007      	movs	r0, #7
 8003436:	4313      	orrs	r3, r2
 8003438:	863b      	strh	r3, [r7, #48]	; 0x30
 800343a:	0a1b      	lsrs	r3, r3, #8
 800343c:	4003      	ands	r3, r0
 800343e:	3069      	adds	r0, #105	; 0x69
 8003440:	4303      	orrs	r3, r0
 8003442:	704b      	strb	r3, [r1, #1]
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 8003444:	003b      	movs	r3, r7
 8003446:	3334      	adds	r3, #52	; 0x34
 8003448:	7819      	ldrb	r1, [r3, #0]
 800344a:	4802      	ldr	r0, [pc, #8]	; (8003454 <lv_style_init+0x7c8>)
 800344c:	43a1      	bics	r1, r4
 800344e:	430e      	orrs	r6, r1
 8003450:	e00a      	b.n	8003468 <lv_style_init+0x7dc>
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	fffff81f 	.word	0xfffff81f
 8003458:	20004910 	.word	0x20004910
 800345c:	20004a78 	.word	0x20004a78
 8003460:	20004af0 	.word	0x20004af0
 8003464:	200049c4 	.word	0x200049c4
 8003468:	701e      	strb	r6, [r3, #0]
 800346a:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800346c:	4001      	ands	r1, r0
 800346e:	430a      	orrs	r2, r1
 8003470:	2107      	movs	r1, #7
 8003472:	86ba      	strh	r2, [r7, #52]	; 0x34
 8003474:	0a12      	lsrs	r2, r2, #8
 8003476:	400a      	ands	r2, r1
 8003478:	3169      	adds	r1, #105	; 0x69
 800347a:	430a      	orrs	r2, r1
 800347c:	705a      	strb	r2, [r3, #1]
}
 800347e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08003480 <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 8003480:	1f03      	subs	r3, r0, #4
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2000      	movs	r0, #0
 8003486:	2b0a      	cmp	r3, #10
 8003488:	d801      	bhi.n	800348e <lv_img_color_format_get_px_size+0xe>
 800348a:	4a01      	ldr	r2, [pc, #4]	; (8003490 <lv_img_color_format_get_px_size+0x10>)
 800348c:	5cd0      	ldrb	r0, [r2, r3]
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 800348e:	4770      	bx	lr
 8003490:	08004f10 	.word	0x08004f10

08003494 <lv_img_src_get_type>:
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;

    if(src == NULL) return img_src_type;
 8003494:	2303      	movs	r3, #3
 8003496:	2800      	cmp	r0, #0
 8003498:	d007      	beq.n	80034aa <lv_img_src_get_type+0x16>
    const uint8_t * u8_p = src;

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800349a:	7802      	ldrb	r2, [r0, #0]
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800349c:	3b02      	subs	r3, #2
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800349e:	0011      	movs	r1, r2
 80034a0:	3920      	subs	r1, #32
 80034a2:	295f      	cmp	r1, #95	; 0x5f
 80034a4:	d901      	bls.n	80034aa <lv_img_src_get_type+0x16>
    } else if(u8_p[0] >= 0x80) {
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 80034a6:	09d3      	lsrs	r3, r2, #7
 80034a8:	005b      	lsls	r3, r3, #1
    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	4770      	bx	lr
	...

080034b0 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 80034b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034b2:	0006      	movs	r6, r0

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 80034b4:	2400      	movs	r4, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 80034b6:	2728      	movs	r7, #40	; 0x28
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <lv_img_cache_invalidate_src+0x44>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	9301      	str	r3, [sp, #4]
    for(i = 0; i < entry_cnt; i++) {
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <lv_img_cache_invalidate_src+0x48>)
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	42a3      	cmp	r3, r4
 80034c4:	d800      	bhi.n	80034c8 <lv_img_cache_invalidate_src+0x18>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 80034c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 80034c8:	003d      	movs	r5, r7
 80034ca:	4365      	muls	r5, r4
 80034cc:	9b01      	ldr	r3, [sp, #4]
 80034ce:	195d      	adds	r5, r3, r5
 80034d0:	686b      	ldr	r3, [r5, #4]
 80034d2:	42b3      	cmp	r3, r6
 80034d4:	d001      	beq.n	80034da <lv_img_cache_invalidate_src+0x2a>
 80034d6:	2e00      	cmp	r6, #0
 80034d8:	d109      	bne.n	80034ee <lv_img_cache_invalidate_src+0x3e>
            if(cache[i].dec_dsc.src != NULL) {
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <lv_img_cache_invalidate_src+0x34>
                lv_img_decoder_close(&cache[i].dec_dsc);
 80034de:	0028      	movs	r0, r5
 80034e0:	f000 fad4 	bl	8003a8c <lv_img_decoder_close>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 80034e4:	003a      	movs	r2, r7
 80034e6:	2100      	movs	r1, #0
 80034e8:	0028      	movs	r0, r5
 80034ea:	f001 fb80 	bl	8004bee <memset>
    for(i = 0; i < entry_cnt; i++) {
 80034ee:	3401      	adds	r4, #1
 80034f0:	b2a4      	uxth	r4, r4
 80034f2:	e7e4      	b.n	80034be <lv_img_cache_invalidate_src+0xe>
 80034f4:	20004bac 	.word	0x20004bac
 80034f8:	2000127a 	.word	0x2000127a

080034fc <lv_img_cache_set_size>:
{
 80034fc:	b570      	push	{r4, r5, r6, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 80034fe:	4d14      	ldr	r5, [pc, #80]	; (8003550 <lv_img_cache_set_size+0x54>)
{
 8003500:	0004      	movs	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8003502:	682b      	ldr	r3, [r5, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 8003508:	2000      	movs	r0, #0
 800350a:	f7ff ffd1 	bl	80034b0 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800350e:	6828      	ldr	r0, [r5, #0]
 8003510:	f000 ff64 	bl	80043dc <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 8003514:	2628      	movs	r6, #40	; 0x28
 8003516:	4366      	muls	r6, r4
 8003518:	0030      	movs	r0, r6
 800351a:	f000 ff2b 	bl	8004374 <lv_mem_alloc>
 800351e:	6028      	str	r0, [r5, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 8003520:	2800      	cmp	r0, #0
 8003522:	d100      	bne.n	8003526 <lv_img_cache_set_size+0x2a>
 8003524:	e7fe      	b.n	8003524 <lv_img_cache_set_size+0x28>
    entry_cnt = new_entry_cnt;
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <lv_img_cache_set_size+0x58>)
 8003528:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
 800352a:	2400      	movs	r4, #0
 800352c:	42a6      	cmp	r6, r4
 800352e:	d100      	bne.n	8003532 <lv_img_cache_set_size+0x36>
}
 8003530:	bd70      	pop	{r4, r5, r6, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 8003532:	682b      	ldr	r3, [r5, #0]
 8003534:	2224      	movs	r2, #36	; 0x24
 8003536:	1918      	adds	r0, r3, r4
 8003538:	2100      	movs	r1, #0
 800353a:	f001 fb58 	bl	8004bee <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 800353e:	682b      	ldr	r3, [r5, #0]
 8003540:	2228      	movs	r2, #40	; 0x28
 8003542:	1918      	adds	r0, r3, r4
 8003544:	2100      	movs	r1, #0
 8003546:	f001 fb52 	bl	8004bee <memset>
 800354a:	3428      	adds	r4, #40	; 0x28
 800354c:	e7ee      	b.n	800352c <lv_img_cache_set_size+0x30>
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	20004bac 	.word	0x20004bac
 8003554:	2000127a 	.word	0x2000127a

08003558 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8003558:	b570      	push	{r4, r5, r6, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800355a:	6a0c      	ldr	r4, [r1, #32]
{
 800355c:	000d      	movs	r5, r1
    if(user_data) {
 800355e:	2c00      	cmp	r4, #0
 8003560:	d011      	beq.n	8003586 <lv_img_decoder_built_in_close+0x2e>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 8003562:	6820      	ldr	r0, [r4, #0]
 8003564:	2800      	cmp	r0, #0
 8003566:	d004      	beq.n	8003572 <lv_img_decoder_built_in_close+0x1a>
            lv_fs_close(user_data->f);
 8003568:	f000 fcc4 	bl	8003ef4 <lv_fs_close>
            lv_mem_free(user_data->f);
 800356c:	6820      	ldr	r0, [r4, #0]
 800356e:	f000 ff35 	bl	80043dc <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 8003572:	6860      	ldr	r0, [r4, #4]
 8003574:	2800      	cmp	r0, #0
 8003576:	d001      	beq.n	800357c <lv_img_decoder_built_in_close+0x24>
 8003578:	f000 ff30 	bl	80043dc <lv_mem_free>

        lv_mem_free(user_data);
 800357c:	0020      	movs	r0, r4
 800357e:	f000 ff2d 	bl	80043dc <lv_mem_free>

        dsc->user_data = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	622b      	str	r3, [r5, #32]
    }
}
 8003586:	bd70      	pop	{r4, r5, r6, pc}

08003588 <lv_img_decoder_built_in_open>:
{
 8003588:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800358a:	7b0b      	ldrb	r3, [r1, #12]
{
 800358c:	b085      	sub	sp, #20
 800358e:	0005      	movs	r5, r0
 8003590:	000c      	movs	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8003592:	2b01      	cmp	r3, #1
 8003594:	d12a      	bne.n	80035ec <lv_img_decoder_built_in_open+0x64>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8003596:	6848      	ldr	r0, [r1, #4]
 8003598:	f000 fd46 	bl	8004028 <lv_fs_get_ext>
 800359c:	494b      	ldr	r1, [pc, #300]	; (80036cc <lv_img_decoder_built_in_open+0x144>)
 800359e:	f7fc fdaf 	bl	8000100 <strcmp>
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d000      	beq.n	80035a8 <lv_img_decoder_built_in_open+0x20>
 80035a6:	e08e      	b.n	80036c6 <lv_img_decoder_built_in_open+0x13e>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 80035a8:	2202      	movs	r2, #2
 80035aa:	6861      	ldr	r1, [r4, #4]
 80035ac:	a802      	add	r0, sp, #8
 80035ae:	f000 fcf9 	bl	8003fa4 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 80035b2:	2800      	cmp	r0, #0
 80035b4:	d000      	beq.n	80035b8 <lv_img_decoder_built_in_open+0x30>
 80035b6:	e086      	b.n	80036c6 <lv_img_decoder_built_in_open+0x13e>
        if(dsc->user_data == NULL) {
 80035b8:	6a26      	ldr	r6, [r4, #32]
 80035ba:	2e00      	cmp	r6, #0
 80035bc:	d10a      	bne.n	80035d4 <lv_img_decoder_built_in_open+0x4c>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80035be:	3008      	adds	r0, #8
 80035c0:	f000 fed8 	bl	8004374 <lv_mem_alloc>
 80035c4:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d100      	bne.n	80035cc <lv_img_decoder_built_in_open+0x44>
 80035ca:	e7fe      	b.n	80035ca <lv_img_decoder_built_in_open+0x42>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 80035cc:	2208      	movs	r2, #8
 80035ce:	0031      	movs	r1, r6
 80035d0:	f001 fb0d 	bl	8004bee <memset>
        user_data->f                               = lv_mem_alloc(sizeof(f));
 80035d4:	2008      	movs	r0, #8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80035d6:	6a26      	ldr	r6, [r4, #32]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 80035d8:	f000 fecc 	bl	8004374 <lv_mem_alloc>
 80035dc:	6030      	str	r0, [r6, #0]
        if(user_data->f == NULL) {
 80035de:	2800      	cmp	r0, #0
 80035e0:	d100      	bne.n	80035e4 <lv_img_decoder_built_in_open+0x5c>
 80035e2:	e7fe      	b.n	80035e2 <lv_img_decoder_built_in_open+0x5a>
        memcpy(user_data->f, &f, sizeof(f));
 80035e4:	2208      	movs	r2, #8
 80035e6:	a902      	add	r1, sp, #8
 80035e8:	f001 faf8 	bl	8004bdc <memcpy>
    lv_img_cf_t cf = dsc->header.cf;
 80035ec:	7c20      	ldrb	r0, [r4, #16]
 80035ee:	06c0      	lsls	r0, r0, #27
 80035f0:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80035f2:	1f03      	subs	r3, r0, #4
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d808      	bhi.n	800360a <lv_img_decoder_built_in_open+0x82>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80035f8:	7b23      	ldrb	r3, [r4, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d132      	bne.n	8003664 <lv_img_decoder_built_in_open+0xdc>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 80035fe:	6863      	ldr	r3, [r4, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
            return LV_RES_OK;
 8003602:	2001      	movs	r0, #1
            dsc->img_data = NULL;
 8003604:	6163      	str	r3, [r4, #20]
}
 8003606:	b005      	add	sp, #20
 8003608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800360a:	1fc3      	subs	r3, r0, #7
 800360c:	2b03      	cmp	r3, #3
 800360e:	d853      	bhi.n	80036b8 <lv_img_decoder_built_in_open+0x130>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 8003610:	f7ff ff36 	bl	8003480 <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 8003614:	6a26      	ldr	r6, [r4, #32]
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 8003616:	0005      	movs	r5, r0
        if(dsc->user_data == NULL) {
 8003618:	2e00      	cmp	r6, #0
 800361a:	d10a      	bne.n	8003632 <lv_img_decoder_built_in_open+0xaa>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800361c:	2008      	movs	r0, #8
 800361e:	f000 fea9 	bl	8004374 <lv_mem_alloc>
 8003622:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 8003624:	2800      	cmp	r0, #0
 8003626:	d100      	bne.n	800362a <lv_img_decoder_built_in_open+0xa2>
 8003628:	e7fe      	b.n	8003628 <lv_img_decoder_built_in_open+0xa0>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800362a:	2208      	movs	r2, #8
 800362c:	0031      	movs	r1, r6
 800362e:	f001 fade 	bl	8004bee <memset>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8003632:	2702      	movs	r7, #2
 8003634:	40af      	lsls	r7, r5
 8003636:	0038      	movs	r0, r7
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8003638:	6a26      	ldr	r6, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800363a:	f000 fe9b 	bl	8004374 <lv_mem_alloc>
 800363e:	6070      	str	r0, [r6, #4]
        if(user_data->palette == NULL) {
 8003640:	2800      	cmp	r0, #0
 8003642:	d103      	bne.n	800364c <lv_img_decoder_built_in_open+0xc4>
            lv_mem_assert(user_data->f);
 8003644:	6833      	ldr	r3, [r6, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d100      	bne.n	800364c <lv_img_decoder_built_in_open+0xc4>
 800364a:	e7fe      	b.n	800364a <lv_img_decoder_built_in_open+0xc2>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800364c:	7b23      	ldrb	r3, [r4, #12]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d10a      	bne.n	8003668 <lv_img_decoder_built_in_open+0xe0>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 8003652:	2104      	movs	r1, #4
 8003654:	6830      	ldr	r0, [r6, #0]
 8003656:	f000 fc80 	bl	8003f5a <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 800365a:	ce03      	ldmia	r6!, {r0, r1}
 800365c:	2300      	movs	r3, #0
 800365e:	003a      	movs	r2, r7
 8003660:	f000 fc5d 	bl	8003f1e <lv_fs_read>
            dsc->img_data = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	e7cc      	b.n	8003602 <lv_img_decoder_built_in_open+0x7a>
 8003668:	2204      	movs	r2, #4
 800366a:	40aa      	lsls	r2, r5
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800366c:	6863      	ldr	r3, [r4, #4]
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
    color.ch.green = (uint16_t)(g8 >> 2);
    color.ch.red   = (uint16_t)(r8 >> 3);
 800366e:	271f      	movs	r7, #31
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	189a      	adds	r2, r3, r2
 8003674:	9201      	str	r2, [sp, #4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8003676:	2207      	movs	r2, #7
 8003678:	4694      	mov	ip, r2
            for(i = 0; i < palette_size; i++) {
 800367a:	9a01      	ldr	r2, [sp, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d0f1      	beq.n	8003664 <lv_img_decoder_built_in_open+0xdc>
    color.ch.blue  = (uint16_t)(b8 >> 3);
 8003680:	781e      	ldrb	r6, [r3, #0]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8003682:	7805      	ldrb	r5, [r0, #0]
 8003684:	08f6      	lsrs	r6, r6, #3
 8003686:	43bd      	bics	r5, r7
 8003688:	4335      	orrs	r5, r6
    color.ch.green = (uint16_t)(g8 >> 2);
 800368a:	7859      	ldrb	r1, [r3, #1]
    color.ch.red   = (uint16_t)(r8 >> 3);
 800368c:	789a      	ldrb	r2, [r3, #2]
 800368e:	7005      	strb	r5, [r0, #0]
 8003690:	253f      	movs	r5, #63	; 0x3f
    color.ch.green = (uint16_t)(g8 >> 2);
 8003692:	0889      	lsrs	r1, r1, #2
 8003694:	4029      	ands	r1, r5
 8003696:	4e0e      	ldr	r6, [pc, #56]	; (80036d0 <lv_img_decoder_built_in_open+0x148>)
 8003698:	8805      	ldrh	r5, [r0, #0]
 800369a:	0149      	lsls	r1, r1, #5
 800369c:	4035      	ands	r5, r6
 800369e:	4329      	orrs	r1, r5
 80036a0:	4665      	mov	r5, ip
    color.ch.red   = (uint16_t)(r8 >> 3);
 80036a2:	08d2      	lsrs	r2, r2, #3
 80036a4:	8001      	strh	r1, [r0, #0]
 80036a6:	403a      	ands	r2, r7
 80036a8:	0a09      	lsrs	r1, r1, #8
 80036aa:	00d2      	lsls	r2, r2, #3
 80036ac:	4029      	ands	r1, r5
 80036ae:	430a      	orrs	r2, r1
 80036b0:	7042      	strb	r2, [r0, #1]
 80036b2:	3304      	adds	r3, #4
 80036b4:	3002      	adds	r0, #2
 80036b6:	e7e0      	b.n	800367a <lv_img_decoder_built_in_open+0xf2>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 80036b8:	380b      	subs	r0, #11
 80036ba:	2803      	cmp	r0, #3
 80036bc:	d9d2      	bls.n	8003664 <lv_img_decoder_built_in_open+0xdc>
        lv_img_decoder_built_in_close(decoder, dsc);
 80036be:	0021      	movs	r1, r4
 80036c0:	0028      	movs	r0, r5
 80036c2:	f7ff ff49 	bl	8003558 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 80036c6:	2000      	movs	r0, #0
 80036c8:	e79d      	b.n	8003606 <lv_img_decoder_built_in_open+0x7e>
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	08004f1b 	.word	0x08004f1b
 80036d0:	fffff81f 	.word	0xfffff81f

080036d4 <lv_img_decoder_built_in_info>:
{
 80036d4:	b530      	push	{r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 80036d6:	0008      	movs	r0, r1
{
 80036d8:	b085      	sub	sp, #20
 80036da:	000d      	movs	r5, r1
 80036dc:	0014      	movs	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 80036de:	f7ff fed9 	bl	8003494 <lv_img_src_get_type>
 80036e2:	1e03      	subs	r3, r0, #0
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80036e4:	d11d      	bne.n	8003722 <lv_img_decoder_built_in_info+0x4e>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 80036e6:	782a      	ldrb	r2, [r5, #0]
 80036e8:	06d2      	lsls	r2, r2, #27
 80036ea:	0ed2      	lsrs	r2, r2, #27
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 80036ec:	1f11      	subs	r1, r2, #4
 80036ee:	290a      	cmp	r1, #10
 80036f0:	d815      	bhi.n	800371e <lv_img_decoder_built_in_info+0x4a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80036f2:	6820      	ldr	r0, [r4, #0]
 80036f4:	4923      	ldr	r1, [pc, #140]	; (8003784 <lv_img_decoder_built_in_info+0xb0>)
 80036f6:	682b      	ldr	r3, [r5, #0]
 80036f8:	4001      	ands	r1, r0
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80036fa:	201f      	movs	r0, #31
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80036fc:	02db      	lsls	r3, r3, #11
 80036fe:	0d5b      	lsrs	r3, r3, #21
 8003700:	029b      	lsls	r3, r3, #10
 8003702:	430b      	orrs	r3, r1
 8003704:	6023      	str	r3, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8003706:	886b      	ldrh	r3, [r5, #2]
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	0159      	lsls	r1, r3, #5
 800370c:	8863      	ldrh	r3, [r4, #2]
 800370e:	4003      	ands	r3, r0
 8003710:	430b      	orrs	r3, r1
 8003712:	8063      	strh	r3, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8003714:	7823      	ldrb	r3, [r4, #0]
 8003716:	4383      	bics	r3, r0
 8003718:	431a      	orrs	r2, r3
 800371a:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 800371c:	381e      	subs	r0, #30
}
 800371e:	b005      	add	sp, #20
 8003720:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 8003722:	2801      	cmp	r0, #1
 8003724:	d11a      	bne.n	800375c <lv_img_decoder_built_in_info+0x88>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 8003726:	2202      	movs	r2, #2
 8003728:	0029      	movs	r1, r5
 800372a:	a802      	add	r0, sp, #8
 800372c:	f000 fc3a 	bl	8003fa4 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 8003730:	2800      	cmp	r0, #0
 8003732:	d108      	bne.n	8003746 <lv_img_decoder_built_in_info+0x72>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 8003734:	ab01      	add	r3, sp, #4
 8003736:	2204      	movs	r2, #4
 8003738:	0021      	movs	r1, r4
 800373a:	a802      	add	r0, sp, #8
 800373c:	f000 fbef 	bl	8003f1e <lv_fs_read>
            lv_fs_close(&file);
 8003740:	a802      	add	r0, sp, #8
 8003742:	f000 fbd7 	bl	8003ef4 <lv_fs_close>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8003746:	221f      	movs	r2, #31
 8003748:	2000      	movs	r0, #0
 800374a:	7823      	ldrb	r3, [r4, #0]
 800374c:	06db      	lsls	r3, r3, #27
 800374e:	0edb      	lsrs	r3, r3, #27
 8003750:	331c      	adds	r3, #28
 8003752:	4013      	ands	r3, r2
 8003754:	3a15      	subs	r2, #21
 8003756:	429a      	cmp	r2, r3
 8003758:	4140      	adcs	r0, r0
 800375a:	e7e0      	b.n	800371e <lv_img_decoder_built_in_info+0x4a>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800375c:	2000      	movs	r0, #0
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800375e:	2b02      	cmp	r3, #2
 8003760:	d1dd      	bne.n	800371e <lv_img_decoder_built_in_info+0x4a>
        header->w = 1;
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	4a07      	ldr	r2, [pc, #28]	; (8003784 <lv_img_decoder_built_in_info+0xb0>)
    return LV_RES_OK;
 8003766:	3001      	adds	r0, #1
        header->w = 1;
 8003768:	401a      	ands	r2, r3
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4313      	orrs	r3, r2
        header->h = 1;
 8003770:	2220      	movs	r2, #32
        header->w = 1;
 8003772:	6023      	str	r3, [r4, #0]
        header->h = 1;
 8003774:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8003776:	32c0      	adds	r2, #192	; 0xc0
 8003778:	4013      	ands	r3, r2
 800377a:	3ad5      	subs	r2, #213	; 0xd5
 800377c:	4313      	orrs	r3, r2
 800377e:	7023      	strb	r3, [r4, #0]
 8003780:	e7cd      	b.n	800371e <lv_img_decoder_built_in_info+0x4a>
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	ffe003ff 	.word	0xffe003ff

08003788 <lv_img_decoder_built_in_read_line>:
{
 8003788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378a:	b0b5      	sub	sp, #212	; 0xd4
 800378c:	001f      	movs	r7, r3
 800378e:	ab3a      	add	r3, sp, #232	; 0xe8
 8003790:	0014      	movs	r4, r2
 8003792:	2200      	movs	r2, #0
 8003794:	5e9b      	ldrsh	r3, [r3, r2]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8003796:	7c08      	ldrb	r0, [r1, #16]
{
 8003798:	9302      	str	r3, [sp, #8]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800379a:	231f      	movs	r3, #31
 800379c:	4003      	ands	r3, r0
 800379e:	1f1a      	subs	r2, r3, #4
{
 80037a0:	9101      	str	r1, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80037a2:	2a02      	cmp	r2, #2
 80037a4:	d82e      	bhi.n	8003804 <lv_img_decoder_built_in_read_line+0x7c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80037a6:	7b0b      	ldrb	r3, [r1, #12]
    lv_res_t res = LV_RES_INV;
 80037a8:	2500      	movs	r5, #0
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d127      	bne.n	80037fe <lv_img_decoder_built_in_read_line+0x76>

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80037ae:	6a0b      	ldr	r3, [r1, #32]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 80037b0:	06c0      	lsls	r0, r0, #27
 80037b2:	0ec0      	lsrs	r0, r0, #27
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80037b4:	9303      	str	r3, [sp, #12]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 80037b6:	f7ff fe63 	bl	8003480 <lv_img_color_format_get_px_size>

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 80037ba:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 80037bc:	0006      	movs	r6, r0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 80037be:	6919      	ldr	r1, [r3, #16]
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
 80037c0:	9b03      	ldr	r3, [sp, #12]
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 80037c2:	02c9      	lsls	r1, r1, #11
 80037c4:	0d49      	lsrs	r1, r1, #21
 80037c6:	4379      	muls	r1, r7
 80037c8:	1909      	adds	r1, r1, r4
 80037ca:	4341      	muls	r1, r0
 80037cc:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
 80037ce:	3104      	adds	r1, #4
    res = lv_fs_seek(user_data->f, pos);
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	f000 fbc2 	bl	8003f5a <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 80037d6:	42a8      	cmp	r0, r5
 80037d8:	d111      	bne.n	80037fe <lv_img_decoder_built_in_read_line+0x76>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
 80037da:	9b02      	ldr	r3, [sp, #8]
 80037dc:	08f6      	lsrs	r6, r6, #3
 80037de:	b2f6      	uxtb	r6, r6
 80037e0:	4373      	muls	r3, r6
 80037e2:	001e      	movs	r6, r3
    uint32_t br  = 0;
    lv_fs_read(user_data->f, buf, btr, &br);
 80037e4:	9803      	ldr	r0, [sp, #12]
 80037e6:	ab0c      	add	r3, sp, #48	; 0x30
 80037e8:	0032      	movs	r2, r6
 80037ea:	993b      	ldr	r1, [sp, #236]	; 0xec
 80037ec:	6800      	ldr	r0, [r0, #0]
    uint32_t br  = 0;
 80037ee:	950c      	str	r5, [sp, #48]	; 0x30
    lv_fs_read(user_data->f, buf, btr, &br);
 80037f0:	f000 fb95 	bl	8003f1e <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 80037f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037f6:	1b9e      	subs	r6, r3, r6
 80037f8:	4275      	negs	r5, r6
 80037fa:	4175      	adcs	r5, r6
        return LV_RES_INV;
 80037fc:	b2ed      	uxtb	r5, r5
}
 80037fe:	0028      	movs	r0, r5
 8003800:	b035      	add	sp, #212	; 0xd4
 8003802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8003804:	001a      	movs	r2, r3
 8003806:	3a0b      	subs	r2, #11
 8003808:	2600      	movs	r6, #0
 800380a:	2a03      	cmp	r2, #3
 800380c:	d900      	bls.n	8003810 <lv_img_decoder_built_in_read_line+0x88>
 800380e:	e0ac      	b.n	800396a <lv_img_decoder_built_in_read_line+0x1e2>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8003810:	22ff      	movs	r2, #255	; 0xff
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8003812:	2155      	movs	r1, #85	; 0x55
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8003814:	ab06      	add	r3, sp, #24
 8003816:	705a      	strb	r2, [r3, #1]
 8003818:	701e      	strb	r6, [r3, #0]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800381a:	ab07      	add	r3, sp, #28
 800381c:	7059      	strb	r1, [r3, #1]
 800381e:	1849      	adds	r1, r1, r1
 8003820:	7099      	strb	r1, [r3, #2]
 8003822:	70da      	strb	r2, [r3, #3]
 8003824:	701e      	strb	r6, [r3, #0]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8003826:	3aef      	subs	r2, #239	; 0xef
 8003828:	4997      	ldr	r1, [pc, #604]	; (8003a88 <lv_img_decoder_built_in_read_line+0x300>)
 800382a:	a808      	add	r0, sp, #32
 800382c:	f001 f9d6 	bl	8004bdc <memcpy>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 8003830:	9b01      	ldr	r3, [sp, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8003836:	9303      	str	r3, [sp, #12]
 8003838:	9b3b      	ldr	r3, [sp, #236]	; 0xec
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800383a:	0a11      	lsrs	r1, r2, #8
    for(i = 0; i < len; i++) {
 800383c:	9802      	ldr	r0, [sp, #8]
 800383e:	42b0      	cmp	r0, r6
 8003840:	dc18      	bgt.n	8003874 <lv_img_decoder_built_in_read_line+0xec>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 8003842:	9b01      	ldr	r3, [sp, #4]
 8003844:	7c18      	ldrb	r0, [r3, #16]
 8003846:	06c0      	lsls	r0, r0, #27
 8003848:	0ec0      	lsrs	r0, r0, #27
 800384a:	f7ff fe19 	bl	8003480 <lv_img_color_format_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800384e:	2301      	movs	r3, #1
 8003850:	4083      	lsls	r3, r0
 8003852:	3b01      	subs	r3, #1
 8003854:	b29b      	uxth	r3, r3
 8003856:	9304      	str	r3, [sp, #16]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 8003858:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800385a:	9003      	str	r0, [sp, #12]
    switch(dsc->header.cf) {
 800385c:	7c18      	ldrb	r0, [r3, #16]
 800385e:	06c0      	lsls	r0, r0, #27
 8003860:	0ec0      	lsrs	r0, r0, #27
 8003862:	380b      	subs	r0, #11
 8003864:	2803      	cmp	r0, #3
 8003866:	d854      	bhi.n	8003912 <lv_img_decoder_built_in_read_line+0x18a>
 8003868:	691d      	ldr	r5, [r3, #16]
            ofs += w * y + (x >> 1); /*First pixel*/
            pos       = 4 - ((x & 0x1) * 4);
            opa_table = alpha4_opa_table;
            break;
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800386a:	02ed      	lsls	r5, r5, #11
    switch(dsc->header.cf) {
 800386c:	f7fc fc5a 	bl	8000124 <__gnu_thumb1_case_uqi>
 8003870:	493a2b08 	.word	0x493a2b08
 8003874:	3601      	adds	r6, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8003876:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8003878:	7059      	strb	r1, [r3, #1]
 800387a:	b236      	sxth	r6, r6
 800387c:	3303      	adds	r3, #3
 800387e:	e7dd      	b.n	800383c <lv_img_decoder_built_in_read_line+0xb4>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8003880:	0d6b      	lsrs	r3, r5, #21
 8003882:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 8003884:	1c55      	adds	r5, r2, #1
 8003886:	075b      	lsls	r3, r3, #29
 8003888:	d100      	bne.n	800388c <lv_img_decoder_built_in_read_line+0x104>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800388a:	b215      	sxth	r5, r2
            pos       = 7 - (x & 0x7);
 800388c:	2607      	movs	r6, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 800388e:	436f      	muls	r7, r5
 8003890:	10e1      	asrs	r1, r4, #3
            pos       = 7 - (x & 0x7);
 8003892:	43a6      	bics	r6, r4
            ofs += w * y + (x >> 3); /*First pixel*/
 8003894:	1879      	adds	r1, r7, r1
            opa_table = alpha1_opa_table;
 8003896:	ac06      	add	r4, sp, #24
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8003898:	9b01      	ldr	r3, [sp, #4]
 800389a:	7b1b      	ldrb	r3, [r3, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d13c      	bne.n	800391a <lv_img_decoder_built_in_read_line+0x192>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 80038a0:	9b01      	ldr	r3, [sp, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	1859      	adds	r1, r3, r1
 80038a8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 80038aa:	2708      	movs	r7, #8
 80038ac:	1c98      	adds	r0, r3, #2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 80038ae:	231f      	movs	r3, #31
        data_tmp = fs_buf;
 80038b0:	2200      	movs	r2, #0
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 80038b2:	469c      	mov	ip, r3
            pos = 8 - px_size;
 80038b4:	9b03      	ldr	r3, [sp, #12]
 80038b6:	1aff      	subs	r7, r7, r3
 80038b8:	b27b      	sxtb	r3, r7
 80038ba:	9305      	str	r3, [sp, #20]
    for(i = 0; i < len; i++) {
 80038bc:	9b02      	ldr	r3, [sp, #8]
 80038be:	4293      	cmp	r3, r2
 80038c0:	dc39      	bgt.n	8003936 <lv_img_decoder_built_in_read_line+0x1ae>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 80038c2:	2501      	movs	r5, #1
 80038c4:	e79b      	b.n	80037fe <lv_img_decoder_built_in_read_line+0x76>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80038c6:	0d6b      	lsrs	r3, r5, #21
 80038c8:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
 80038ca:	1c55      	adds	r5, r2, #1
 80038cc:	079b      	lsls	r3, r3, #30
 80038ce:	d100      	bne.n	80038d2 <lv_img_decoder_built_in_read_line+0x14a>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80038d0:	b215      	sxth	r5, r2
            pos       = 6 - ((x & 0x3) * 2);
 80038d2:	2603      	movs	r6, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 80038d4:	436f      	muls	r7, r5
 80038d6:	10a1      	asrs	r1, r4, #2
            pos       = 6 - ((x & 0x3) * 2);
 80038d8:	b2a4      	uxth	r4, r4
 80038da:	43a6      	bics	r6, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 80038dc:	1879      	adds	r1, r7, r1
            pos       = 6 - ((x & 0x3) * 2);
 80038de:	0076      	lsls	r6, r6, #1
            opa_table = alpha2_opa_table;
 80038e0:	ac07      	add	r4, sp, #28
 80038e2:	e7d9      	b.n	8003898 <lv_img_decoder_built_in_read_line+0x110>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80038e4:	0d6b      	lsrs	r3, r5, #21
 80038e6:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 80038e8:	1c55      	adds	r5, r2, #1
 80038ea:	07db      	lsls	r3, r3, #31
 80038ec:	d400      	bmi.n	80038f0 <lv_img_decoder_built_in_read_line+0x168>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80038ee:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 80038f0:	436f      	muls	r7, r5
 80038f2:	1061      	asrs	r1, r4, #1
 80038f4:	1879      	adds	r1, r7, r1
            pos       = 4 - ((x & 0x1) * 4);
 80038f6:	2600      	movs	r6, #0
 80038f8:	07e3      	lsls	r3, r4, #31
 80038fa:	d400      	bmi.n	80038fe <lv_img_decoder_built_in_read_line+0x176>
 80038fc:	2604      	movs	r6, #4
            opa_table = alpha4_opa_table;
 80038fe:	ac08      	add	r4, sp, #32
 8003900:	e7ca      	b.n	8003898 <lv_img_decoder_built_in_read_line+0x110>
            pos = 0;
 8003902:	2600      	movs	r6, #0
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8003904:	0d6d      	lsrs	r5, r5, #21
 8003906:	b2a9      	uxth	r1, r5
            ofs += w * y + x;  /*First pixel*/
 8003908:	4379      	muls	r1, r7
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800390a:	b22d      	sxth	r5, r5
            ofs += w * y + x;  /*First pixel*/
 800390c:	1909      	adds	r1, r1, r4
    const lv_opa_t * opa_table = NULL;
 800390e:	0034      	movs	r4, r6
 8003910:	e7c2      	b.n	8003898 <lv_img_decoder_built_in_read_line+0x110>
    int8_t pos   = 0;
 8003912:	2600      	movs	r6, #0
    uint32_t ofs = 0;
 8003914:	0031      	movs	r1, r6
    lv_coord_t w = 0;
 8003916:	0035      	movs	r5, r6
 8003918:	e7f9      	b.n	800390e <lv_img_decoder_built_in_read_line+0x186>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800391a:	9b01      	ldr	r3, [sp, #4]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800391c:	3104      	adds	r1, #4
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800391e:	6a1f      	ldr	r7, [r3, #32]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8003920:	6838      	ldr	r0, [r7, #0]
 8003922:	f000 fb1a 	bl	8003f5a <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8003926:	a90c      	add	r1, sp, #48	; 0x30
 8003928:	2300      	movs	r3, #0
 800392a:	002a      	movs	r2, r5
 800392c:	6838      	ldr	r0, [r7, #0]
 800392e:	f000 faf6 	bl	8003f1e <lv_fs_read>
        data_tmp = fs_buf;
 8003932:	a90c      	add	r1, sp, #48	; 0x30
 8003934:	e7b8      	b.n	80038a8 <lv_img_decoder_built_in_read_line+0x120>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8003936:	9b04      	ldr	r3, [sp, #16]
 8003938:	780d      	ldrb	r5, [r1, #0]
 800393a:	40b3      	lsls	r3, r6
 800393c:	402b      	ands	r3, r5
 800393e:	4133      	asrs	r3, r6
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8003940:	4667      	mov	r7, ip
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8003942:	9d01      	ldr	r5, [sp, #4]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	7c2d      	ldrb	r5, [r5, #16]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8003948:	403d      	ands	r5, r7
 800394a:	2d0e      	cmp	r5, #14
 800394c:	d10b      	bne.n	8003966 <lv_img_decoder_built_in_read_line+0x1de>
 800394e:	7003      	strb	r3, [r0, #0]
        pos -= px_size;
 8003950:	9b03      	ldr	r3, [sp, #12]
 8003952:	1af6      	subs	r6, r6, r3
 8003954:	b276      	sxtb	r6, r6
        if(pos < 0) {
 8003956:	2e00      	cmp	r6, #0
 8003958:	da01      	bge.n	800395e <lv_img_decoder_built_in_read_line+0x1d6>
            pos = 8 - px_size;
 800395a:	9e05      	ldr	r6, [sp, #20]
            data_tmp++;
 800395c:	3101      	adds	r1, #1
 800395e:	3201      	adds	r2, #1
 8003960:	b212      	sxth	r2, r2
 8003962:	3003      	adds	r0, #3
 8003964:	e7aa      	b.n	80038bc <lv_img_decoder_built_in_read_line+0x134>
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8003966:	5ce3      	ldrb	r3, [r4, r3]
 8003968:	e7f1      	b.n	800394e <lv_img_decoder_built_in_read_line+0x1c6>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800396a:	3b07      	subs	r3, #7
    lv_res_t res = LV_RES_INV;
 800396c:	0035      	movs	r5, r6
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800396e:	2b03      	cmp	r3, #3
 8003970:	d900      	bls.n	8003974 <lv_img_decoder_built_in_read_line+0x1ec>
 8003972:	e744      	b.n	80037fe <lv_img_decoder_built_in_read_line+0x76>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8003974:	06c0      	lsls	r0, r0, #27
 8003976:	0ec0      	lsrs	r0, r0, #27
 8003978:	f7ff fd82 	bl	8003480 <lv_img_color_format_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800397c:	2301      	movs	r3, #1
 800397e:	4083      	lsls	r3, r0
 8003980:	3b01      	subs	r3, #1
 8003982:	b29b      	uxth	r3, r3
 8003984:	9304      	str	r3, [sp, #16]

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 8003986:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8003988:	9003      	str	r0, [sp, #12]
    switch(dsc->header.cf) {
 800398a:	7c18      	ldrb	r0, [r3, #16]
 800398c:	06c0      	lsls	r0, r0, #27
 800398e:	0ec0      	lsrs	r0, r0, #27
 8003990:	3807      	subs	r0, #7
 8003992:	2803      	cmp	r0, #3
 8003994:	d868      	bhi.n	8003a68 <lv_img_decoder_built_in_read_line+0x2e0>
 8003996:	691d      	ldr	r5, [r3, #16]
            ofs += w * y + (x >> 1); /*First pixel*/
            ofs += 64;               /*Skip the palette*/
            pos = 4 - ((x & 0x1) * 4);
            break;
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8003998:	02ed      	lsls	r5, r5, #11
    switch(dsc->header.cf) {
 800399a:	f7fc fbc3 	bl	8000124 <__gnu_thumb1_case_uqi>
 800399e:	3a02      	.short	0x3a02
 80039a0:	5b4a      	.short	0x5b4a
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80039a2:	0d6b      	lsrs	r3, r5, #21
 80039a4:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 80039a6:	1c55      	adds	r5, r2, #1
 80039a8:	075b      	lsls	r3, r3, #29
 80039aa:	d100      	bne.n	80039ae <lv_img_decoder_built_in_read_line+0x226>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80039ac:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 3); /*First pixel*/
 80039ae:	003e      	movs	r6, r7
            pos = 7 - (x & 0x7);
 80039b0:	2707      	movs	r7, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 80039b2:	436e      	muls	r6, r5
 80039b4:	10e1      	asrs	r1, r4, #3
 80039b6:	1876      	adds	r6, r6, r1
            ofs += 8;                /*Skip the palette*/
 80039b8:	3608      	adds	r6, #8
            pos = 7 - (x & 0x7);
 80039ba:	43a7      	bics	r7, r4
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80039bc:	9b01      	ldr	r3, [sp, #4]
 80039be:	6a1c      	ldr	r4, [r3, #32]

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80039c0:	7b1b      	ldrb	r3, [r3, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d153      	bne.n	8003a6e <lv_img_decoder_built_in_read_line+0x2e6>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 80039c6:	9b01      	ldr	r3, [sp, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	6899      	ldr	r1, [r3, #8]
 80039cc:	198e      	adds	r6, r1, r6
    uint8_t val_act;
    lv_coord_t i;
    lv_color_t * cbuf = (lv_color_t *)buf;
    for(i = 0; i < len; i++) {
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
        cbuf[i] = user_data->palette[val_act];
 80039ce:	23ff      	movs	r3, #255	; 0xff

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 80039d0:	2208      	movs	r2, #8
        data_tmp = fs_buf;
 80039d2:	2100      	movs	r1, #0
        cbuf[i] = user_data->palette[val_act];
 80039d4:	469c      	mov	ip, r3
            pos = 8 - px_size;
 80039d6:	9b03      	ldr	r3, [sp, #12]
 80039d8:	1ad2      	subs	r2, r2, r3
 80039da:	b252      	sxtb	r2, r2
    for(i = 0; i < len; i++) {
 80039dc:	9802      	ldr	r0, [sp, #8]
 80039de:	b20b      	sxth	r3, r1
 80039e0:	4298      	cmp	r0, r3
 80039e2:	dc00      	bgt.n	80039e6 <lv_img_decoder_built_in_read_line+0x25e>
 80039e4:	e76d      	b.n	80038c2 <lv_img_decoder_built_in_read_line+0x13a>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 80039e6:	9b04      	ldr	r3, [sp, #16]
 80039e8:	7835      	ldrb	r5, [r6, #0]
 80039ea:	40bb      	lsls	r3, r7
 80039ec:	402b      	ands	r3, r5
 80039ee:	413b      	asrs	r3, r7
        cbuf[i] = user_data->palette[val_act];
 80039f0:	4665      	mov	r5, ip
 80039f2:	402b      	ands	r3, r5
 80039f4:	6865      	ldr	r5, [r4, #4]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	5b5b      	ldrh	r3, [r3, r5]
 80039fa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80039fc:	0048      	lsls	r0, r1, #1
 80039fe:	522b      	strh	r3, [r5, r0]
        pos -= px_size;
 8003a00:	9b03      	ldr	r3, [sp, #12]
 8003a02:	1aff      	subs	r7, r7, r3
 8003a04:	b27f      	sxtb	r7, r7
        if(pos < 0) {
 8003a06:	2f00      	cmp	r7, #0
 8003a08:	da01      	bge.n	8003a0e <lv_img_decoder_built_in_read_line+0x286>
            pos = 8 - px_size;
 8003a0a:	0017      	movs	r7, r2
            data_tmp++;
 8003a0c:	3601      	adds	r6, #1
 8003a0e:	3101      	adds	r1, #1
 8003a10:	e7e4      	b.n	80039dc <lv_img_decoder_built_in_read_line+0x254>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8003a12:	0d6b      	lsrs	r3, r5, #21
 8003a14:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
 8003a16:	1c55      	adds	r5, r2, #1
 8003a18:	079b      	lsls	r3, r3, #30
 8003a1a:	d100      	bne.n	8003a1e <lv_img_decoder_built_in_read_line+0x296>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8003a1c:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 2); /*First pixel*/
 8003a1e:	003e      	movs	r6, r7
            pos = 6 - ((x & 0x3) * 2);
 8003a20:	2703      	movs	r7, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 8003a22:	436e      	muls	r6, r5
 8003a24:	10a1      	asrs	r1, r4, #2
            pos = 6 - ((x & 0x3) * 2);
 8003a26:	b2a4      	uxth	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 8003a28:	1876      	adds	r6, r6, r1
            pos = 6 - ((x & 0x3) * 2);
 8003a2a:	43a7      	bics	r7, r4
            ofs += 16;               /*Skip the palette*/
 8003a2c:	3610      	adds	r6, #16
            pos = 6 - ((x & 0x3) * 2);
 8003a2e:	007f      	lsls	r7, r7, #1
 8003a30:	e7c4      	b.n	80039bc <lv_img_decoder_built_in_read_line+0x234>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8003a32:	0d6b      	lsrs	r3, r5, #21
 8003a34:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 8003a36:	1c55      	adds	r5, r2, #1
 8003a38:	07db      	lsls	r3, r3, #31
 8003a3a:	d400      	bmi.n	8003a3e <lv_img_decoder_built_in_read_line+0x2b6>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8003a3c:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 8003a3e:	003e      	movs	r6, r7
            pos = 4 - ((x & 0x1) * 4);
 8003a40:	2701      	movs	r7, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8003a42:	1061      	asrs	r1, r4, #1
            pos = 4 - ((x & 0x1) * 4);
 8003a44:	403c      	ands	r4, r7
 8003a46:	4267      	negs	r7, r4
 8003a48:	4167      	adcs	r7, r4
            ofs += w * y + (x >> 1); /*First pixel*/
 8003a4a:	436e      	muls	r6, r5
 8003a4c:	1876      	adds	r6, r6, r1
            ofs += 64;               /*Skip the palette*/
 8003a4e:	3640      	adds	r6, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 8003a50:	00bf      	lsls	r7, r7, #2
 8003a52:	e7b3      	b.n	80039bc <lv_img_decoder_built_in_read_line+0x234>
            ofs += 1024;       /*Skip the palette*/
 8003a54:	2380      	movs	r3, #128	; 0x80
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8003a56:	0d6d      	lsrs	r5, r5, #21
 8003a58:	b2ae      	uxth	r6, r5
            ofs += w * y + x;  /*First pixel*/
 8003a5a:	437e      	muls	r6, r7
            ofs += 1024;       /*Skip the palette*/
 8003a5c:	00db      	lsls	r3, r3, #3
            ofs += w * y + x;  /*First pixel*/
 8003a5e:	1936      	adds	r6, r6, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8003a60:	b22d      	sxth	r5, r5
            ofs += 1024;       /*Skip the palette*/
 8003a62:	18f6      	adds	r6, r6, r3
            pos = 0;
 8003a64:	2700      	movs	r7, #0
 8003a66:	e7a9      	b.n	80039bc <lv_img_decoder_built_in_read_line+0x234>
    int8_t pos   = 0;
 8003a68:	0037      	movs	r7, r6
    lv_coord_t w = 0;
 8003a6a:	0035      	movs	r5, r6
 8003a6c:	e7a6      	b.n	80039bc <lv_img_decoder_built_in_read_line+0x234>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8003a6e:	1d31      	adds	r1, r6, #4
 8003a70:	6820      	ldr	r0, [r4, #0]
 8003a72:	f000 fa72 	bl	8003f5a <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8003a76:	2300      	movs	r3, #0
 8003a78:	002a      	movs	r2, r5
 8003a7a:	a90c      	add	r1, sp, #48	; 0x30
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	f000 fa4e 	bl	8003f1e <lv_fs_read>
        data_tmp = fs_buf;
 8003a82:	ae0c      	add	r6, sp, #48	; 0x30
 8003a84:	e7a3      	b.n	80039ce <lv_img_decoder_built_in_read_line+0x246>
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	08004e76 	.word	0x08004e76

08003a8c <lv_img_decoder_close>:
{
 8003a8c:	0001      	movs	r1, r0
    if(dsc->decoder) {
 8003a8e:	6800      	ldr	r0, [r0, #0]
{
 8003a90:	b510      	push	{r4, lr}
    if(dsc->decoder) {
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d003      	beq.n	8003a9e <lv_img_decoder_close+0x12>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8003a96:	68c2      	ldr	r2, [r0, #12]
 8003a98:	2a00      	cmp	r2, #0
 8003a9a:	d000      	beq.n	8003a9e <lv_img_decoder_close+0x12>
 8003a9c:	4790      	blx	r2
}
 8003a9e:	bd10      	pop	{r4, pc}

08003aa0 <lv_img_decoder_create>:
{
 8003aa0:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 8003aa2:	4806      	ldr	r0, [pc, #24]	; (8003abc <lv_img_decoder_create+0x1c>)
 8003aa4:	f000 fb05 	bl	80040b2 <lv_ll_ins_head>
 8003aa8:	1e04      	subs	r4, r0, #0
    lv_mem_assert(decoder);
 8003aaa:	d100      	bne.n	8003aae <lv_img_decoder_create+0xe>
 8003aac:	e7fe      	b.n	8003aac <lv_img_decoder_create+0xc>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 8003aae:	2210      	movs	r2, #16
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	f001 f89c 	bl	8004bee <memset>
}
 8003ab6:	0020      	movs	r0, r4
 8003ab8:	bd10      	pop	{r4, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	20004b90 	.word	0x20004b90

08003ac0 <lv_img_decoder_init>:
{
 8003ac0:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 8003ac2:	2110      	movs	r1, #16
 8003ac4:	4808      	ldr	r0, [pc, #32]	; (8003ae8 <lv_img_decoder_init+0x28>)
 8003ac6:	f000 faea 	bl	800409e <lv_ll_init>
    decoder = lv_img_decoder_create();
 8003aca:	f7ff ffe9 	bl	8003aa0 <lv_img_decoder_create>
    if(decoder == NULL) {
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	d100      	bne.n	8003ad4 <lv_img_decoder_init+0x14>
 8003ad2:	e7fe      	b.n	8003ad2 <lv_img_decoder_init+0x12>
    decoder->info_cb = info_cb;
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <lv_img_decoder_init+0x2c>)
 8003ad6:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <lv_img_decoder_init+0x30>)
 8003ada:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <lv_img_decoder_init+0x34>)
 8003ade:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <lv_img_decoder_init+0x38>)
 8003ae2:	60c3      	str	r3, [r0, #12]
}
 8003ae4:	bd10      	pop	{r4, pc}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	20004b90 	.word	0x20004b90
 8003aec:	080036d5 	.word	0x080036d5
 8003af0:	08003589 	.word	0x08003589
 8003af4:	08003789 	.word	0x08003789
 8003af8:	08003559 	.word	0x08003559

08003afc <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8003afc:	7803      	ldrb	r3, [r0, #0]
 8003afe:	780a      	ldrb	r2, [r1, #0]
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d001      	beq.n	8003b08 <kern_pair_8_compare+0xc>
 8003b04:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];

}
 8003b06:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 8003b08:	7840      	ldrb	r0, [r0, #1]
 8003b0a:	784b      	ldrb	r3, [r1, #1]
 8003b0c:	1ac0      	subs	r0, r0, r3
 8003b0e:	e7fa      	b.n	8003b06 <kern_pair_8_compare+0xa>

08003b10 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8003b10:	8803      	ldrh	r3, [r0, #0]
 8003b12:	880a      	ldrh	r2, [r1, #0]
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d001      	beq.n	8003b1c <kern_pair_16_compare+0xc>
 8003b18:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
}
 8003b1a:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 8003b1c:	8840      	ldrh	r0, [r0, #2]
 8003b1e:	884b      	ldrh	r3, [r1, #2]
 8003b20:	1ac0      	subs	r0, r0, r3
 8003b22:	e7fa      	b.n	8003b1a <kern_pair_16_compare+0xa>

08003b24 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 8003b24:	8800      	ldrh	r0, [r0, #0]
 8003b26:	880b      	ldrh	r3, [r1, #0]
 8003b28:	1ac0      	subs	r0, r0, r3
}
 8003b2a:	4770      	bx	lr

08003b2c <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8003b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8003b2e:	6804      	ldr	r4, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8003b30:	b085      	sub	sp, #20
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8003b32:	6963      	ldr	r3, [r4, #20]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8003b34:	000d      	movs	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8003b36:	428b      	cmp	r3, r1
 8003b38:	d009      	beq.n	8003b4e <get_glyph_dsc_id.isra.0.part.1+0x22>
 8003b3a:	2300      	movs	r3, #0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8003b3c:	2014      	movs	r0, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 8003b3e:	8a62      	ldrh	r2, [r4, #18]
 8003b40:	0592      	lsls	r2, r2, #22
 8003b42:	0d92      	lsrs	r2, r2, #22
 8003b44:	4293      	cmp	r3, r2
 8003b46:	db05      	blt.n	8003b54 <get_glyph_dsc_id.isra.0.part.1+0x28>
    fdsc->last_letter = letter;
 8003b48:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e016      	b.n	8003b7c <get_glyph_dsc_id.isra.0.part.1+0x50>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8003b4e:	69a0      	ldr	r0, [r4, #24]
}
 8003b50:	b005      	add	sp, #20
 8003b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8003b54:	0006      	movs	r6, r0
 8003b56:	435e      	muls	r6, r3
 8003b58:	68a2      	ldr	r2, [r4, #8]
 8003b5a:	1991      	adds	r1, r2, r6
 8003b5c:	680a      	ldr	r2, [r1, #0]
 8003b5e:	1aaa      	subs	r2, r5, r2
 8003b60:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8003b62:	888f      	ldrh	r7, [r1, #4]
 8003b64:	42ba      	cmp	r2, r7
 8003b66:	d902      	bls.n	8003b6e <get_glyph_dsc_id.isra.0.part.1+0x42>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8003b68:	3301      	adds	r3, #1
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	e7e7      	b.n	8003b3e <get_glyph_dsc_id.isra.0.part.1+0x12>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8003b6e:	2003      	movs	r0, #3
 8003b70:	7c8b      	ldrb	r3, [r1, #18]
 8003b72:	4003      	ands	r3, r0
 8003b74:	d104      	bne.n	8003b80 <get_glyph_dsc_id.isra.0.part.1+0x54>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8003b76:	88c8      	ldrh	r0, [r1, #6]
 8003b78:	1880      	adds	r0, r0, r2
        fdsc->last_letter = letter;
 8003b7a:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 8003b7c:	61a0      	str	r0, [r4, #24]
 8003b7e:	e7e7      	b.n	8003b50 <get_glyph_dsc_id.isra.0.part.1+0x24>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d104      	bne.n	8003b8e <get_glyph_dsc_id.isra.0.part.1+0x62>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8003b84:	68cb      	ldr	r3, [r1, #12]
 8003b86:	5c98      	ldrb	r0, [r3, r2]
 8003b88:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8003b8a:	18c0      	adds	r0, r0, r3
 8003b8c:	e7f5      	b.n	8003b7a <get_glyph_dsc_id.isra.0.part.1+0x4e>
 8003b8e:	4811      	ldr	r0, [pc, #68]	; (8003bd4 <get_glyph_dsc_id.isra.0.part.1+0xa8>)
 8003b90:	8a0a      	ldrh	r2, [r1, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8003b92:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d10e      	bne.n	8003bb6 <get_glyph_dsc_id.isra.0.part.1+0x8a>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8003b98:	6889      	ldr	r1, [r1, #8]
 8003b9a:	a803      	add	r0, sp, #12
 8003b9c:	f000 fd93 	bl	80046c6 <lv_utils_bsearch>
            if(p) {
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d101      	bne.n	8003ba8 <get_glyph_dsc_id.isra.0.part.1+0x7c>
        uint32_t glyph_id = 0;
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	e7e8      	b.n	8003b7a <get_glyph_dsc_id.isra.0.part.1+0x4e>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 8003ba8:	68a3      	ldr	r3, [r4, #8]
 8003baa:	199e      	adds	r6, r3, r6
 8003bac:	68b3      	ldr	r3, [r6, #8]
 8003bae:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 8003bb0:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8003bb2:	88f3      	ldrh	r3, [r6, #6]
 8003bb4:	e7e9      	b.n	8003b8a <get_glyph_dsc_id.isra.0.part.1+0x5e>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	6889      	ldr	r1, [r1, #8]
 8003bba:	a803      	add	r0, sp, #12
 8003bbc:	f000 fd83 	bl	80046c6 <lv_utils_bsearch>
            if(p) {
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d0ef      	beq.n	8003ba4 <get_glyph_dsc_id.isra.0.part.1+0x78>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 8003bc4:	68a3      	ldr	r3, [r4, #8]
 8003bc6:	199e      	adds	r6, r3, r6
 8003bc8:	68b3      	ldr	r3, [r6, #8]
 8003bca:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8003bcc:	68f3      	ldr	r3, [r6, #12]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 8003bce:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8003bd0:	5c18      	ldrb	r0, [r3, r0]
 8003bd2:	e7ee      	b.n	8003bb2 <get_glyph_dsc_id.isra.0.part.1+0x86>
 8003bd4:	08003b25 	.word	0x08003b25

08003bd8 <lv_font_get_bitmap_fmt_txt>:
{
 8003bd8:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 8003bda:	2900      	cmp	r1, #0
 8003bdc:	d101      	bne.n	8003be2 <lv_font_get_bitmap_fmt_txt+0xa>
    if(!gid) return false;
 8003bde:	2000      	movs	r0, #0
}
 8003be0:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8003be2:	68c4      	ldr	r4, [r0, #12]
 8003be4:	300c      	adds	r0, #12
 8003be6:	f7ff ffa1 	bl	8003b2c <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d0f7      	beq.n	8003bde <lv_font_get_bitmap_fmt_txt+0x6>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8003bee:	6863      	ldr	r3, [r4, #4]
 8003bf0:	00c0      	lsls	r0, r0, #3
 8003bf2:	1818      	adds	r0, r3, r0
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d0f2      	beq.n	8003bde <lv_font_get_bitmap_fmt_txt+0x6>
 8003bf8:	6800      	ldr	r0, [r0, #0]
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	0300      	lsls	r0, r0, #12
 8003bfe:	0b00      	lsrs	r0, r0, #12
 8003c00:	1818      	adds	r0, r3, r0
 8003c02:	e7ed      	b.n	8003be0 <lv_font_get_bitmap_fmt_txt+0x8>

08003c04 <lv_font_get_glyph_dsc_fmt_txt>:
{
 8003c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c06:	b087      	sub	sp, #28
 8003c08:	0005      	movs	r5, r0
 8003c0a:	000f      	movs	r7, r1
 8003c0c:	9303      	str	r3, [sp, #12]
    if(letter == '\0') return 0;
 8003c0e:	2a00      	cmp	r2, #0
 8003c10:	d102      	bne.n	8003c18 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(!gid) return false;
 8003c12:	2000      	movs	r0, #0
}
 8003c14:	b007      	add	sp, #28
 8003c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c18:	0006      	movs	r6, r0
 8003c1a:	360c      	adds	r6, #12
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8003c1c:	68c4      	ldr	r4, [r0, #12]
 8003c1e:	0011      	movs	r1, r2
 8003c20:	0030      	movs	r0, r6
 8003c22:	f7ff ff83 	bl	8003b2c <get_glyph_dsc_id.isra.0.part.1>
 8003c26:	9002      	str	r0, [sp, #8]
    if(!gid) return false;
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d0f2      	beq.n	8003c12 <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 8003c2c:	68e3      	ldr	r3, [r4, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d11b      	bne.n	8003c6a <lv_font_get_glyph_dsc_fmt_txt+0x66>
    int8_t kvalue = 0;
 8003c32:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8003c34:	9a02      	ldr	r2, [sp, #8]
 8003c36:	6861      	ldr	r1, [r4, #4]
 8003c38:	00d2      	lsls	r2, r2, #3
 8003c3a:	188a      	adds	r2, r1, r2
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8003c3c:	8a21      	ldrh	r1, [r4, #16]
    return true;
 8003c3e:	2001      	movs	r0, #1
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8003c40:	434b      	muls	r3, r1
 8003c42:	8851      	ldrh	r1, [r2, #2]
 8003c44:	111b      	asrs	r3, r3, #4
 8003c46:	0909      	lsrs	r1, r1, #4
 8003c48:	185b      	adds	r3, r3, r1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 8003c4e:	803b      	strh	r3, [r7, #0]
    dsc_out->box_h = gdsc->box_h;
 8003c50:	7953      	ldrb	r3, [r2, #5]
 8003c52:	70fb      	strb	r3, [r7, #3]
    dsc_out->box_w = gdsc->box_w;
 8003c54:	7913      	ldrb	r3, [r2, #4]
 8003c56:	70bb      	strb	r3, [r7, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 8003c58:	7993      	ldrb	r3, [r2, #6]
 8003c5a:	713b      	strb	r3, [r7, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 8003c5c:	79d3      	ldrb	r3, [r2, #7]
 8003c5e:	717b      	strb	r3, [r7, #5]
    dsc_out->bpp   = fdsc->bpp;
 8003c60:	7ce3      	ldrb	r3, [r4, #19]
 8003c62:	06db      	lsls	r3, r3, #27
 8003c64:	0f5b      	lsrs	r3, r3, #29
 8003c66:	71bb      	strb	r3, [r7, #6]
    return true;
 8003c68:	e7d4      	b.n	8003c14 <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 8003c6a:	9b03      	ldr	r3, [sp, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0e0      	beq.n	8003c32 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 8003c70:	0019      	movs	r1, r3
 8003c72:	0030      	movs	r0, r6
 8003c74:	f7ff ff5a 	bl	8003b2c <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	d0da      	beq.n	8003c32 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 8003c7c:	68eb      	ldr	r3, [r5, #12]
    if(fdsc->kern_classes == 0) {
 8003c7e:	7cda      	ldrb	r2, [r3, #19]
 8003c80:	68dd      	ldr	r5, [r3, #12]
 8003c82:	0693      	lsls	r3, r2, #26
 8003c84:	d432      	bmi.n	8003cec <lv_font_get_glyph_dsc_fmt_txt+0xe8>
        if(kdsc->glyph_ids_size == 0) {
 8003c86:	2203      	movs	r2, #3
 8003c88:	7aeb      	ldrb	r3, [r5, #11]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d118      	bne.n	8003cc0 <lv_font_get_glyph_dsc_fmt_txt+0xbc>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8003c8e:	ab05      	add	r3, sp, #20
 8003c90:	469c      	mov	ip, r3
 8003c92:	9b02      	ldr	r3, [sp, #8]
 8003c94:	0200      	lsls	r0, r0, #8
 8003c96:	18c0      	adds	r0, r0, r3
 8003c98:	4663      	mov	r3, ip
            const uint8_t * g_ids = kdsc->glyph_ids;
 8003c9a:	682e      	ldr	r6, [r5, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8003c9c:	8018      	strh	r0, [r3, #0]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8003c9e:	68ab      	ldr	r3, [r5, #8]
 8003ca0:	0031      	movs	r1, r6
 8003ca2:	021a      	lsls	r2, r3, #8
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <lv_font_get_glyph_dsc_fmt_txt+0x10c>)
 8003ca6:	0a12      	lsrs	r2, r2, #8
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	4660      	mov	r0, ip
 8003cac:	2302      	movs	r3, #2
 8003cae:	f000 fd0a 	bl	80046c6 <lv_utils_bsearch>
    int8_t value = 0;
 8003cb2:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 8003cb4:	d0be      	beq.n	8003c34 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8003cb6:	1b80      	subs	r0, r0, r6
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 8003cb8:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 8003cba:	686b      	ldr	r3, [r5, #4]
 8003cbc:	561b      	ldrsb	r3, [r3, r0]
 8003cbe:	e7b9      	b.n	8003c34 <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d1b6      	bne.n	8003c32 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 8003cc4:	9b02      	ldr	r3, [sp, #8]
 8003cc6:	0200      	lsls	r0, r0, #8
 8003cc8:	18c0      	adds	r0, r0, r3
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8003cca:	68ab      	ldr	r3, [r5, #8]
            const uint16_t * g_ids = kdsc->glyph_ids;
 8003ccc:	682e      	ldr	r6, [r5, #0]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8003cce:	021a      	lsls	r2, r3, #8
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <lv_font_get_glyph_dsc_fmt_txt+0x110>)
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 8003cd2:	9005      	str	r0, [sp, #20]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	0a12      	lsrs	r2, r2, #8
 8003cd8:	2304      	movs	r3, #4
 8003cda:	0031      	movs	r1, r6
 8003cdc:	a805      	add	r0, sp, #20
 8003cde:	f000 fcf2 	bl	80046c6 <lv_utils_bsearch>
    int8_t value = 0;
 8003ce2:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 8003ce4:	d0a6      	beq.n	8003c34 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 8003ce6:	1b80      	subs	r0, r0, r6
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 8003ce8:	0900      	lsrs	r0, r0, #4
 8003cea:	e7e6      	b.n	8003cba <lv_font_get_glyph_dsc_fmt_txt+0xb6>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8003cec:	686b      	ldr	r3, [r5, #4]
 8003cee:	9a02      	ldr	r2, [sp, #8]
 8003cf0:	5c9a      	ldrb	r2, [r3, r2]
        if(left_class > 0 && right_class > 0) {
 8003cf2:	2a00      	cmp	r2, #0
 8003cf4:	d09d      	beq.n	8003c32 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 8003cf6:	5c19      	ldrb	r1, [r3, r0]
        if(left_class > 0 && right_class > 0) {
 8003cf8:	2900      	cmp	r1, #0
 8003cfa:	d09a      	beq.n	8003c32 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 8003cfc:	7b6b      	ldrb	r3, [r5, #13]
 8003cfe:	3a01      	subs	r2, #1
 8003d00:	435a      	muls	r2, r3
 8003d02:	682b      	ldr	r3, [r5, #0]
 8003d04:	185b      	adds	r3, r3, r1
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	b25b      	sxtb	r3, r3
 8003d0e:	e791      	b.n	8003c34 <lv_font_get_glyph_dsc_fmt_txt+0x30>
 8003d10:	08003afd 	.word	0x08003afd
 8003d14:	08003b11 	.word	0x08003b11

08003d18 <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	0004      	movs	r4, r0
 8003d1c:	000d      	movs	r5, r1
 8003d1e:	0017      	movs	r7, r2
 8003d20:	001e      	movs	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 8003d22:	221c      	movs	r2, #28
 8003d24:	2100      	movs	r1, #0
 8003d26:	f000 ff62 	bl	8004bee <memset>

    disp_buf->buf1    = buf1;
 8003d2a:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
 8003d2c:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
 8003d2e:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 8003d30:	60e6      	str	r6, [r4, #12]
}
 8003d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d34 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 8003d34:	0001      	movs	r1, r0
 8003d36:	b510      	push	{r4, lr}
 8003d38:	4804      	ldr	r0, [pc, #16]	; (8003d4c <lv_indev_get_next+0x18>)
    if(indev == NULL)
 8003d3a:	2900      	cmp	r1, #0
 8003d3c:	d102      	bne.n	8003d44 <lv_indev_get_next+0x10>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8003d3e:	f000 f9f8 	bl	8004132 <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
}
 8003d42:	bd10      	pop	{r4, pc}
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8003d44:	f000 f9f9 	bl	800413a <lv_ll_get_next>
 8003d48:	e7fb      	b.n	8003d42 <lv_indev_get_next+0xe>
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	20004b74 	.word	0x20004b74

08003d50 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 8003d50:	2200      	movs	r2, #0
 8003d52:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <lv_tick_inc+0x10>)
 8003d54:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8003d56:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <lv_tick_inc+0x14>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	1810      	adds	r0, r2, r0
 8003d5c:	6018      	str	r0, [r3, #0]
}
 8003d5e:	4770      	bx	lr
 8003d60:	20001280 	.word	0x20001280
 8003d64:	2000127c 	.word	0x2000127c

08003d68 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <lv_tick_get+0x14>)
 8003d6c:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	2a00      	cmp	r2, #0
 8003d72:	d0fb      	beq.n	8003d6c <lv_tick_get+0x4>
        result        = sys_time;
 8003d74:	4b02      	ldr	r3, [pc, #8]	; (8003d80 <lv_tick_get+0x18>)
                                Continue until make a non interrupted cycle */

    return result;
 8003d76:	6818      	ldr	r0, [r3, #0]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8003d78:	4770      	bx	lr
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	20001280 	.word	0x20001280
 8003d80:	2000127c 	.word	0x2000127c

08003d84 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8003d84:	b510      	push	{r4, lr}
 8003d86:	0004      	movs	r4, r0
    uint32_t act_time = lv_tick_get();
 8003d88:	f7ff ffee 	bl	8003d68 <lv_tick_get>
    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
        prev_tick = act_time - prev_tick;
    } else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
 8003d8c:	1b00      	subs	r0, r0, r4
    }

    return prev_tick;
}
 8003d8e:	bd10      	pop	{r4, pc}

08003d90 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 8003d90:	b5f0      	push	{r4, r5, r6, r7, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8003d92:	4d40      	ldr	r5, [pc, #256]	; (8003e94 <anim_task+0x104>)
{
 8003d94:	b08d      	sub	sp, #52	; 0x34
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8003d96:	0028      	movs	r0, r5
 8003d98:	f000 f9cb 	bl	8004132 <lv_ll_get_head>
    {
        a->has_run = 0;
 8003d9c:	2408      	movs	r4, #8
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d10e      	bne.n	8003dc0 <anim_task+0x30>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 8003da2:	4f3d      	ldr	r7, [pc, #244]	; (8003e98 <anim_task+0x108>)
 8003da4:	6838      	ldr	r0, [r7, #0]
 8003da6:	f7ff ffed 	bl	8003d84 <lv_tick_elaps>
 8003daa:	9001      	str	r0, [sp, #4]
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8003dac:	0028      	movs	r0, r5
 8003dae:	f000 f9c0 	bl	8004132 <lv_ll_get_head>
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8003db2:	1e04      	subs	r4, r0, #0
    while(a != NULL) {
 8003db4:	d10d      	bne.n	8003dd2 <anim_task+0x42>
    }

    last_task_run = lv_tick_get();
 8003db6:	f7ff ffd7 	bl	8003d68 <lv_tick_get>
 8003dba:	6038      	str	r0, [r7, #0]
}
 8003dbc:	b00d      	add	sp, #52	; 0x34
 8003dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        a->has_run = 0;
 8003dc0:	1c42      	adds	r2, r0, #1
 8003dc2:	7fd3      	ldrb	r3, [r2, #31]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8003dc4:	0001      	movs	r1, r0
        a->has_run = 0;
 8003dc6:	43a3      	bics	r3, r4
 8003dc8:	77d3      	strb	r3, [r2, #31]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8003dca:	0028      	movs	r0, r5
 8003dcc:	f000 f9b5 	bl	800413a <lv_ll_get_next>
 8003dd0:	e7e5      	b.n	8003d9e <anim_task+0xe>
        anim_list_changed = false;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	4a31      	ldr	r2, [pc, #196]	; (8003e9c <anim_task+0x10c>)
        if(!a->has_run) {
 8003dd6:	1c66      	adds	r6, r4, #1
        anim_list_changed = false;
 8003dd8:	7013      	strb	r3, [r2, #0]
        if(!a->has_run) {
 8003dda:	2208      	movs	r2, #8
 8003ddc:	7ff3      	ldrb	r3, [r6, #31]
 8003dde:	4213      	tst	r3, r2
 8003de0:	d13a      	bne.n	8003e58 <anim_task+0xc8>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 8003de2:	4313      	orrs	r3, r2
 8003de4:	77f3      	strb	r3, [r6, #31]
            a->act_time += elaps;
 8003de6:	8b63      	ldrh	r3, [r4, #26]
 8003de8:	9a01      	ldr	r2, [sp, #4]
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	b21b      	sxth	r3, r3
 8003dee:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	db31      	blt.n	8003e58 <anim_task+0xc8>
                if(a->act_time > a->time) a->act_time = a->time;
 8003df4:	8b22      	ldrh	r2, [r4, #24]
 8003df6:	4293      	cmp	r3, r2
 8003df8:	dd00      	ble.n	8003dfc <anim_task+0x6c>
 8003dfa:	8362      	strh	r2, [r4, #26]
                new_value = a->path_cb(a);
 8003dfc:	68a3      	ldr	r3, [r4, #8]
 8003dfe:	0020      	movs	r0, r4
 8003e00:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 8003e02:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 8003e04:	0001      	movs	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <anim_task+0x7e>
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8003e0e:	231a      	movs	r3, #26
 8003e10:	5ee2      	ldrsh	r2, [r4, r3]
 8003e12:	8b23      	ldrh	r3, [r4, #24]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	db1b      	blt.n	8003e50 <anim_task+0xc0>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 8003e18:	2203      	movs	r2, #3
 8003e1a:	7ff3      	ldrb	r3, [r6, #31]
 8003e1c:	4213      	tst	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <anim_task+0x98>
 8003e20:	3204      	adds	r2, #4
 8003e22:	401a      	ands	r2, r3
 8003e24:	2a05      	cmp	r2, #5
 8003e26:	d11c      	bne.n	8003e62 <anim_task+0xd2>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 8003e28:	2224      	movs	r2, #36	; 0x24
 8003e2a:	0021      	movs	r1, r4
 8003e2c:	a803      	add	r0, sp, #12
 8003e2e:	f000 fed5 	bl	8004bdc <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8003e32:	0021      	movs	r1, r4
 8003e34:	0028      	movs	r0, r5
 8003e36:	f000 f9cd 	bl	80041d4 <lv_ll_rem>
        lv_mem_free(a);
 8003e3a:	0020      	movs	r0, r4
 8003e3c:	f000 face 	bl	80043dc <lv_mem_free>
        anim_list_changed = true;
 8003e40:	2301      	movs	r3, #1
 8003e42:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <anim_task+0x10c>)
 8003e44:	7013      	strb	r3, [r2, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 8003e46:	9b06      	ldr	r3, [sp, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <anim_task+0xc0>
 8003e4c:	a803      	add	r0, sp, #12
 8003e4e:	4798      	blx	r3
        if(anim_list_changed)
 8003e50:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <anim_task+0x10c>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1a9      	bne.n	8003dac <anim_task+0x1c>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8003e58:	0021      	movs	r1, r4
 8003e5a:	0028      	movs	r0, r5
 8003e5c:	f000 f96d 	bl	800413a <lv_ll_get_next>
 8003e60:	e7a7      	b.n	8003db2 <anim_task+0x22>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 8003e62:	8be2      	ldrh	r2, [r4, #30]
 8003e64:	4252      	negs	r2, r2
 8003e66:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 8003e68:	07da      	lsls	r2, r3, #31
 8003e6a:	d5f1      	bpl.n	8003e50 <anim_task+0xc0>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	4013      	ands	r3, r2
 8003e70:	1e19      	subs	r1, r3, #0
 8003e72:	d102      	bne.n	8003e7a <anim_task+0xea>
 8003e74:	8ba2      	ldrh	r2, [r4, #28]
 8003e76:	4252      	negs	r2, r2
 8003e78:	8362      	strh	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8003e7a:	424b      	negs	r3, r1
 8003e7c:	414b      	adcs	r3, r1
 8003e7e:	2104      	movs	r1, #4
 8003e80:	7ff2      	ldrb	r2, [r6, #31]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	438a      	bics	r2, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	77f3      	strb	r3, [r6, #31]
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 8003e8a:	6923      	ldr	r3, [r4, #16]
            a->start = a->end;
 8003e8c:	6962      	ldr	r2, [r4, #20]
            a->end   = tmp;
 8003e8e:	6163      	str	r3, [r4, #20]
            a->start = a->end;
 8003e90:	6122      	str	r2, [r4, #16]
 8003e92:	e7dd      	b.n	8003e50 <anim_task+0xc0>
 8003e94:	20004bb0 	.word	0x20004bb0
 8003e98:	20001284 	.word	0x20001284
 8003e9c:	20001281 	.word	0x20001281

08003ea0 <lv_anim_core_init>:
{
 8003ea0:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8003ea2:	2124      	movs	r1, #36	; 0x24
 8003ea4:	4806      	ldr	r0, [pc, #24]	; (8003ec0 <lv_anim_core_init+0x20>)
 8003ea6:	f000 f8fa 	bl	800409e <lv_ll_init>
    last_task_run = lv_tick_get();
 8003eaa:	f7ff ff5d 	bl	8003d68 <lv_tick_get>
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <lv_anim_core_init+0x24>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8003eb0:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 8003eb2:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8003eb4:	211e      	movs	r1, #30
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	4803      	ldr	r0, [pc, #12]	; (8003ec8 <lv_anim_core_init+0x28>)
 8003eba:	f000 fbf1 	bl	80046a0 <lv_task_create>
}
 8003ebe:	bd10      	pop	{r4, pc}
 8003ec0:	20004bb0 	.word	0x20004bb0
 8003ec4:	20001284 	.word	0x20001284
 8003ec8:	08003d91 	.word	0x08003d91

08003ecc <lv_fs_get_real_path>:

    path++; /*Ignore the driver letter*/

    while(*path != '\0') {
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
 8003ecc:	3001      	adds	r0, #1
    while(*path != '\0') {
 8003ece:	7803      	ldrb	r3, [r0, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <lv_fs_get_real_path+0x14>
        if(*path == ':' || *path == '\\' || *path == '/') {
 8003ed4:	2b3a      	cmp	r3, #58	; 0x3a
 8003ed6:	d0f9      	beq.n	8003ecc <lv_fs_get_real_path>
 8003ed8:	2b5c      	cmp	r3, #92	; 0x5c
 8003eda:	d0f7      	beq.n	8003ecc <lv_fs_get_real_path>
 8003edc:	2b2f      	cmp	r3, #47	; 0x2f
 8003ede:	d0f5      	beq.n	8003ecc <lv_fs_get_real_path>
            break;
        }
    }

    return path;
}
 8003ee0:	4770      	bx	lr
	...

08003ee4 <lv_fs_init>:
{
 8003ee4:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 8003ee6:	2144      	movs	r1, #68	; 0x44
 8003ee8:	4801      	ldr	r0, [pc, #4]	; (8003ef0 <lv_fs_init+0xc>)
 8003eea:	f000 f8d8 	bl	800409e <lv_ll_init>
}
 8003eee:	bd10      	pop	{r4, pc}
 8003ef0:	20004b9c 	.word	0x20004b9c

08003ef4 <lv_fs_close>:
{
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	0004      	movs	r4, r0
    if(file_p->drv == NULL) {
 8003ef8:	6840      	ldr	r0, [r0, #4]
        return LV_FS_RES_INV_PARAM;
 8003efa:	250b      	movs	r5, #11
    if(file_p->drv == NULL) {
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d00c      	beq.n	8003f1a <lv_fs_close+0x26>
    if(file_p->drv->close_cb == NULL) {
 8003f00:	6903      	ldr	r3, [r0, #16]
        return LV_FS_RES_NOT_IMP;
 8003f02:	3d02      	subs	r5, #2
    if(file_p->drv->close_cb == NULL) {
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8003f08:	6821      	ldr	r1, [r4, #0]
 8003f0a:	4798      	blx	r3
 8003f0c:	0005      	movs	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 8003f0e:	6820      	ldr	r0, [r4, #0]
 8003f10:	f000 fa64 	bl	80043dc <lv_mem_free>
    file_p->file_d = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 8003f18:	6063      	str	r3, [r4, #4]
}
 8003f1a:	0028      	movs	r0, r5
 8003f1c:	bd70      	pop	{r4, r5, r6, pc}

08003f1e <lv_fs_read>:
{
 8003f1e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003f20:	0006      	movs	r6, r0
 8003f22:	1e1c      	subs	r4, r3, #0
    if(br != NULL) *br = 0;
 8003f24:	d001      	beq.n	8003f2a <lv_fs_read+0xc>
 8003f26:	2300      	movs	r3, #0
 8003f28:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8003f2a:	6870      	ldr	r0, [r6, #4]
 8003f2c:	230b      	movs	r3, #11
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d010      	beq.n	8003f54 <lv_fs_read+0x36>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8003f32:	6985      	ldr	r5, [r0, #24]
 8003f34:	3b02      	subs	r3, #2
 8003f36:	2d00      	cmp	r5, #0
 8003f38:	d00c      	beq.n	8003f54 <lv_fs_read+0x36>
    uint32_t br_tmp = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9303      	str	r3, [sp, #12]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8003f3e:	ab03      	add	r3, sp, #12
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	0013      	movs	r3, r2
 8003f44:	000a      	movs	r2, r1
 8003f46:	6831      	ldr	r1, [r6, #0]
 8003f48:	47a8      	blx	r5
 8003f4a:	0003      	movs	r3, r0
    if(br != NULL) *br = br_tmp;
 8003f4c:	2c00      	cmp	r4, #0
 8003f4e:	d001      	beq.n	8003f54 <lv_fs_read+0x36>
 8003f50:	9a03      	ldr	r2, [sp, #12]
 8003f52:	6022      	str	r2, [r4, #0]
}
 8003f54:	0018      	movs	r0, r3
 8003f56:	b004      	add	sp, #16
 8003f58:	bd70      	pop	{r4, r5, r6, pc}

08003f5a <lv_fs_seek>:
{
 8003f5a:	b570      	push	{r4, r5, r6, lr}
 8003f5c:	0005      	movs	r5, r0
    if(file_p->drv == NULL) {
 8003f5e:	6840      	ldr	r0, [r0, #4]
{
 8003f60:	000a      	movs	r2, r1
        return LV_FS_RES_INV_PARAM;
 8003f62:	230b      	movs	r3, #11
    if(file_p->drv == NULL) {
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d006      	beq.n	8003f76 <lv_fs_seek+0x1c>
    if(file_p->drv->seek_cb == NULL) {
 8003f68:	6a04      	ldr	r4, [r0, #32]
        return LV_FS_RES_NOT_IMP;
 8003f6a:	3b02      	subs	r3, #2
    if(file_p->drv->seek_cb == NULL) {
 8003f6c:	2c00      	cmp	r4, #0
 8003f6e:	d002      	beq.n	8003f76 <lv_fs_seek+0x1c>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 8003f70:	6829      	ldr	r1, [r5, #0]
 8003f72:	47a0      	blx	r4
 8003f74:	0003      	movs	r3, r0
}
 8003f76:	0018      	movs	r0, r3
 8003f78:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f7c <lv_fs_get_drv>:
{
 8003f7c:	b570      	push	{r4, r5, r6, lr}
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 8003f7e:	4c08      	ldr	r4, [pc, #32]	; (8003fa0 <lv_fs_get_drv+0x24>)
{
 8003f80:	0005      	movs	r5, r0
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 8003f82:	0020      	movs	r0, r4
 8003f84:	f000 f8d5 	bl	8004132 <lv_ll_get_head>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d100      	bne.n	8003f8e <lv_fs_get_drv+0x12>
}
 8003f8c:	bd70      	pop	{r4, r5, r6, pc}
        if(drv->letter == letter) {
 8003f8e:	7803      	ldrb	r3, [r0, #0]
 8003f90:	42ab      	cmp	r3, r5
 8003f92:	d0fb      	beq.n	8003f8c <lv_fs_get_drv+0x10>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 8003f94:	0001      	movs	r1, r0
 8003f96:	0020      	movs	r0, r4
 8003f98:	f000 f8cf 	bl	800413a <lv_ll_get_next>
 8003f9c:	e7f4      	b.n	8003f88 <lv_fs_get_drv+0xc>
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	20004b9c 	.word	0x20004b9c

08003fa4 <lv_fs_open>:
    file_p->drv    = NULL;
 8003fa4:	2300      	movs	r3, #0
{
 8003fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	0004      	movs	r4, r0
 8003fac:	000f      	movs	r7, r1
 8003fae:	9203      	str	r2, [sp, #12]
    file_p->drv    = NULL;
 8003fb0:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
 8003fb2:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 8003fb4:	4299      	cmp	r1, r3
 8003fb6:	d035      	beq.n	8004024 <lv_fs_open+0x80>
    file_p->drv = lv_fs_get_drv(letter);
 8003fb8:	7808      	ldrb	r0, [r1, #0]
 8003fba:	f7ff ffdf 	bl	8003f7c <lv_fs_get_drv>
 8003fbe:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d104      	bne.n	8003fce <lv_fs_open+0x2a>
        return LV_FS_RES_NOT_EX;
 8003fc4:	2503      	movs	r5, #3
        file_p->file_d = NULL;
 8003fc6:	6020      	str	r0, [r4, #0]
}
 8003fc8:	0028      	movs	r0, r5
 8003fca:	b005      	add	sp, #20
 8003fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv->ready_cb != NULL) {
 8003fce:	6883      	ldr	r3, [r0, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d006      	beq.n	8003fe2 <lv_fs_open+0x3e>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 8003fd4:	4798      	blx	r3
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d103      	bne.n	8003fe2 <lv_fs_open+0x3e>
            file_p->drv    = NULL;
 8003fda:	6060      	str	r0, [r4, #4]
            file_p->file_d = NULL;
 8003fdc:	6020      	str	r0, [r4, #0]
            return LV_FS_RES_HW_ERR;
 8003fde:	2501      	movs	r5, #1
 8003fe0:	e7f2      	b.n	8003fc8 <lv_fs_open+0x24>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 8003fe2:	6863      	ldr	r3, [r4, #4]
 8003fe4:	8858      	ldrh	r0, [r3, #2]
 8003fe6:	f000 f9c5 	bl	8004374 <lv_mem_alloc>
 8003fea:	1e06      	subs	r6, r0, #0
 8003fec:	6020      	str	r0, [r4, #0]
    lv_mem_assert(file_p->file_d);
 8003fee:	d100      	bne.n	8003ff2 <lv_fs_open+0x4e>
 8003ff0:	e7fe      	b.n	8003ff0 <lv_fs_open+0x4c>
    if(file_p->drv->open_cb == NULL) {
 8003ff2:	6863      	ldr	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
 8003ff4:	2509      	movs	r5, #9
    if(file_p->drv->open_cb == NULL) {
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	9302      	str	r3, [sp, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0e3      	beq.n	8003fc8 <lv_fs_open+0x24>
    const char * real_path = lv_fs_get_real_path(path);
 8004000:	0038      	movs	r0, r7
 8004002:	f7ff ff63 	bl	8003ecc <lv_fs_get_real_path>
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 8004006:	9d02      	ldr	r5, [sp, #8]
    const char * real_path = lv_fs_get_real_path(path);
 8004008:	0002      	movs	r2, r0
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800400a:	9b03      	ldr	r3, [sp, #12]
 800400c:	0031      	movs	r1, r6
 800400e:	9801      	ldr	r0, [sp, #4]
 8004010:	47a8      	blx	r5
 8004012:	1e05      	subs	r5, r0, #0
    if(res != LV_FS_RES_OK) {
 8004014:	d0d8      	beq.n	8003fc8 <lv_fs_open+0x24>
        lv_mem_free(file_p->file_d);
 8004016:	6820      	ldr	r0, [r4, #0]
 8004018:	f000 f9e0 	bl	80043dc <lv_mem_free>
        file_p->file_d = NULL;
 800401c:	2300      	movs	r3, #0
 800401e:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
 8004020:	6063      	str	r3, [r4, #4]
 8004022:	e7d1      	b.n	8003fc8 <lv_fs_open+0x24>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 8004024:	250b      	movs	r5, #11
 8004026:	e7cf      	b.n	8003fc8 <lv_fs_open+0x24>

08004028 <lv_fs_get_ext>:
{
 8004028:	b510      	push	{r4, lr}
 800402a:	0004      	movs	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 800402c:	f7fc f872 	bl	8000114 <strlen>
 8004030:	b280      	uxth	r0, r0
 8004032:	2800      	cmp	r0, #0
 8004034:	d101      	bne.n	800403a <lv_fs_get_ext+0x12>
            return ""; /*No extension if a '\' or '/' found*/
 8004036:	4807      	ldr	r0, [pc, #28]	; (8004054 <lv_fs_get_ext+0x2c>)
 8004038:	e004      	b.n	8004044 <lv_fs_get_ext+0x1c>
        if(fn[i] == '.') {
 800403a:	5c23      	ldrb	r3, [r4, r0]
 800403c:	2b2e      	cmp	r3, #46	; 0x2e
 800403e:	d102      	bne.n	8004046 <lv_fs_get_ext+0x1e>
            return &fn[i + 1];
 8004040:	3001      	adds	r0, #1
 8004042:	1820      	adds	r0, r4, r0
}
 8004044:	bd10      	pop	{r4, pc}
        } else if(fn[i] == '/' || fn[i] == '\\') {
 8004046:	2b2f      	cmp	r3, #47	; 0x2f
 8004048:	d0f5      	beq.n	8004036 <lv_fs_get_ext+0xe>
 800404a:	2b5c      	cmp	r3, #92	; 0x5c
 800404c:	d0f3      	beq.n	8004036 <lv_fs_get_ext+0xe>
    for(i = strlen(fn); i > 0; i--) {
 800404e:	3801      	subs	r0, #1
 8004050:	e7ee      	b.n	8004030 <lv_fs_get_ext+0x8>
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	08004f1e 	.word	0x08004f1e

08004058 <node_set_next.isra.0>:
 * Set the 'next node pointer' of a node
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
 8004058:	b507      	push	{r0, r1, r2, lr}
 800405a:	1e0b      	subs	r3, r1, #0
 800405c:	9201      	str	r2, [sp, #4]
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800405e:	d009      	beq.n	8004074 <node_set_next.isra.0+0x1c>
 8004060:	6800      	ldr	r0, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 8004062:	0011      	movs	r1, r2
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 8004064:	3004      	adds	r0, #4
 8004066:	1818      	adds	r0, r3, r0
 8004068:	2204      	movs	r2, #4
    if(next)
 800406a:	2900      	cmp	r1, #0
 800406c:	d003      	beq.n	8004076 <node_set_next.isra.0+0x1e>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800406e:	a901      	add	r1, sp, #4
 8004070:	f000 fdb4 	bl	8004bdc <memcpy>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
}
 8004074:	bd07      	pop	{r0, r1, r2, pc}
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 8004076:	f000 fdba 	bl	8004bee <memset>
 800407a:	e7fb      	b.n	8004074 <node_set_next.isra.0+0x1c>

0800407c <node_set_prev.isra.2>:
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
 800407c:	b507      	push	{r0, r1, r2, lr}
 800407e:	1e0b      	subs	r3, r1, #0
 8004080:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8004082:	d008      	beq.n	8004096 <node_set_prev.isra.2+0x1a>
 8004084:	6800      	ldr	r0, [r0, #0]
    if(prev)
 8004086:	0011      	movs	r1, r2
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8004088:	1818      	adds	r0, r3, r0
 800408a:	2204      	movs	r2, #4
    if(prev)
 800408c:	2900      	cmp	r1, #0
 800408e:	d003      	beq.n	8004098 <node_set_prev.isra.2+0x1c>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8004090:	a901      	add	r1, sp, #4
 8004092:	f000 fda3 	bl	8004bdc <memcpy>
}
 8004096:	bd07      	pop	{r0, r1, r2, pc}
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 8004098:	f000 fda9 	bl	8004bee <memset>
 800409c:	e7fb      	b.n	8004096 <node_set_prev.isra.2+0x1a>

0800409e <lv_ll_init>:
    ll_p->head = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 80040a2:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 80040a4:	3303      	adds	r3, #3
 80040a6:	4219      	tst	r1, r3
 80040a8:	d001      	beq.n	80040ae <lv_ll_init+0x10>
        node_size = node_size & (~0x3);
 80040aa:	4399      	bics	r1, r3
        node_size += 4;
 80040ac:	3104      	adds	r1, #4
    ll_p->n_size = node_size;
 80040ae:	6001      	str	r1, [r0, #0]
}
 80040b0:	4770      	bx	lr

080040b2 <lv_ll_ins_head>:
{
 80040b2:	b570      	push	{r4, r5, r6, lr}
 80040b4:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80040b6:	6800      	ldr	r0, [r0, #0]
 80040b8:	3008      	adds	r0, #8
 80040ba:	f000 f95b 	bl	8004374 <lv_mem_alloc>
 80040be:	1e05      	subs	r5, r0, #0
    if(n_new != NULL) {
 80040c0:	d015      	beq.n	80040ee <lv_ll_ins_head+0x3c>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 80040c2:	0001      	movs	r1, r0
 80040c4:	2200      	movs	r2, #0
 80040c6:	0020      	movs	r0, r4
 80040c8:	f7ff ffd8 	bl	800407c <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 80040cc:	0029      	movs	r1, r5
 80040ce:	6862      	ldr	r2, [r4, #4]
 80040d0:	0020      	movs	r0, r4
 80040d2:	f7ff ffc1 	bl	8004058 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 80040d6:	6861      	ldr	r1, [r4, #4]
 80040d8:	2900      	cmp	r1, #0
 80040da:	d003      	beq.n	80040e4 <lv_ll_ins_head+0x32>
            node_set_prev(ll_p, ll_p->head, n_new);
 80040dc:	002a      	movs	r2, r5
 80040de:	0020      	movs	r0, r4
 80040e0:	f7ff ffcc 	bl	800407c <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80040e4:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 80040e6:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d100      	bne.n	80040ee <lv_ll_ins_head+0x3c>
            ll_p->tail = n_new;
 80040ec:	60a5      	str	r5, [r4, #8]
}
 80040ee:	0028      	movs	r0, r5
 80040f0:	bd70      	pop	{r4, r5, r6, pc}

080040f2 <lv_ll_ins_tail>:
{
 80040f2:	b570      	push	{r4, r5, r6, lr}
 80040f4:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80040f6:	6800      	ldr	r0, [r0, #0]
 80040f8:	3008      	adds	r0, #8
 80040fa:	f000 f93b 	bl	8004374 <lv_mem_alloc>
 80040fe:	1e05      	subs	r5, r0, #0
    if(n_new == NULL) return NULL;
 8004100:	d015      	beq.n	800412e <lv_ll_ins_tail+0x3c>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8004102:	0001      	movs	r1, r0
 8004104:	2200      	movs	r2, #0
 8004106:	0020      	movs	r0, r4
 8004108:	f7ff ffa6 	bl	8004058 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800410c:	0029      	movs	r1, r5
 800410e:	68a2      	ldr	r2, [r4, #8]
 8004110:	0020      	movs	r0, r4
 8004112:	f7ff ffb3 	bl	800407c <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8004116:	68a1      	ldr	r1, [r4, #8]
 8004118:	2900      	cmp	r1, #0
 800411a:	d003      	beq.n	8004124 <lv_ll_ins_tail+0x32>
            node_set_next(ll_p, ll_p->tail, n_new);
 800411c:	002a      	movs	r2, r5
 800411e:	0020      	movs	r0, r4
 8004120:	f7ff ff9a 	bl	8004058 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8004124:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8004126:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8004128:	2b00      	cmp	r3, #0
 800412a:	d100      	bne.n	800412e <lv_ll_ins_tail+0x3c>
            ll_p->head = n_new;
 800412c:	6065      	str	r5, [r4, #4]
}
 800412e:	0028      	movs	r0, r5
 8004130:	bd70      	pop	{r4, r5, r6, pc}

08004132 <lv_ll_get_head>:
    if(ll_p != NULL) {
 8004132:	2800      	cmp	r0, #0
 8004134:	d000      	beq.n	8004138 <lv_ll_get_head+0x6>
        head = ll_p->head;
 8004136:	6840      	ldr	r0, [r0, #4]
}
 8004138:	4770      	bx	lr

0800413a <lv_ll_get_next>:
    void * next = NULL;
 800413a:	2300      	movs	r3, #0
{
 800413c:	b507      	push	{r0, r1, r2, lr}
    void * next = NULL;
 800413e:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
 8004140:	4298      	cmp	r0, r3
 8004142:	d006      	beq.n	8004152 <lv_ll_get_next+0x18>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 8004144:	6803      	ldr	r3, [r0, #0]
 8004146:	2204      	movs	r2, #4
 8004148:	3304      	adds	r3, #4
 800414a:	18c9      	adds	r1, r1, r3
 800414c:	a801      	add	r0, sp, #4
 800414e:	f000 fd45 	bl	8004bdc <memcpy>
}
 8004152:	9801      	ldr	r0, [sp, #4]
 8004154:	bd0e      	pop	{r1, r2, r3, pc}

08004156 <lv_ll_get_prev>:
    void * prev = NULL;
 8004156:	2300      	movs	r3, #0
{
 8004158:	b507      	push	{r0, r1, r2, lr}
    void * prev = NULL;
 800415a:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
 800415c:	4298      	cmp	r0, r3
 800415e:	d005      	beq.n	800416c <lv_ll_get_prev+0x16>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 8004160:	6803      	ldr	r3, [r0, #0]
 8004162:	2204      	movs	r2, #4
 8004164:	18c9      	adds	r1, r1, r3
 8004166:	a801      	add	r0, sp, #4
 8004168:	f000 fd38 	bl	8004bdc <memcpy>
}
 800416c:	9801      	ldr	r0, [sp, #4]
 800416e:	bd0e      	pop	{r1, r2, r3, pc}

08004170 <lv_ll_ins_prev>:
{
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	0005      	movs	r5, r0
 8004174:	000c      	movs	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 8004176:	2800      	cmp	r0, #0
 8004178:	d02a      	beq.n	80041d0 <lv_ll_ins_prev+0x60>
 800417a:	2900      	cmp	r1, #0
 800417c:	d005      	beq.n	800418a <lv_ll_ins_prev+0x1a>
    if(lv_ll_get_head(ll_p) == n_act) {
 800417e:	6843      	ldr	r3, [r0, #4]
 8004180:	4299      	cmp	r1, r3
 8004182:	d104      	bne.n	800418e <lv_ll_ins_prev+0x1e>
        n_new = lv_ll_ins_head(ll_p);
 8004184:	f7ff ff95 	bl	80040b2 <lv_ll_ins_head>
 8004188:	0004      	movs	r4, r0
}
 800418a:	0020      	movs	r0, r4
 800418c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800418e:	6800      	ldr	r0, [r0, #0]
 8004190:	3008      	adds	r0, #8
 8004192:	f000 f8ef 	bl	8004374 <lv_mem_alloc>
 8004196:	1e06      	subs	r6, r0, #0
        if(n_new == NULL) return NULL;
 8004198:	d018      	beq.n	80041cc <lv_ll_ins_prev+0x5c>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800419a:	0021      	movs	r1, r4
 800419c:	0028      	movs	r0, r5
 800419e:	f7ff ffda 	bl	8004156 <lv_ll_get_prev>
 80041a2:	0007      	movs	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 80041a4:	0001      	movs	r1, r0
 80041a6:	0032      	movs	r2, r6
 80041a8:	0028      	movs	r0, r5
 80041aa:	f7ff ff55 	bl	8004058 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 80041ae:	003a      	movs	r2, r7
 80041b0:	0031      	movs	r1, r6
 80041b2:	0028      	movs	r0, r5
 80041b4:	f7ff ff62 	bl	800407c <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 80041b8:	0032      	movs	r2, r6
 80041ba:	0021      	movs	r1, r4
 80041bc:	0028      	movs	r0, r5
 80041be:	f7ff ff5d 	bl	800407c <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 80041c2:	0022      	movs	r2, r4
 80041c4:	0031      	movs	r1, r6
 80041c6:	0028      	movs	r0, r5
 80041c8:	f7ff ff46 	bl	8004058 <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 80041cc:	0034      	movs	r4, r6
 80041ce:	e7dc      	b.n	800418a <lv_ll_ins_prev+0x1a>
    if(NULL == ll_p || NULL == n_act) return NULL;
 80041d0:	0004      	movs	r4, r0
 80041d2:	e7da      	b.n	800418a <lv_ll_ins_prev+0x1a>

080041d4 <lv_ll_rem>:
{
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	0004      	movs	r4, r0
 80041d8:	000d      	movs	r5, r1
    if(ll_p != NULL) {
 80041da:	2800      	cmp	r0, #0
 80041dc:	d01b      	beq.n	8004216 <lv_ll_rem+0x42>
    if(lv_ll_get_head(ll_p) == node_p) {
 80041de:	6843      	ldr	r3, [r0, #4]
 80041e0:	4299      	cmp	r1, r3
 80041e2:	d109      	bne.n	80041f8 <lv_ll_rem+0x24>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 80041e4:	0029      	movs	r1, r5
 80041e6:	0020      	movs	r0, r4
 80041e8:	f7ff ffa7 	bl	800413a <lv_ll_get_next>
            node_set_prev(ll_p, ll_p->head, NULL);
 80041ec:	2200      	movs	r2, #0
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 80041ee:	1e01      	subs	r1, r0, #0
 80041f0:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 80041f2:	d123      	bne.n	800423c <lv_ll_rem+0x68>
            ll_p->tail = NULL;
 80041f4:	60a0      	str	r0, [r4, #8]
}
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 80041f8:	6883      	ldr	r3, [r0, #8]
 80041fa:	4299      	cmp	r1, r3
 80041fc:	d10d      	bne.n	800421a <lv_ll_rem+0x46>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 80041fe:	f7ff ffaa 	bl	8004156 <lv_ll_get_prev>
 8004202:	1e01      	subs	r1, r0, #0
 8004204:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 8004206:	d101      	bne.n	800420c <lv_ll_rem+0x38>
            ll_p->head = NULL;
 8004208:	6060      	str	r0, [r4, #4]
 800420a:	e7f4      	b.n	80041f6 <lv_ll_rem+0x22>
            node_set_next(ll_p, ll_p->tail, NULL);
 800420c:	2200      	movs	r2, #0
 800420e:	0020      	movs	r0, r4
 8004210:	f7ff ff22 	bl	8004058 <node_set_next.isra.0>
 8004214:	e7ef      	b.n	80041f6 <lv_ll_rem+0x22>
    if(lv_ll_get_head(ll_p) == node_p) {
 8004216:	2900      	cmp	r1, #0
 8004218:	d0e4      	beq.n	80041e4 <lv_ll_rem+0x10>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800421a:	0029      	movs	r1, r5
 800421c:	0020      	movs	r0, r4
 800421e:	f7ff ff9a 	bl	8004156 <lv_ll_get_prev>
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 8004222:	0029      	movs	r1, r5
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 8004224:	0006      	movs	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 8004226:	0020      	movs	r0, r4
 8004228:	f7ff ff87 	bl	800413a <lv_ll_get_next>
 800422c:	0005      	movs	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800422e:	0002      	movs	r2, r0
 8004230:	0031      	movs	r1, r6
 8004232:	0020      	movs	r0, r4
 8004234:	f7ff ff10 	bl	8004058 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 8004238:	0032      	movs	r2, r6
 800423a:	0029      	movs	r1, r5
 800423c:	0020      	movs	r0, r4
 800423e:	f7ff ff1d 	bl	800407c <node_set_prev.isra.2>
}
 8004242:	e7d8      	b.n	80041f6 <lv_ll_rem+0x22>

08004244 <lv_ll_move_before>:
{
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	0004      	movs	r4, r0
 8004248:	000d      	movs	r5, r1
 800424a:	0016      	movs	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 800424c:	4291      	cmp	r1, r2
 800424e:	d007      	beq.n	8004260 <lv_ll_move_before+0x1c>
    if(n_after != NULL)
 8004250:	2a00      	cmp	r2, #0
 8004252:	d006      	beq.n	8004262 <lv_ll_move_before+0x1e>
        n_before = lv_ll_get_prev(ll_p, n_after);
 8004254:	0011      	movs	r1, r2
 8004256:	f7ff ff7e 	bl	8004156 <lv_ll_get_prev>
 800425a:	0007      	movs	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 800425c:	4285      	cmp	r5, r0
 800425e:	d122      	bne.n	80042a6 <lv_ll_move_before+0x62>
}
 8004260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 8004262:	2800      	cmp	r0, #0
 8004264:	d000      	beq.n	8004268 <lv_ll_move_before+0x24>
        tail = ll_p->tail;
 8004266:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 8004268:	42b5      	cmp	r5, r6
 800426a:	d0f9      	beq.n	8004260 <lv_ll_move_before+0x1c>
    lv_ll_rem(ll_p, n_act);
 800426c:	0029      	movs	r1, r5
 800426e:	0020      	movs	r0, r4
 8004270:	f7ff ffb0 	bl	80041d4 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 8004274:	002a      	movs	r2, r5
 8004276:	0031      	movs	r1, r6
 8004278:	0020      	movs	r0, r4
 800427a:	f7ff feed 	bl	8004058 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800427e:	0032      	movs	r2, r6
 8004280:	0029      	movs	r1, r5
 8004282:	0020      	movs	r0, r4
 8004284:	f7ff fefa 	bl	800407c <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 8004288:	002a      	movs	r2, r5
 800428a:	2100      	movs	r1, #0
 800428c:	0020      	movs	r0, r4
 800428e:	f7ff fef5 	bl	800407c <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 8004292:	2200      	movs	r2, #0
 8004294:	0029      	movs	r1, r5
 8004296:	0020      	movs	r0, r4
 8004298:	f7ff fede 	bl	8004058 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 800429c:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
 800429e:	2e00      	cmp	r6, #0
 80042a0:	d1de      	bne.n	8004260 <lv_ll_move_before+0x1c>
 80042a2:	6065      	str	r5, [r4, #4]
 80042a4:	e7dc      	b.n	8004260 <lv_ll_move_before+0x1c>
    lv_ll_rem(ll_p, n_act);
 80042a6:	0029      	movs	r1, r5
 80042a8:	0020      	movs	r0, r4
 80042aa:	f7ff ff93 	bl	80041d4 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 80042ae:	002a      	movs	r2, r5
 80042b0:	0039      	movs	r1, r7
 80042b2:	0020      	movs	r0, r4
 80042b4:	f7ff fed0 	bl	8004058 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 80042b8:	003a      	movs	r2, r7
 80042ba:	0029      	movs	r1, r5
 80042bc:	0020      	movs	r0, r4
 80042be:	f7ff fedd 	bl	800407c <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 80042c2:	0031      	movs	r1, r6
 80042c4:	002a      	movs	r2, r5
 80042c6:	0020      	movs	r0, r4
 80042c8:	f7ff fed8 	bl	800407c <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 80042cc:	0032      	movs	r2, r6
 80042ce:	0029      	movs	r1, r5
 80042d0:	0020      	movs	r0, r4
 80042d2:	f7ff fec1 	bl	8004058 <node_set_next.isra.0>
 80042d6:	003e      	movs	r6, r7
 80042d8:	e7e1      	b.n	800429e <lv_ll_move_before+0x5a>
	...

080042dc <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 80042dc:	4908      	ldr	r1, [pc, #32]	; (8004300 <ent_get_next+0x24>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 80042de:	2800      	cmp	r0, #0
 80042e0:	d101      	bne.n	80042e6 <ent_get_next+0xa>
        next_e = (lv_mem_ent_t *)work_mem;
 80042e2:	6808      	ldr	r0, [r1, #0]

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
    }

    return next_e;
}
 80042e4:	4770      	bx	lr
        uint8_t * data = &act_e->first_data;
 80042e6:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 80042e8:	6800      	ldr	r0, [r0, #0]
 80042ea:	0840      	lsrs	r0, r0, #1
 80042ec:	1818      	adds	r0, r3, r0
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80042ee:	680b      	ldr	r3, [r1, #0]
 80042f0:	21c0      	movs	r1, #192	; 0xc0
 80042f2:	0189      	lsls	r1, r1, #6
 80042f4:	1d02      	adds	r2, r0, #4
 80042f6:	185b      	adds	r3, r3, r1
 80042f8:	429a      	cmp	r2, r3
 80042fa:	419b      	sbcs	r3, r3
 80042fc:	4018      	ands	r0, r3
 80042fe:	e7f1      	b.n	80042e4 <ent_get_next+0x8>
 8004300:	20001288 	.word	0x20001288

08004304 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 8004304:	2303      	movs	r3, #3
{
 8004306:	b530      	push	{r4, r5, lr}
    if(size & 0x3) {
 8004308:	4219      	tst	r1, r3
 800430a:	d001      	beq.n	8004310 <ent_trunc+0xc>
        size = size & (~0x3);
 800430c:	4399      	bics	r1, r3
        size += 4;
 800430e:	3104      	adds	r1, #4
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8004310:	6803      	ldr	r3, [r0, #0]
 8004312:	1d0a      	adds	r2, r1, #4
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	4293      	cmp	r3, r2
 8004318:	d015      	beq.n	8004346 <ent_trunc+0x42>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800431a:	4299      	cmp	r1, r3
 800431c:	d00c      	beq.n	8004338 <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
 800431e:	2401      	movs	r4, #1
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 8004320:	3b04      	subs	r3, #4
 8004322:	1a5b      	subs	r3, r3, r1
 8004324:	40a3      	lsls	r3, r4
        uint8_t * e_data             = &e->first_data;
 8004326:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
 8004328:	1852      	adds	r2, r2, r1
        after_new_e->header.s.used   = 0;
 800432a:	7815      	ldrb	r5, [r2, #0]
 800432c:	43a5      	bics	r5, r4
 800432e:	7015      	strb	r5, [r2, #0]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 8004330:	6815      	ldr	r5, [r2, #0]
 8004332:	402c      	ands	r4, r5
 8004334:	4323      	orrs	r3, r4
 8004336:	6013      	str	r3, [r2, #0]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 8004338:	2301      	movs	r3, #1
 800433a:	6802      	ldr	r2, [r0, #0]
 800433c:	0049      	lsls	r1, r1, #1
 800433e:	4013      	ands	r3, r2
 8004340:	4319      	orrs	r1, r3
 8004342:	6001      	str	r1, [r0, #0]
}
 8004344:	bd30      	pop	{r4, r5, pc}
 8004346:	0019      	movs	r1, r3
 8004348:	e7f6      	b.n	8004338 <ent_trunc+0x34>
	...

0800434c <lv_mem_init>:
    full->header.s.used = 0;
 800434c:	2101      	movs	r1, #1
    work_mem = (uint8_t *)work_mem_int;
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <lv_mem_init+0x1c>)
 8004350:	4a06      	ldr	r2, [pc, #24]	; (800436c <lv_mem_init+0x20>)
    full->header.s.used = 0;
 8004352:	7818      	ldrb	r0, [r3, #0]
    work_mem = (uint8_t *)work_mem_int;
 8004354:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 8004356:	4388      	bics	r0, r1
 8004358:	7018      	strb	r0, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4011      	ands	r1, r2
 800435e:	4a04      	ldr	r2, [pc, #16]	; (8004370 <lv_mem_init+0x24>)
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]
}
 8004364:	4770      	bx	lr
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	2000128c 	.word	0x2000128c
 800436c:	20001288 	.word	0x20001288
 8004370:	00005ff8 	.word	0x00005ff8

08004374 <lv_mem_alloc>:
{
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	1e05      	subs	r5, r0, #0
        return &zero_mem;
 8004378:	4c11      	ldr	r4, [pc, #68]	; (80043c0 <lv_mem_alloc+0x4c>)
    if(size == 0) {
 800437a:	d01e      	beq.n	80043ba <lv_mem_alloc+0x46>
    if(size & 0x3) {
 800437c:	2303      	movs	r3, #3
 800437e:	4218      	tst	r0, r3
 8004380:	d001      	beq.n	8004386 <lv_mem_alloc+0x12>
        size = size & (~0x3);
 8004382:	439d      	bics	r5, r3
        size += 4;
 8004384:	3504      	adds	r5, #4
    lv_mem_ent_t * e = NULL;
 8004386:	2400      	movs	r4, #0
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 8004388:	2601      	movs	r6, #1
        e = ent_get_next(e);
 800438a:	0020      	movs	r0, r4
 800438c:	f7ff ffa6 	bl	80042dc <ent_get_next>
 8004390:	1e04      	subs	r4, r0, #0
        if(e != NULL) {
 8004392:	d012      	beq.n	80043ba <lv_mem_alloc+0x46>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 8004394:	7803      	ldrb	r3, [r0, #0]
 8004396:	4233      	tst	r3, r6
 8004398:	d1f7      	bne.n	800438a <lv_mem_alloc+0x16>
 800439a:	6803      	ldr	r3, [r0, #0]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	429d      	cmp	r5, r3
 80043a0:	d8f3      	bhi.n	800438a <lv_mem_alloc+0x16>
        ent_trunc(e, size),
 80043a2:	0029      	movs	r1, r5
 80043a4:	f7ff ffae 	bl	8004304 <ent_trunc>
            e->header.s.used = 1;
 80043a8:	7823      	ldrb	r3, [r4, #0]
    if(alloc != NULL) memset(alloc, 0xaa, size);
 80043aa:	002a      	movs	r2, r5
            e->header.s.used = 1;
 80043ac:	431e      	orrs	r6, r3
 80043ae:	7026      	strb	r6, [r4, #0]
        alloc = &e->first_data;
 80043b0:	3404      	adds	r4, #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 80043b2:	21aa      	movs	r1, #170	; 0xaa
 80043b4:	0020      	movs	r0, r4
 80043b6:	f000 fc1a 	bl	8004bee <memset>
}
 80043ba:	0020      	movs	r0, r4
 80043bc:	bd70      	pop	{r4, r5, r6, pc}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	2000428c 	.word	0x2000428c

080043c4 <lv_mem_get_size>:
{
 80043c4:	1e03      	subs	r3, r0, #0
    if(data == NULL) return 0;
 80043c6:	d006      	beq.n	80043d6 <lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
 80043c8:	4a03      	ldr	r2, [pc, #12]	; (80043d8 <lv_mem_get_size+0x14>)
    if(data == NULL) return 0;
 80043ca:	2000      	movs	r0, #0
    if(data == &zero_mem) return 0;
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d002      	beq.n	80043d6 <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 80043d0:	3b04      	subs	r3, #4
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	0840      	lsrs	r0, r0, #1
}
 80043d6:	4770      	bx	lr
 80043d8:	2000428c 	.word	0x2000428c

080043dc <lv_mem_free>:
    if(data == &zero_mem) return;
 80043dc:	4b13      	ldr	r3, [pc, #76]	; (800442c <lv_mem_free+0x50>)
{
 80043de:	b570      	push	{r4, r5, r6, lr}
 80043e0:	0004      	movs	r4, r0
    if(data == &zero_mem) return;
 80043e2:	4298      	cmp	r0, r3
 80043e4:	d012      	beq.n	800440c <lv_mem_free+0x30>
    if(data == NULL) return;
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d010      	beq.n	800440c <lv_mem_free+0x30>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 80043ea:	f7ff ffeb 	bl	80043c4 <lv_mem_get_size>
    e->header.s.used = 0;
 80043ee:	2501      	movs	r5, #1
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 80043f0:	0002      	movs	r2, r0
 80043f2:	21bb      	movs	r1, #187	; 0xbb
 80043f4:	0020      	movs	r0, r4
    e->header.s.used = 0;
 80043f6:	3c04      	subs	r4, #4
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 80043f8:	f000 fbf9 	bl	8004bee <memset>
    e_next = ent_get_next(e);
 80043fc:	0020      	movs	r0, r4
    e->header.s.used = 0;
 80043fe:	7823      	ldrb	r3, [r4, #0]
 8004400:	43ab      	bics	r3, r5
 8004402:	7023      	strb	r3, [r4, #0]
        e_next = ent_get_next(e_next);
 8004404:	f7ff ff6a 	bl	80042dc <ent_get_next>
    while(e_next != NULL) {
 8004408:	2800      	cmp	r0, #0
 800440a:	d100      	bne.n	800440e <lv_mem_free+0x32>
}
 800440c:	bd70      	pop	{r4, r5, r6, pc}
        if(e_next->header.s.used == 0) {
 800440e:	7803      	ldrb	r3, [r0, #0]
 8004410:	422b      	tst	r3, r5
 8004412:	d1fb      	bne.n	800440c <lv_mem_free+0x30>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 8004414:	6822      	ldr	r2, [r4, #0]
 8004416:	6801      	ldr	r1, [r0, #0]
 8004418:	0853      	lsrs	r3, r2, #1
 800441a:	3304      	adds	r3, #4
 800441c:	0849      	lsrs	r1, r1, #1
 800441e:	185b      	adds	r3, r3, r1
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	402a      	ands	r2, r5
 8004424:	4313      	orrs	r3, r2
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	e7ec      	b.n	8004404 <lv_mem_free+0x28>
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	2000428c 	.word	0x2000428c

08004430 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 8004430:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 8004432:	2114      	movs	r1, #20
 8004434:	4803      	ldr	r0, [pc, #12]	; (8004444 <lv_task_core_init+0x14>)
 8004436:	f7ff fe32 	bl	800409e <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 800443a:	2201      	movs	r2, #1
 800443c:	4b02      	ldr	r3, [pc, #8]	; (8004448 <lv_task_core_init+0x18>)
 800443e:	701a      	strb	r2, [r3, #0]
}
 8004440:	bd10      	pop	{r4, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	20004b68 	.word	0x20004b68
 8004448:	200042a0 	.word	0x200042a0

0800444c <lv_task_create_basic>:
{
 800444c:	b570      	push	{r4, r5, r6, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800444e:	4c1c      	ldr	r4, [pc, #112]	; (80044c0 <lv_task_create_basic+0x74>)
 8004450:	0020      	movs	r0, r4
 8004452:	f7ff fe6e 	bl	8004132 <lv_ll_get_head>
 8004456:	1e01      	subs	r1, r0, #0
    if(NULL == tmp) {
 8004458:	d105      	bne.n	8004466 <lv_task_create_basic+0x1a>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 800445a:	0020      	movs	r0, r4
 800445c:	f7ff fe29 	bl	80040b2 <lv_ll_ins_head>
 8004460:	1e04      	subs	r4, r0, #0
        lv_mem_assert(new_task);
 8004462:	d114      	bne.n	800448e <lv_task_create_basic+0x42>
 8004464:	e7fe      	b.n	8004464 <lv_task_create_basic+0x18>
            if(tmp->prio <= DEF_PRIO) {
 8004466:	7c0b      	ldrb	r3, [r1, #16]
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 8004468:	0020      	movs	r0, r4
            if(tmp->prio <= DEF_PRIO) {
 800446a:	075b      	lsls	r3, r3, #29
 800446c:	0f5b      	lsrs	r3, r3, #29
 800446e:	2b03      	cmp	r3, #3
 8004470:	dc04      	bgt.n	800447c <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 8004472:	f7ff fe7d 	bl	8004170 <lv_ll_ins_prev>
 8004476:	1e04      	subs	r4, r0, #0
                lv_mem_assert(new_task);
 8004478:	d109      	bne.n	800448e <lv_task_create_basic+0x42>
 800447a:	e7fe      	b.n	800447a <lv_task_create_basic+0x2e>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800447c:	f7ff fe5d 	bl	800413a <lv_ll_get_next>
 8004480:	1e01      	subs	r1, r0, #0
        } while(tmp != NULL);
 8004482:	d1f0      	bne.n	8004466 <lv_task_create_basic+0x1a>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 8004484:	0020      	movs	r0, r4
 8004486:	f7ff fe34 	bl	80040f2 <lv_ll_ins_tail>
 800448a:	1e04      	subs	r4, r0, #0
            lv_mem_assert(new_task);
 800448c:	d016      	beq.n	80044bc <lv_task_create_basic+0x70>
    new_task->period  = DEF_PERIOD;
 800448e:	23fa      	movs	r3, #250	; 0xfa
    new_task->prio    = DEF_PRIO;
 8004490:	2207      	movs	r2, #7
    new_task->period  = DEF_PERIOD;
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 8004496:	7c23      	ldrb	r3, [r4, #16]
    new_task->task_cb = NULL;
 8004498:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
 800449a:	4393      	bics	r3, r2
 800449c:	001a      	movs	r2, r3
    new_task->once     = 0;
 800449e:	2303      	movs	r3, #3
 80044a0:	4313      	orrs	r3, r2
 80044a2:	2208      	movs	r2, #8
 80044a4:	4393      	bics	r3, r2
    new_task->task_cb = NULL;
 80044a6:	60a5      	str	r5, [r4, #8]
    new_task->once     = 0;
 80044a8:	7423      	strb	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
 80044aa:	f7ff fc5d 	bl	8003d68 <lv_tick_get>
    task_created = true;
 80044ae:	2201      	movs	r2, #1
 80044b0:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <lv_task_create_basic+0x78>)
    new_task->last_run = lv_tick_get();
 80044b2:	6060      	str	r0, [r4, #4]
    new_task->user_data = NULL;
 80044b4:	60e5      	str	r5, [r4, #12]
}
 80044b6:	0020      	movs	r0, r4
    task_created = true;
 80044b8:	701a      	strb	r2, [r3, #0]
}
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	e7fe      	b.n	80044bc <lv_task_create_basic+0x70>
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	20004b68 	.word	0x20004b68
 80044c4:	200042a1 	.word	0x200042a1

080044c8 <lv_task_del>:
{
 80044c8:	b510      	push	{r4, lr}
 80044ca:	0004      	movs	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 80044cc:	0001      	movs	r1, r0
 80044ce:	4807      	ldr	r0, [pc, #28]	; (80044ec <lv_task_del+0x24>)
 80044d0:	f7ff fe80 	bl	80041d4 <lv_ll_rem>
    lv_mem_free(task);
 80044d4:	0020      	movs	r0, r4
 80044d6:	f7ff ff81 	bl	80043dc <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <lv_task_del+0x28>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	429c      	cmp	r4, r3
 80044e0:	d102      	bne.n	80044e8 <lv_task_del+0x20>
 80044e2:	2201      	movs	r2, #1
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <lv_task_del+0x2c>)
 80044e6:	701a      	strb	r2, [r3, #0]
}
 80044e8:	bd10      	pop	{r4, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	20004b68 	.word	0x20004b68
 80044f0:	20004ba8 	.word	0x20004ba8
 80044f4:	200042a2 	.word	0x200042a2

080044f8 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	0004      	movs	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 80044fc:	6840      	ldr	r0, [r0, #4]
 80044fe:	f7ff fc41 	bl	8003d84 <lv_tick_elaps>
    if(elp >= task->period) {
 8004502:	6823      	ldr	r3, [r4, #0]
    bool exec = false;
 8004504:	2500      	movs	r5, #0
    if(elp >= task->period) {
 8004506:	4298      	cmp	r0, r3
 8004508:	d315      	bcc.n	8004536 <lv_task_exec+0x3e>
        task->last_run = lv_tick_get();
 800450a:	f7ff fc2d 	bl	8003d68 <lv_tick_get>
        task_deleted   = false;
        task_created   = false;
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <lv_task_exec+0x44>)
        task_deleted   = false;
 8004510:	4e0b      	ldr	r6, [pc, #44]	; (8004540 <lv_task_exec+0x48>)
        task_created   = false;
 8004512:	701d      	strb	r5, [r3, #0]
        if(task->task_cb) task->task_cb(task);
 8004514:	68a3      	ldr	r3, [r4, #8]
        task->last_run = lv_tick_get();
 8004516:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 8004518:	7035      	strb	r5, [r6, #0]
        if(task->task_cb) task->task_cb(task);
 800451a:	42ab      	cmp	r3, r5
 800451c:	d001      	beq.n	8004522 <lv_task_exec+0x2a>
 800451e:	0020      	movs	r0, r4
 8004520:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 8004522:	7835      	ldrb	r5, [r6, #0]
 8004524:	2d00      	cmp	r5, #0
 8004526:	d106      	bne.n	8004536 <lv_task_exec+0x3e>
            if(task->once != 0) {
 8004528:	7c23      	ldrb	r3, [r4, #16]
                lv_task_del(task);
            }
        }
        exec = true;
 800452a:	3501      	adds	r5, #1
            if(task->once != 0) {
 800452c:	071b      	lsls	r3, r3, #28
 800452e:	d502      	bpl.n	8004536 <lv_task_exec+0x3e>
                lv_task_del(task);
 8004530:	0020      	movs	r0, r4
 8004532:	f7ff ffc9 	bl	80044c8 <lv_task_del>
    }

    return exec;
}
 8004536:	0028      	movs	r0, r5
 8004538:	bd70      	pop	{r4, r5, r6, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	200042a1 	.word	0x200042a1
 8004540:	200042a2 	.word	0x200042a2

08004544 <lv_task_handler>:
{
 8004544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(task_handler_mutex) return;
 8004546:	4f38      	ldr	r7, [pc, #224]	; (8004628 <lv_task_handler+0xe4>)
 8004548:	783c      	ldrb	r4, [r7, #0]
 800454a:	2c00      	cmp	r4, #0
 800454c:	d107      	bne.n	800455e <lv_task_handler+0x1a>
    task_handler_mutex = true;
 800454e:	2301      	movs	r3, #1
 8004550:	703b      	strb	r3, [r7, #0]
    if(lv_task_run == false) {
 8004552:	4b36      	ldr	r3, [pc, #216]	; (800462c <lv_task_handler+0xe8>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <lv_task_handler+0x1c>
        task_handler_mutex = false; /*Release mutex*/
 800455a:	2300      	movs	r3, #0
 800455c:	703b      	strb	r3, [r7, #0]
}
 800455e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    handler_start = lv_tick_get();
 8004560:	f7ff fc02 	bl	8003d68 <lv_tick_get>
 8004564:	4e32      	ldr	r6, [pc, #200]	; (8004630 <lv_task_handler+0xec>)
 8004566:	6030      	str	r0, [r6, #0]
        task_deleted             = false;
 8004568:	2300      	movs	r3, #0
 800456a:	4a32      	ldr	r2, [pc, #200]	; (8004634 <lv_task_handler+0xf0>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800456c:	4832      	ldr	r0, [pc, #200]	; (8004638 <lv_task_handler+0xf4>)
        task_deleted             = false;
 800456e:	7013      	strb	r3, [r2, #0]
        task_created             = false;
 8004570:	4a32      	ldr	r2, [pc, #200]	; (800463c <lv_task_handler+0xf8>)
 8004572:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8004574:	f7ff fddd 	bl	8004132 <lv_ll_get_head>
 8004578:	4b31      	ldr	r3, [pc, #196]	; (8004640 <lv_task_handler+0xfc>)
 800457a:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 800457c:	4d30      	ldr	r5, [pc, #192]	; (8004640 <lv_task_handler+0xfc>)
 800457e:	6829      	ldr	r1, [r5, #0]
 8004580:	2900      	cmp	r1, #0
 8004582:	d123      	bne.n	80045cc <lv_task_handler+0x88>
    busy_time += lv_tick_elaps(handler_start);
 8004584:	6830      	ldr	r0, [r6, #0]
 8004586:	f7ff fbfd 	bl	8003d84 <lv_tick_elaps>
 800458a:	4c2e      	ldr	r4, [pc, #184]	; (8004644 <lv_task_handler+0x100>)
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800458c:	4e2e      	ldr	r6, [pc, #184]	; (8004648 <lv_task_handler+0x104>)
    busy_time += lv_tick_elaps(handler_start);
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	1818      	adds	r0, r3, r0
 8004592:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8004594:	6830      	ldr	r0, [r6, #0]
 8004596:	f7ff fbf5 	bl	8003d84 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800459a:	23f4      	movs	r3, #244	; 0xf4
 800459c:	33ff      	adds	r3, #255	; 0xff
 800459e:	4298      	cmp	r0, r3
 80045a0:	d9db      	bls.n	800455a <lv_task_handler+0x16>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 80045a2:	2564      	movs	r5, #100	; 0x64
 80045a4:	21fa      	movs	r1, #250	; 0xfa
 80045a6:	6820      	ldr	r0, [r4, #0]
 80045a8:	0049      	lsls	r1, r1, #1
 80045aa:	4368      	muls	r0, r5
 80045ac:	f7fb fdce 	bl	800014c <__udivsi3>
 80045b0:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 80045b2:	2300      	movs	r3, #0
 80045b4:	42a8      	cmp	r0, r5
 80045b6:	d801      	bhi.n	80045bc <lv_task_handler+0x78>
 80045b8:	1a2d      	subs	r5, r5, r0
 80045ba:	b2eb      	uxtb	r3, r5
 80045bc:	4a23      	ldr	r2, [pc, #140]	; (800464c <lv_task_handler+0x108>)
 80045be:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 80045c4:	f7ff fbd0 	bl	8003d68 <lv_tick_get>
 80045c8:	6030      	str	r0, [r6, #0]
 80045ca:	e7c6      	b.n	800455a <lv_task_handler+0x16>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 80045cc:	481a      	ldr	r0, [pc, #104]	; (8004638 <lv_task_handler+0xf4>)
 80045ce:	f7ff fdb4 	bl	800413a <lv_ll_get_next>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 80045d2:	2207      	movs	r2, #7
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 80045d4:	9001      	str	r0, [sp, #4]
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 80045d6:	6828      	ldr	r0, [r5, #0]
 80045d8:	7c03      	ldrb	r3, [r0, #16]
 80045da:	401a      	ands	r2, r3
 80045dc:	d0d2      	beq.n	8004584 <lv_task_handler+0x40>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 80045de:	4284      	cmp	r4, r0
 80045e0:	d103      	bne.n	80045ea <lv_task_handler+0xa6>
                LV_GC_ROOT(_lv_task_act) = next;
 80045e2:	9b01      	ldr	r3, [sp, #4]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 80045e4:	2400      	movs	r4, #0
                LV_GC_ROOT(_lv_task_act) = next;
 80045e6:	602b      	str	r3, [r5, #0]
                continue; /*Load the next task*/
 80045e8:	e7c8      	b.n	800457c <lv_task_handler+0x38>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 80045ea:	2a05      	cmp	r2, #5
 80045ec:	d10d      	bne.n	800460a <lv_task_handler+0xc6>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 80045ee:	f7ff ff83 	bl	80044f8 <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 80045f2:	4b10      	ldr	r3, [pc, #64]	; (8004634 <lv_task_handler+0xf0>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1c4      	bne.n	8004584 <lv_task_handler+0x40>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <lv_task_handler+0xf8>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1c0      	bne.n	8004584 <lv_task_handler+0x40>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <lv_task_handler+0xfc>)
 8004604:	9a01      	ldr	r2, [sp, #4]
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e7b8      	b.n	800457c <lv_task_handler+0x38>
            else if(task_interrupter) {
 800460a:	2c00      	cmp	r4, #0
 800460c:	d006      	beq.n	800461c <lv_task_handler+0xd8>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 800460e:	7c22      	ldrb	r2, [r4, #16]
 8004610:	075b      	lsls	r3, r3, #29
 8004612:	0752      	lsls	r2, r2, #29
 8004614:	0f5b      	lsrs	r3, r3, #29
 8004616:	0f52      	lsrs	r2, r2, #29
 8004618:	4293      	cmp	r3, r2
 800461a:	ddea      	ble.n	80045f2 <lv_task_handler+0xae>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 800461c:	f7ff ff6c 	bl	80044f8 <lv_task_exec>
 8004620:	2800      	cmp	r0, #0
 8004622:	d0e6      	beq.n	80045f2 <lv_task_handler+0xae>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 8004624:	682c      	ldr	r4, [r5, #0]
                    break;
 8004626:	e79f      	b.n	8004568 <lv_task_handler+0x24>
 8004628:	200042a3 	.word	0x200042a3
 800462c:	200042a0 	.word	0x200042a0
 8004630:	20004294 	.word	0x20004294
 8004634:	200042a2 	.word	0x200042a2
 8004638:	20004b68 	.word	0x20004b68
 800463c:	200042a1 	.word	0x200042a1
 8004640:	20004ba8 	.word	0x20004ba8
 8004644:	20004290 	.word	0x20004290
 8004648:	2000429c 	.word	0x2000429c
 800464c:	20004298 	.word	0x20004298

08004650 <lv_task_set_prio>:
    if(task->prio == prio) return;
 8004650:	7c03      	ldrb	r3, [r0, #16]
{
 8004652:	b570      	push	{r4, r5, r6, lr}
    if(task->prio == prio) return;
 8004654:	075b      	lsls	r3, r3, #29
{
 8004656:	0004      	movs	r4, r0
 8004658:	000d      	movs	r5, r1
    if(task->prio == prio) return;
 800465a:	0f5b      	lsrs	r3, r3, #29
 800465c:	428b      	cmp	r3, r1
 800465e:	d017      	beq.n	8004690 <lv_task_set_prio+0x40>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8004660:	4e0e      	ldr	r6, [pc, #56]	; (800469c <lv_task_set_prio+0x4c>)
 8004662:	0030      	movs	r0, r6
 8004664:	f7ff fd65 	bl	8004132 <lv_ll_get_head>
 8004668:	1e02      	subs	r2, r0, #0
 800466a:	d006      	beq.n	800467a <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 800466c:	7c13      	ldrb	r3, [r2, #16]
 800466e:	075b      	lsls	r3, r3, #29
 8004670:	0f5b      	lsrs	r3, r3, #29
 8004672:	429d      	cmp	r5, r3
 8004674:	db0d      	blt.n	8004692 <lv_task_set_prio+0x42>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 8004676:	42a2      	cmp	r2, r4
 8004678:	d003      	beq.n	8004682 <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 800467a:	0021      	movs	r1, r4
 800467c:	0030      	movs	r0, r6
 800467e:	f7ff fde1 	bl	8004244 <lv_ll_move_before>
    task->prio = prio;
 8004682:	2307      	movs	r3, #7
 8004684:	002a      	movs	r2, r5
 8004686:	7c25      	ldrb	r5, [r4, #16]
 8004688:	401a      	ands	r2, r3
 800468a:	439d      	bics	r5, r3
 800468c:	4315      	orrs	r5, r2
 800468e:	7425      	strb	r5, [r4, #16]
}
 8004690:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8004692:	0011      	movs	r1, r2
 8004694:	0030      	movs	r0, r6
 8004696:	f7ff fd50 	bl	800413a <lv_ll_get_next>
 800469a:	e7e5      	b.n	8004668 <lv_task_set_prio+0x18>
 800469c:	20004b68 	.word	0x20004b68

080046a0 <lv_task_create>:
{
 80046a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046a2:	0007      	movs	r7, r0
 80046a4:	000e      	movs	r6, r1
 80046a6:	0015      	movs	r5, r2
 80046a8:	9301      	str	r3, [sp, #4]
    lv_task_t * new_task = lv_task_create_basic();
 80046aa:	f7ff fecf 	bl	800444c <lv_task_create_basic>
 80046ae:	1e04      	subs	r4, r0, #0
    lv_mem_assert(new_task);
 80046b0:	d100      	bne.n	80046b4 <lv_task_create+0x14>
 80046b2:	e7fe      	b.n	80046b2 <lv_task_create+0x12>
    task->task_cb = task_cb;
 80046b4:	6087      	str	r7, [r0, #8]
    task->period = period;
 80046b6:	6006      	str	r6, [r0, #0]
    lv_task_set_prio(new_task, prio);
 80046b8:	0029      	movs	r1, r5
 80046ba:	f7ff ffc9 	bl	8004650 <lv_task_set_prio>
    new_task->user_data = user_data;
 80046be:	9b01      	ldr	r3, [sp, #4]
}
 80046c0:	0020      	movs	r0, r4
    new_task->user_data = user_data;
 80046c2:	60e3      	str	r3, [r4, #12]
}
 80046c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080046c6 <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 80046c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046c8:	000f      	movs	r7, r1
 80046ca:	0015      	movs	r5, r2
 80046cc:	9001      	str	r0, [sp, #4]
 80046ce:	9300      	str	r3, [sp, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 80046d0:	2d00      	cmp	r5, #0
 80046d2:	d101      	bne.n	80046d8 <lv_utils_bsearch+0x12>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 80046d4:	0028      	movs	r0, r5
}
 80046d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        middle += (n / 2) * size;
 80046d8:	9c00      	ldr	r4, [sp, #0]
 80046da:	086e      	lsrs	r6, r5, #1
 80046dc:	4374      	muls	r4, r6
 80046de:	193c      	adds	r4, r7, r4
        if((c = (*cmp)(key, middle)) > 0) {
 80046e0:	0021      	movs	r1, r4
 80046e2:	9801      	ldr	r0, [sp, #4]
 80046e4:	9b08      	ldr	r3, [sp, #32]
 80046e6:	4798      	blx	r3
 80046e8:	2800      	cmp	r0, #0
 80046ea:	dd06      	ble.n	80046fa <lv_utils_bsearch+0x34>
 80046ec:	2301      	movs	r3, #1
 80046ee:	43ab      	bics	r3, r5
            n    = (n / 2) - ((n & 1) == 0);
 80046f0:	1af6      	subs	r6, r6, r3
            base = (middle += size);
 80046f2:	9b00      	ldr	r3, [sp, #0]
 80046f4:	18e7      	adds	r7, r4, r3
 80046f6:	0035      	movs	r5, r6
 80046f8:	e7ea      	b.n	80046d0 <lv_utils_bsearch+0xa>
        } else if(c < 0) {
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d1fb      	bne.n	80046f6 <lv_utils_bsearch+0x30>
        middle += (n / 2) * size;
 80046fe:	0020      	movs	r0, r4
 8004700:	e7e9      	b.n	80046d6 <lv_utils_bsearch+0x10>
	...

08004704 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004704:	480d      	ldr	r0, [pc, #52]	; (800473c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004706:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004708:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800470a:	e003      	b.n	8004714 <LoopCopyDataInit>

0800470c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800470e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004710:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004712:	3104      	adds	r1, #4

08004714 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004714:	480b      	ldr	r0, [pc, #44]	; (8004744 <LoopForever+0xa>)
  ldr r3, =_edata
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <LoopForever+0xe>)
  adds r2, r0, r1
 8004718:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800471a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800471c:	d3f6      	bcc.n	800470c <CopyDataInit>
  ldr r2, =_sbss
 800471e:	4a0b      	ldr	r2, [pc, #44]	; (800474c <LoopForever+0x12>)
  b LoopFillZerobss
 8004720:	e002      	b.n	8004728 <LoopFillZerobss>

08004722 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004722:	2300      	movs	r3, #0
  str  r3, [r2]
 8004724:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004726:	3204      	adds	r2, #4

08004728 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004728:	4b09      	ldr	r3, [pc, #36]	; (8004750 <LoopForever+0x16>)
  cmp r2, r3
 800472a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800472c:	d3f9      	bcc.n	8004722 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800472e:	f7fc fd59 	bl	80011e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004732:	f000 f817 	bl	8004764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004736:	f7fb fecb 	bl	80004d0 <main>

0800473a <LoopForever>:

LoopForever:
    b LoopForever
 800473a:	e7fe      	b.n	800473a <LoopForever>
  ldr   r0, =_estack
 800473c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8004740:	08007ce0 	.word	0x08007ce0
  ldr r0, =_sdata
 8004744:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004748:	20000544 	.word	0x20000544
  ldr r2, =_sbss
 800474c:	20000544 	.word	0x20000544
  ldr r3, = _ebss
 8004750:	20004be4 	.word	0x20004be4

08004754 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004754:	e7fe      	b.n	8004754 <ADC1_IRQHandler>
	...

08004758 <__errno>:
 8004758:	4b01      	ldr	r3, [pc, #4]	; (8004760 <__errno+0x8>)
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	4770      	bx	lr
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	20000040 	.word	0x20000040

08004764 <__libc_init_array>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	2600      	movs	r6, #0
 8004768:	4d0c      	ldr	r5, [pc, #48]	; (800479c <__libc_init_array+0x38>)
 800476a:	4c0d      	ldr	r4, [pc, #52]	; (80047a0 <__libc_init_array+0x3c>)
 800476c:	1b64      	subs	r4, r4, r5
 800476e:	10a4      	asrs	r4, r4, #2
 8004770:	42a6      	cmp	r6, r4
 8004772:	d109      	bne.n	8004788 <__libc_init_array+0x24>
 8004774:	2600      	movs	r6, #0
 8004776:	f000 fb6f 	bl	8004e58 <_init>
 800477a:	4d0a      	ldr	r5, [pc, #40]	; (80047a4 <__libc_init_array+0x40>)
 800477c:	4c0a      	ldr	r4, [pc, #40]	; (80047a8 <__libc_init_array+0x44>)
 800477e:	1b64      	subs	r4, r4, r5
 8004780:	10a4      	asrs	r4, r4, #2
 8004782:	42a6      	cmp	r6, r4
 8004784:	d105      	bne.n	8004792 <__libc_init_array+0x2e>
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	00b3      	lsls	r3, r6, #2
 800478a:	58eb      	ldr	r3, [r5, r3]
 800478c:	4798      	blx	r3
 800478e:	3601      	adds	r6, #1
 8004790:	e7ee      	b.n	8004770 <__libc_init_array+0xc>
 8004792:	00b3      	lsls	r3, r6, #2
 8004794:	58eb      	ldr	r3, [r5, r3]
 8004796:	4798      	blx	r3
 8004798:	3601      	adds	r6, #1
 800479a:	e7f2      	b.n	8004782 <__libc_init_array+0x1e>
 800479c:	08007cd8 	.word	0x08007cd8
 80047a0:	08007cd8 	.word	0x08007cd8
 80047a4:	08007cd8 	.word	0x08007cd8
 80047a8:	08007cdc 	.word	0x08007cdc

080047ac <malloc>:
 80047ac:	b510      	push	{r4, lr}
 80047ae:	4b03      	ldr	r3, [pc, #12]	; (80047bc <malloc+0x10>)
 80047b0:	0001      	movs	r1, r0
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	f000 f80e 	bl	80047d4 <_malloc_r>
 80047b8:	bd10      	pop	{r4, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	20000040 	.word	0x20000040

080047c0 <free>:
 80047c0:	b510      	push	{r4, lr}
 80047c2:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <free+0x10>)
 80047c4:	0001      	movs	r1, r0
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	f000 fa90 	bl	8004cec <_free_r>
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	20000040 	.word	0x20000040

080047d4 <_malloc_r>:
 80047d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d6:	000d      	movs	r5, r1
 80047d8:	b085      	sub	sp, #20
 80047da:	350b      	adds	r5, #11
 80047dc:	9001      	str	r0, [sp, #4]
 80047de:	2d16      	cmp	r5, #22
 80047e0:	d908      	bls.n	80047f4 <_malloc_r+0x20>
 80047e2:	2307      	movs	r3, #7
 80047e4:	439d      	bics	r5, r3
 80047e6:	d506      	bpl.n	80047f6 <_malloc_r+0x22>
 80047e8:	230c      	movs	r3, #12
 80047ea:	9a01      	ldr	r2, [sp, #4]
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	2000      	movs	r0, #0
 80047f0:	b005      	add	sp, #20
 80047f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f4:	2510      	movs	r5, #16
 80047f6:	428d      	cmp	r5, r1
 80047f8:	d3f6      	bcc.n	80047e8 <_malloc_r+0x14>
 80047fa:	9801      	ldr	r0, [sp, #4]
 80047fc:	f000 fa00 	bl	8004c00 <__malloc_lock>
 8004800:	23f8      	movs	r3, #248	; 0xf8
 8004802:	33ff      	adds	r3, #255	; 0xff
 8004804:	48ba      	ldr	r0, [pc, #744]	; (8004af0 <_malloc_r+0x31c>)
 8004806:	429d      	cmp	r5, r3
 8004808:	d81f      	bhi.n	800484a <_malloc_r+0x76>
 800480a:	002a      	movs	r2, r5
 800480c:	3208      	adds	r2, #8
 800480e:	1882      	adds	r2, r0, r2
 8004810:	0011      	movs	r1, r2
 8004812:	6854      	ldr	r4, [r2, #4]
 8004814:	3908      	subs	r1, #8
 8004816:	08eb      	lsrs	r3, r5, #3
 8004818:	428c      	cmp	r4, r1
 800481a:	d103      	bne.n	8004824 <_malloc_r+0x50>
 800481c:	68d4      	ldr	r4, [r2, #12]
 800481e:	3302      	adds	r3, #2
 8004820:	42a2      	cmp	r2, r4
 8004822:	d029      	beq.n	8004878 <_malloc_r+0xa4>
 8004824:	2303      	movs	r3, #3
 8004826:	6862      	ldr	r2, [r4, #4]
 8004828:	68a1      	ldr	r1, [r4, #8]
 800482a:	439a      	bics	r2, r3
 800482c:	0013      	movs	r3, r2
 800482e:	68e2      	ldr	r2, [r4, #12]
 8004830:	18e3      	adds	r3, r4, r3
 8004832:	60ca      	str	r2, [r1, #12]
 8004834:	6091      	str	r1, [r2, #8]
 8004836:	2201      	movs	r2, #1
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	9801      	ldr	r0, [sp, #4]
 8004840:	f000 f9e6 	bl	8004c10 <__malloc_unlock>
 8004844:	0020      	movs	r0, r4
 8004846:	3008      	adds	r0, #8
 8004848:	e7d2      	b.n	80047f0 <_malloc_r+0x1c>
 800484a:	0a6a      	lsrs	r2, r5, #9
 800484c:	233f      	movs	r3, #63	; 0x3f
 800484e:	2a00      	cmp	r2, #0
 8004850:	d003      	beq.n	800485a <_malloc_r+0x86>
 8004852:	2a04      	cmp	r2, #4
 8004854:	d828      	bhi.n	80048a8 <_malloc_r+0xd4>
 8004856:	09ab      	lsrs	r3, r5, #6
 8004858:	3338      	adds	r3, #56	; 0x38
 800485a:	2203      	movs	r2, #3
 800485c:	4694      	mov	ip, r2
 800485e:	00d9      	lsls	r1, r3, #3
 8004860:	1809      	adds	r1, r1, r0
 8004862:	68cc      	ldr	r4, [r1, #12]
 8004864:	428c      	cmp	r4, r1
 8004866:	d006      	beq.n	8004876 <_malloc_r+0xa2>
 8004868:	4666      	mov	r6, ip
 800486a:	6862      	ldr	r2, [r4, #4]
 800486c:	43b2      	bics	r2, r6
 800486e:	1b57      	subs	r7, r2, r5
 8004870:	2f0f      	cmp	r7, #15
 8004872:	dd31      	ble.n	80048d8 <_malloc_r+0x104>
 8004874:	3b01      	subs	r3, #1
 8004876:	3301      	adds	r3, #1
 8004878:	0001      	movs	r1, r0
 800487a:	6904      	ldr	r4, [r0, #16]
 800487c:	3108      	adds	r1, #8
 800487e:	428c      	cmp	r4, r1
 8004880:	d04e      	beq.n	8004920 <_malloc_r+0x14c>
 8004882:	2203      	movs	r2, #3
 8004884:	6866      	ldr	r6, [r4, #4]
 8004886:	4396      	bics	r6, r2
 8004888:	0032      	movs	r2, r6
 800488a:	1b76      	subs	r6, r6, r5
 800488c:	2e0f      	cmp	r6, #15
 800488e:	dd31      	ble.n	80048f4 <_malloc_r+0x120>
 8004890:	2701      	movs	r7, #1
 8004892:	1963      	adds	r3, r4, r5
 8004894:	433d      	orrs	r5, r7
 8004896:	4337      	orrs	r7, r6
 8004898:	6065      	str	r5, [r4, #4]
 800489a:	6143      	str	r3, [r0, #20]
 800489c:	6103      	str	r3, [r0, #16]
 800489e:	60d9      	str	r1, [r3, #12]
 80048a0:	6099      	str	r1, [r3, #8]
 80048a2:	605f      	str	r7, [r3, #4]
 80048a4:	50a6      	str	r6, [r4, r2]
 80048a6:	e7ca      	b.n	800483e <_malloc_r+0x6a>
 80048a8:	2a14      	cmp	r2, #20
 80048aa:	d802      	bhi.n	80048b2 <_malloc_r+0xde>
 80048ac:	0013      	movs	r3, r2
 80048ae:	335b      	adds	r3, #91	; 0x5b
 80048b0:	e7d3      	b.n	800485a <_malloc_r+0x86>
 80048b2:	2a54      	cmp	r2, #84	; 0x54
 80048b4:	d802      	bhi.n	80048bc <_malloc_r+0xe8>
 80048b6:	0b2b      	lsrs	r3, r5, #12
 80048b8:	336e      	adds	r3, #110	; 0x6e
 80048ba:	e7ce      	b.n	800485a <_malloc_r+0x86>
 80048bc:	23aa      	movs	r3, #170	; 0xaa
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d802      	bhi.n	80048ca <_malloc_r+0xf6>
 80048c4:	0beb      	lsrs	r3, r5, #15
 80048c6:	3377      	adds	r3, #119	; 0x77
 80048c8:	e7c7      	b.n	800485a <_malloc_r+0x86>
 80048ca:	498a      	ldr	r1, [pc, #552]	; (8004af4 <_malloc_r+0x320>)
 80048cc:	237e      	movs	r3, #126	; 0x7e
 80048ce:	428a      	cmp	r2, r1
 80048d0:	d8c3      	bhi.n	800485a <_malloc_r+0x86>
 80048d2:	0cab      	lsrs	r3, r5, #18
 80048d4:	337c      	adds	r3, #124	; 0x7c
 80048d6:	e7c0      	b.n	800485a <_malloc_r+0x86>
 80048d8:	68e6      	ldr	r6, [r4, #12]
 80048da:	2f00      	cmp	r7, #0
 80048dc:	db08      	blt.n	80048f0 <_malloc_r+0x11c>
 80048de:	68a3      	ldr	r3, [r4, #8]
 80048e0:	60de      	str	r6, [r3, #12]
 80048e2:	60b3      	str	r3, [r6, #8]
 80048e4:	2301      	movs	r3, #1
 80048e6:	18a2      	adds	r2, r4, r2
 80048e8:	6851      	ldr	r1, [r2, #4]
 80048ea:	430b      	orrs	r3, r1
 80048ec:	6053      	str	r3, [r2, #4]
 80048ee:	e7a6      	b.n	800483e <_malloc_r+0x6a>
 80048f0:	0034      	movs	r4, r6
 80048f2:	e7b7      	b.n	8004864 <_malloc_r+0x90>
 80048f4:	6141      	str	r1, [r0, #20]
 80048f6:	6101      	str	r1, [r0, #16]
 80048f8:	2e00      	cmp	r6, #0
 80048fa:	daf3      	bge.n	80048e4 <_malloc_r+0x110>
 80048fc:	497e      	ldr	r1, [pc, #504]	; (8004af8 <_malloc_r+0x324>)
 80048fe:	428a      	cmp	r2, r1
 8004900:	d842      	bhi.n	8004988 <_malloc_r+0x1b4>
 8004902:	08d2      	lsrs	r2, r2, #3
 8004904:	39ff      	subs	r1, #255	; 0xff
 8004906:	1096      	asrs	r6, r2, #2
 8004908:	39ff      	subs	r1, #255	; 0xff
 800490a:	40b1      	lsls	r1, r6
 800490c:	6846      	ldr	r6, [r0, #4]
 800490e:	00d2      	lsls	r2, r2, #3
 8004910:	4331      	orrs	r1, r6
 8004912:	6041      	str	r1, [r0, #4]
 8004914:	1810      	adds	r0, r2, r0
 8004916:	6882      	ldr	r2, [r0, #8]
 8004918:	60e0      	str	r0, [r4, #12]
 800491a:	60a2      	str	r2, [r4, #8]
 800491c:	6084      	str	r4, [r0, #8]
 800491e:	60d4      	str	r4, [r2, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	1099      	asrs	r1, r3, #2
 8004924:	408a      	lsls	r2, r1
 8004926:	4972      	ldr	r1, [pc, #456]	; (8004af0 <_malloc_r+0x31c>)
 8004928:	6848      	ldr	r0, [r1, #4]
 800492a:	4282      	cmp	r2, r0
 800492c:	d900      	bls.n	8004930 <_malloc_r+0x15c>
 800492e:	e097      	b.n	8004a60 <_malloc_r+0x28c>
 8004930:	4210      	tst	r0, r2
 8004932:	d105      	bne.n	8004940 <_malloc_r+0x16c>
 8004934:	2403      	movs	r4, #3
 8004936:	43a3      	bics	r3, r4
 8004938:	0052      	lsls	r2, r2, #1
 800493a:	3304      	adds	r3, #4
 800493c:	4210      	tst	r0, r2
 800493e:	d0fb      	beq.n	8004938 <_malloc_r+0x164>
 8004940:	469c      	mov	ip, r3
 8004942:	00d8      	lsls	r0, r3, #3
 8004944:	1808      	adds	r0, r1, r0
 8004946:	9002      	str	r0, [sp, #8]
 8004948:	9c02      	ldr	r4, [sp, #8]
 800494a:	68e4      	ldr	r4, [r4, #12]
 800494c:	9e02      	ldr	r6, [sp, #8]
 800494e:	42b4      	cmp	r4, r6
 8004950:	d158      	bne.n	8004a04 <_malloc_r+0x230>
 8004952:	0034      	movs	r4, r6
 8004954:	3408      	adds	r4, #8
 8004956:	9402      	str	r4, [sp, #8]
 8004958:	2401      	movs	r4, #1
 800495a:	44a4      	add	ip, r4
 800495c:	4664      	mov	r4, ip
 800495e:	2603      	movs	r6, #3
 8004960:	4234      	tst	r4, r6
 8004962:	d1f1      	bne.n	8004948 <_malloc_r+0x174>
 8004964:	2403      	movs	r4, #3
 8004966:	4223      	tst	r3, r4
 8004968:	d174      	bne.n	8004a54 <_malloc_r+0x280>
 800496a:	684b      	ldr	r3, [r1, #4]
 800496c:	4393      	bics	r3, r2
 800496e:	604b      	str	r3, [r1, #4]
 8004970:	6848      	ldr	r0, [r1, #4]
 8004972:	0052      	lsls	r2, r2, #1
 8004974:	4282      	cmp	r2, r0
 8004976:	d873      	bhi.n	8004a60 <_malloc_r+0x28c>
 8004978:	2a00      	cmp	r2, #0
 800497a:	d071      	beq.n	8004a60 <_malloc_r+0x28c>
 800497c:	4663      	mov	r3, ip
 800497e:	4210      	tst	r0, r2
 8004980:	d1de      	bne.n	8004940 <_malloc_r+0x16c>
 8004982:	3304      	adds	r3, #4
 8004984:	0052      	lsls	r2, r2, #1
 8004986:	e7fa      	b.n	800497e <_malloc_r+0x1aa>
 8004988:	0a56      	lsrs	r6, r2, #9
 800498a:	2e04      	cmp	r6, #4
 800498c:	d816      	bhi.n	80049bc <_malloc_r+0x1e8>
 800498e:	0991      	lsrs	r1, r2, #6
 8004990:	3138      	adds	r1, #56	; 0x38
 8004992:	00cf      	lsls	r7, r1, #3
 8004994:	183e      	adds	r6, r7, r0
 8004996:	2703      	movs	r7, #3
 8004998:	9602      	str	r6, [sp, #8]
 800499a:	46bc      	mov	ip, r7
 800499c:	68b6      	ldr	r6, [r6, #8]
 800499e:	9f02      	ldr	r7, [sp, #8]
 80049a0:	42b7      	cmp	r7, r6
 80049a2:	d127      	bne.n	80049f4 <_malloc_r+0x220>
 80049a4:	2201      	movs	r2, #1
 80049a6:	1089      	asrs	r1, r1, #2
 80049a8:	408a      	lsls	r2, r1
 80049aa:	6841      	ldr	r1, [r0, #4]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	6042      	str	r2, [r0, #4]
 80049b0:	9a02      	ldr	r2, [sp, #8]
 80049b2:	60a6      	str	r6, [r4, #8]
 80049b4:	60e2      	str	r2, [r4, #12]
 80049b6:	6094      	str	r4, [r2, #8]
 80049b8:	60f4      	str	r4, [r6, #12]
 80049ba:	e7b1      	b.n	8004920 <_malloc_r+0x14c>
 80049bc:	2e14      	cmp	r6, #20
 80049be:	d802      	bhi.n	80049c6 <_malloc_r+0x1f2>
 80049c0:	0031      	movs	r1, r6
 80049c2:	315b      	adds	r1, #91	; 0x5b
 80049c4:	e7e5      	b.n	8004992 <_malloc_r+0x1be>
 80049c6:	2e54      	cmp	r6, #84	; 0x54
 80049c8:	d802      	bhi.n	80049d0 <_malloc_r+0x1fc>
 80049ca:	0b11      	lsrs	r1, r2, #12
 80049cc:	316e      	adds	r1, #110	; 0x6e
 80049ce:	e7e0      	b.n	8004992 <_malloc_r+0x1be>
 80049d0:	21aa      	movs	r1, #170	; 0xaa
 80049d2:	0049      	lsls	r1, r1, #1
 80049d4:	428e      	cmp	r6, r1
 80049d6:	d802      	bhi.n	80049de <_malloc_r+0x20a>
 80049d8:	0bd1      	lsrs	r1, r2, #15
 80049da:	3177      	adds	r1, #119	; 0x77
 80049dc:	e7d9      	b.n	8004992 <_malloc_r+0x1be>
 80049de:	4f45      	ldr	r7, [pc, #276]	; (8004af4 <_malloc_r+0x320>)
 80049e0:	217e      	movs	r1, #126	; 0x7e
 80049e2:	42be      	cmp	r6, r7
 80049e4:	d8d5      	bhi.n	8004992 <_malloc_r+0x1be>
 80049e6:	0c91      	lsrs	r1, r2, #18
 80049e8:	317c      	adds	r1, #124	; 0x7c
 80049ea:	e7d2      	b.n	8004992 <_malloc_r+0x1be>
 80049ec:	68b6      	ldr	r6, [r6, #8]
 80049ee:	9902      	ldr	r1, [sp, #8]
 80049f0:	42b1      	cmp	r1, r6
 80049f2:	d004      	beq.n	80049fe <_malloc_r+0x22a>
 80049f4:	4660      	mov	r0, ip
 80049f6:	6871      	ldr	r1, [r6, #4]
 80049f8:	4381      	bics	r1, r0
 80049fa:	428a      	cmp	r2, r1
 80049fc:	d3f6      	bcc.n	80049ec <_malloc_r+0x218>
 80049fe:	68f2      	ldr	r2, [r6, #12]
 8004a00:	9202      	str	r2, [sp, #8]
 8004a02:	e7d5      	b.n	80049b0 <_malloc_r+0x1dc>
 8004a04:	2603      	movs	r6, #3
 8004a06:	6867      	ldr	r7, [r4, #4]
 8004a08:	43b7      	bics	r7, r6
 8004a0a:	9703      	str	r7, [sp, #12]
 8004a0c:	1b7e      	subs	r6, r7, r5
 8004a0e:	2e0f      	cmp	r6, #15
 8004a10:	dd11      	ble.n	8004a36 <_malloc_r+0x262>
 8004a12:	2201      	movs	r2, #1
 8004a14:	1963      	adds	r3, r4, r5
 8004a16:	4315      	orrs	r5, r2
 8004a18:	6065      	str	r5, [r4, #4]
 8004a1a:	68e0      	ldr	r0, [r4, #12]
 8004a1c:	68a5      	ldr	r5, [r4, #8]
 8004a1e:	3108      	adds	r1, #8
 8004a20:	60e8      	str	r0, [r5, #12]
 8004a22:	4332      	orrs	r2, r6
 8004a24:	6085      	str	r5, [r0, #8]
 8004a26:	60cb      	str	r3, [r1, #12]
 8004a28:	608b      	str	r3, [r1, #8]
 8004a2a:	60d9      	str	r1, [r3, #12]
 8004a2c:	6099      	str	r1, [r3, #8]
 8004a2e:	605a      	str	r2, [r3, #4]
 8004a30:	003b      	movs	r3, r7
 8004a32:	50e6      	str	r6, [r4, r3]
 8004a34:	e703      	b.n	800483e <_malloc_r+0x6a>
 8004a36:	68e7      	ldr	r7, [r4, #12]
 8004a38:	2e00      	cmp	r6, #0
 8004a3a:	db09      	blt.n	8004a50 <_malloc_r+0x27c>
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	9b03      	ldr	r3, [sp, #12]
 8004a40:	18e3      	adds	r3, r4, r3
 8004a42:	6859      	ldr	r1, [r3, #4]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
 8004a48:	68a3      	ldr	r3, [r4, #8]
 8004a4a:	60df      	str	r7, [r3, #12]
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	e6f6      	b.n	800483e <_malloc_r+0x6a>
 8004a50:	003c      	movs	r4, r7
 8004a52:	e77b      	b.n	800494c <_malloc_r+0x178>
 8004a54:	3808      	subs	r0, #8
 8004a56:	6884      	ldr	r4, [r0, #8]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	42a0      	cmp	r0, r4
 8004a5c:	d082      	beq.n	8004964 <_malloc_r+0x190>
 8004a5e:	e787      	b.n	8004970 <_malloc_r+0x19c>
 8004a60:	2303      	movs	r3, #3
 8004a62:	688f      	ldr	r7, [r1, #8]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	439a      	bics	r2, r3
 8004a68:	9202      	str	r2, [sp, #8]
 8004a6a:	4295      	cmp	r5, r2
 8004a6c:	d803      	bhi.n	8004a76 <_malloc_r+0x2a2>
 8004a6e:	1b52      	subs	r2, r2, r5
 8004a70:	2a0f      	cmp	r2, #15
 8004a72:	dd00      	ble.n	8004a76 <_malloc_r+0x2a2>
 8004a74:	e09f      	b.n	8004bb6 <_malloc_r+0x3e2>
 8004a76:	9b02      	ldr	r3, [sp, #8]
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	9303      	str	r3, [sp, #12]
 8004a7c:	4b1f      	ldr	r3, [pc, #124]	; (8004afc <_malloc_r+0x328>)
 8004a7e:	681e      	ldr	r6, [r3, #0]
 8004a80:	4b1f      	ldr	r3, [pc, #124]	; (8004b00 <_malloc_r+0x32c>)
 8004a82:	3610      	adds	r6, #16
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1976      	adds	r6, r6, r5
 8004a88:	3301      	adds	r3, #1
 8004a8a:	d005      	beq.n	8004a98 <_malloc_r+0x2c4>
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <_malloc_r+0x330>)
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	199e      	adds	r6, r3, r6
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <_malloc_r+0x330>)
 8004a94:	425b      	negs	r3, r3
 8004a96:	401e      	ands	r6, r3
 8004a98:	0031      	movs	r1, r6
 8004a9a:	9801      	ldr	r0, [sp, #4]
 8004a9c:	f000 f8c0 	bl	8004c20 <_sbrk_r>
 8004aa0:	0004      	movs	r4, r0
 8004aa2:	1c43      	adds	r3, r0, #1
 8004aa4:	d05f      	beq.n	8004b66 <_malloc_r+0x392>
 8004aa6:	9b03      	ldr	r3, [sp, #12]
 8004aa8:	4283      	cmp	r3, r0
 8004aaa:	d902      	bls.n	8004ab2 <_malloc_r+0x2de>
 8004aac:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <_malloc_r+0x31c>)
 8004aae:	429f      	cmp	r7, r3
 8004ab0:	d159      	bne.n	8004b66 <_malloc_r+0x392>
 8004ab2:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <_malloc_r+0x334>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	18b1      	adds	r1, r6, r2
 8004ab8:	6019      	str	r1, [r3, #0]
 8004aba:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <_malloc_r+0x330>)
 8004abc:	1e5a      	subs	r2, r3, #1
 8004abe:	9b03      	ldr	r3, [sp, #12]
 8004ac0:	42a3      	cmp	r3, r4
 8004ac2:	d127      	bne.n	8004b14 <_malloc_r+0x340>
 8004ac4:	4213      	tst	r3, r2
 8004ac6:	d125      	bne.n	8004b14 <_malloc_r+0x340>
 8004ac8:	9a02      	ldr	r2, [sp, #8]
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <_malloc_r+0x31c>)
 8004acc:	1992      	adds	r2, r2, r6
 8004ace:	2601      	movs	r6, #1
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	4316      	orrs	r6, r2
 8004ad4:	605e      	str	r6, [r3, #4]
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <_malloc_r+0x334>)
 8004ad8:	4a0c      	ldr	r2, [pc, #48]	; (8004b0c <_malloc_r+0x338>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6811      	ldr	r1, [r2, #0]
 8004ade:	428b      	cmp	r3, r1
 8004ae0:	d900      	bls.n	8004ae4 <_malloc_r+0x310>
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <_malloc_r+0x33c>)
 8004ae6:	6811      	ldr	r1, [r2, #0]
 8004ae8:	428b      	cmp	r3, r1
 8004aea:	d93c      	bls.n	8004b66 <_malloc_r+0x392>
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e03a      	b.n	8004b66 <_malloc_r+0x392>
 8004af0:	20000134 	.word	0x20000134
 8004af4:	00000554 	.word	0x00000554
 8004af8:	000001ff 	.word	0x000001ff
 8004afc:	200042d4 	.word	0x200042d4
 8004b00:	2000053c 	.word	0x2000053c
 8004b04:	00000080 	.word	0x00000080
 8004b08:	200042a4 	.word	0x200042a4
 8004b0c:	200042cc 	.word	0x200042cc
 8004b10:	200042d0 	.word	0x200042d0
 8004b14:	4b2d      	ldr	r3, [pc, #180]	; (8004bcc <_malloc_r+0x3f8>)
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d132      	bne.n	8004b82 <_malloc_r+0x3ae>
 8004b1c:	601c      	str	r4, [r3, #0]
 8004b1e:	2007      	movs	r0, #7
 8004b20:	4020      	ands	r0, r4
 8004b22:	d002      	beq.n	8004b2a <_malloc_r+0x356>
 8004b24:	2308      	movs	r3, #8
 8004b26:	1a18      	subs	r0, r3, r0
 8004b28:	1824      	adds	r4, r4, r0
 8004b2a:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <_malloc_r+0x3fc>)
 8004b2c:	19a6      	adds	r6, r4, r6
 8004b2e:	1818      	adds	r0, r3, r0
 8004b30:	4016      	ands	r6, r2
 8004b32:	1b86      	subs	r6, r0, r6
 8004b34:	0031      	movs	r1, r6
 8004b36:	9801      	ldr	r0, [sp, #4]
 8004b38:	f000 f872 	bl	8004c20 <_sbrk_r>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d101      	bne.n	8004b44 <_malloc_r+0x370>
 8004b40:	0020      	movs	r0, r4
 8004b42:	2600      	movs	r6, #0
 8004b44:	4a23      	ldr	r2, [pc, #140]	; (8004bd4 <_malloc_r+0x400>)
 8004b46:	1b00      	subs	r0, r0, r4
 8004b48:	6813      	ldr	r3, [r2, #0]
 8004b4a:	199b      	adds	r3, r3, r6
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4a21      	ldr	r2, [pc, #132]	; (8004bd8 <_malloc_r+0x404>)
 8004b52:	1986      	adds	r6, r0, r6
 8004b54:	431e      	orrs	r6, r3
 8004b56:	6094      	str	r4, [r2, #8]
 8004b58:	6066      	str	r6, [r4, #4]
 8004b5a:	4297      	cmp	r7, r2
 8004b5c:	d0bb      	beq.n	8004ad6 <_malloc_r+0x302>
 8004b5e:	9a02      	ldr	r2, [sp, #8]
 8004b60:	2a0f      	cmp	r2, #15
 8004b62:	d814      	bhi.n	8004b8e <_malloc_r+0x3ba>
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	2203      	movs	r2, #3
 8004b68:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <_malloc_r+0x404>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	4393      	bics	r3, r2
 8004b70:	1b5a      	subs	r2, r3, r5
 8004b72:	429d      	cmp	r5, r3
 8004b74:	d801      	bhi.n	8004b7a <_malloc_r+0x3a6>
 8004b76:	2a0f      	cmp	r2, #15
 8004b78:	dc1d      	bgt.n	8004bb6 <_malloc_r+0x3e2>
 8004b7a:	9801      	ldr	r0, [sp, #4]
 8004b7c:	f000 f848 	bl	8004c10 <__malloc_unlock>
 8004b80:	e635      	b.n	80047ee <_malloc_r+0x1a>
 8004b82:	9b03      	ldr	r3, [sp, #12]
 8004b84:	1ae3      	subs	r3, r4, r3
 8004b86:	185b      	adds	r3, r3, r1
 8004b88:	4912      	ldr	r1, [pc, #72]	; (8004bd4 <_malloc_r+0x400>)
 8004b8a:	600b      	str	r3, [r1, #0]
 8004b8c:	e7c7      	b.n	8004b1e <_malloc_r+0x34a>
 8004b8e:	2207      	movs	r2, #7
 8004b90:	9e02      	ldr	r6, [sp, #8]
 8004b92:	3e0c      	subs	r6, #12
 8004b94:	4396      	bics	r6, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2205      	movs	r2, #5
 8004b9c:	4333      	orrs	r3, r6
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	19bb      	adds	r3, r7, r6
 8004ba2:	605a      	str	r2, [r3, #4]
 8004ba4:	609a      	str	r2, [r3, #8]
 8004ba6:	2e0f      	cmp	r6, #15
 8004ba8:	d995      	bls.n	8004ad6 <_malloc_r+0x302>
 8004baa:	0039      	movs	r1, r7
 8004bac:	9801      	ldr	r0, [sp, #4]
 8004bae:	3108      	adds	r1, #8
 8004bb0:	f000 f89c 	bl	8004cec <_free_r>
 8004bb4:	e78f      	b.n	8004ad6 <_malloc_r+0x302>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	0018      	movs	r0, r3
 8004bba:	4907      	ldr	r1, [pc, #28]	; (8004bd8 <_malloc_r+0x404>)
 8004bbc:	4328      	orrs	r0, r5
 8004bbe:	688c      	ldr	r4, [r1, #8]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	1965      	adds	r5, r4, r5
 8004bc4:	6060      	str	r0, [r4, #4]
 8004bc6:	608d      	str	r5, [r1, #8]
 8004bc8:	606b      	str	r3, [r5, #4]
 8004bca:	e638      	b.n	800483e <_malloc_r+0x6a>
 8004bcc:	2000053c 	.word	0x2000053c
 8004bd0:	00000080 	.word	0x00000080
 8004bd4:	200042a4 	.word	0x200042a4
 8004bd8:	20000134 	.word	0x20000134

08004bdc <memcpy>:
 8004bdc:	2300      	movs	r3, #0
 8004bde:	b510      	push	{r4, lr}
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d100      	bne.n	8004be6 <memcpy+0xa>
 8004be4:	bd10      	pop	{r4, pc}
 8004be6:	5ccc      	ldrb	r4, [r1, r3]
 8004be8:	54c4      	strb	r4, [r0, r3]
 8004bea:	3301      	adds	r3, #1
 8004bec:	e7f8      	b.n	8004be0 <memcpy+0x4>

08004bee <memset>:
 8004bee:	0003      	movs	r3, r0
 8004bf0:	1882      	adds	r2, r0, r2
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d100      	bne.n	8004bf8 <memset+0xa>
 8004bf6:	4770      	bx	lr
 8004bf8:	7019      	strb	r1, [r3, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	e7f9      	b.n	8004bf2 <memset+0x4>
	...

08004c00 <__malloc_lock>:
 8004c00:	b510      	push	{r4, lr}
 8004c02:	4802      	ldr	r0, [pc, #8]	; (8004c0c <__malloc_lock+0xc>)
 8004c04:	f000 f926 	bl	8004e54 <__retarget_lock_acquire_recursive>
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	20004bd8 	.word	0x20004bd8

08004c10 <__malloc_unlock>:
 8004c10:	b510      	push	{r4, lr}
 8004c12:	4802      	ldr	r0, [pc, #8]	; (8004c1c <__malloc_unlock+0xc>)
 8004c14:	f000 f91f 	bl	8004e56 <__retarget_lock_release_recursive>
 8004c18:	bd10      	pop	{r4, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	20004bd8 	.word	0x20004bd8

08004c20 <_sbrk_r>:
 8004c20:	2300      	movs	r3, #0
 8004c22:	b570      	push	{r4, r5, r6, lr}
 8004c24:	4c06      	ldr	r4, [pc, #24]	; (8004c40 <_sbrk_r+0x20>)
 8004c26:	0005      	movs	r5, r0
 8004c28:	0008      	movs	r0, r1
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	f7fc fac0 	bl	80011b0 <_sbrk>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d103      	bne.n	8004c3c <_sbrk_r+0x1c>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d000      	beq.n	8004c3c <_sbrk_r+0x1c>
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	bd70      	pop	{r4, r5, r6, pc}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	20004be0 	.word	0x20004be0

08004c44 <_malloc_trim_r>:
 8004c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c46:	4f25      	ldr	r7, [pc, #148]	; (8004cdc <_malloc_trim_r+0x98>)
 8004c48:	000c      	movs	r4, r1
 8004c4a:	0005      	movs	r5, r0
 8004c4c:	f7ff ffd8 	bl	8004c00 <__malloc_lock>
 8004c50:	0038      	movs	r0, r7
 8004c52:	2203      	movs	r2, #3
 8004c54:	4e22      	ldr	r6, [pc, #136]	; (8004ce0 <_malloc_trim_r+0x9c>)
 8004c56:	3811      	subs	r0, #17
 8004c58:	68b3      	ldr	r3, [r6, #8]
 8004c5a:	1b00      	subs	r0, r0, r4
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	0039      	movs	r1, r7
 8004c60:	4393      	bics	r3, r2
 8004c62:	18c0      	adds	r0, r0, r3
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	f7fb fa71 	bl	800014c <__udivsi3>
 8004c6a:	1e44      	subs	r4, r0, #1
 8004c6c:	437c      	muls	r4, r7
 8004c6e:	42bc      	cmp	r4, r7
 8004c70:	da04      	bge.n	8004c7c <_malloc_trim_r+0x38>
 8004c72:	0028      	movs	r0, r5
 8004c74:	f7ff ffcc 	bl	8004c10 <__malloc_unlock>
 8004c78:	2000      	movs	r0, #0
 8004c7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	0028      	movs	r0, r5
 8004c80:	f7ff ffce 	bl	8004c20 <_sbrk_r>
 8004c84:	68b3      	ldr	r3, [r6, #8]
 8004c86:	9a01      	ldr	r2, [sp, #4]
 8004c88:	189b      	adds	r3, r3, r2
 8004c8a:	4298      	cmp	r0, r3
 8004c8c:	d1f1      	bne.n	8004c72 <_malloc_trim_r+0x2e>
 8004c8e:	4261      	negs	r1, r4
 8004c90:	0028      	movs	r0, r5
 8004c92:	f7ff ffc5 	bl	8004c20 <_sbrk_r>
 8004c96:	1c43      	adds	r3, r0, #1
 8004c98:	d110      	bne.n	8004cbc <_malloc_trim_r+0x78>
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	0028      	movs	r0, r5
 8004c9e:	f7ff ffbf 	bl	8004c20 <_sbrk_r>
 8004ca2:	68b2      	ldr	r2, [r6, #8]
 8004ca4:	1a81      	subs	r1, r0, r2
 8004ca6:	290f      	cmp	r1, #15
 8004ca8:	dde3      	ble.n	8004c72 <_malloc_trim_r+0x2e>
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <_malloc_trim_r+0xa0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	1ac0      	subs	r0, r0, r3
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <_malloc_trim_r+0xa4>)
 8004cb2:	6018      	str	r0, [r3, #0]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	6053      	str	r3, [r2, #4]
 8004cba:	e7da      	b.n	8004c72 <_malloc_trim_r+0x2e>
 8004cbc:	68b2      	ldr	r2, [r6, #8]
 8004cbe:	2601      	movs	r6, #1
 8004cc0:	9b01      	ldr	r3, [sp, #4]
 8004cc2:	0028      	movs	r0, r5
 8004cc4:	1b1b      	subs	r3, r3, r4
 8004cc6:	4333      	orrs	r3, r6
 8004cc8:	6053      	str	r3, [r2, #4]
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <_malloc_trim_r+0xa4>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	1b14      	subs	r4, r2, r4
 8004cd0:	601c      	str	r4, [r3, #0]
 8004cd2:	f7ff ff9d 	bl	8004c10 <__malloc_unlock>
 8004cd6:	0030      	movs	r0, r6
 8004cd8:	e7cf      	b.n	8004c7a <_malloc_trim_r+0x36>
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	00000080 	.word	0x00000080
 8004ce0:	20000134 	.word	0x20000134
 8004ce4:	2000053c 	.word	0x2000053c
 8004ce8:	200042a4 	.word	0x200042a4

08004cec <_free_r>:
 8004cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cee:	1e0d      	subs	r5, r1, #0
 8004cf0:	9001      	str	r0, [sp, #4]
 8004cf2:	d02d      	beq.n	8004d50 <_free_r+0x64>
 8004cf4:	f7ff ff84 	bl	8004c00 <__malloc_lock>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	0029      	movs	r1, r5
 8004cfc:	469c      	mov	ip, r3
 8004cfe:	3908      	subs	r1, #8
 8004d00:	684f      	ldr	r7, [r1, #4]
 8004d02:	4662      	mov	r2, ip
 8004d04:	003b      	movs	r3, r7
 8004d06:	4666      	mov	r6, ip
 8004d08:	4393      	bics	r3, r2
 8004d0a:	18c8      	adds	r0, r1, r3
 8004d0c:	6845      	ldr	r5, [r0, #4]
 8004d0e:	3202      	adds	r2, #2
 8004d10:	4395      	bics	r5, r2
 8004d12:	4a4a      	ldr	r2, [pc, #296]	; (8004e3c <_free_r+0x150>)
 8004d14:	4037      	ands	r7, r6
 8004d16:	6896      	ldr	r6, [r2, #8]
 8004d18:	42b0      	cmp	r0, r6
 8004d1a:	d11a      	bne.n	8004d52 <_free_r+0x66>
 8004d1c:	195b      	adds	r3, r3, r5
 8004d1e:	2f00      	cmp	r7, #0
 8004d20:	d106      	bne.n	8004d30 <_free_r+0x44>
 8004d22:	6808      	ldr	r0, [r1, #0]
 8004d24:	1a09      	subs	r1, r1, r0
 8004d26:	688d      	ldr	r5, [r1, #8]
 8004d28:	181b      	adds	r3, r3, r0
 8004d2a:	68c8      	ldr	r0, [r1, #12]
 8004d2c:	60e8      	str	r0, [r5, #12]
 8004d2e:	6085      	str	r5, [r0, #8]
 8004d30:	2001      	movs	r0, #1
 8004d32:	4318      	orrs	r0, r3
 8004d34:	6048      	str	r0, [r1, #4]
 8004d36:	6091      	str	r1, [r2, #8]
 8004d38:	4a41      	ldr	r2, [pc, #260]	; (8004e40 <_free_r+0x154>)
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d304      	bcc.n	8004d4a <_free_r+0x5e>
 8004d40:	4b40      	ldr	r3, [pc, #256]	; (8004e44 <_free_r+0x158>)
 8004d42:	9801      	ldr	r0, [sp, #4]
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	f7ff ff7d 	bl	8004c44 <_malloc_trim_r>
 8004d4a:	9801      	ldr	r0, [sp, #4]
 8004d4c:	f7ff ff60 	bl	8004c10 <__malloc_unlock>
 8004d50:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004d52:	2600      	movs	r6, #0
 8004d54:	6045      	str	r5, [r0, #4]
 8004d56:	42b7      	cmp	r7, r6
 8004d58:	d109      	bne.n	8004d6e <_free_r+0x82>
 8004d5a:	680f      	ldr	r7, [r1, #0]
 8004d5c:	4c3a      	ldr	r4, [pc, #232]	; (8004e48 <_free_r+0x15c>)
 8004d5e:	1bc9      	subs	r1, r1, r7
 8004d60:	19db      	adds	r3, r3, r7
 8004d62:	688f      	ldr	r7, [r1, #8]
 8004d64:	42a7      	cmp	r7, r4
 8004d66:	d02b      	beq.n	8004dc0 <_free_r+0xd4>
 8004d68:	68cc      	ldr	r4, [r1, #12]
 8004d6a:	60fc      	str	r4, [r7, #12]
 8004d6c:	60a7      	str	r7, [r4, #8]
 8004d6e:	1947      	adds	r7, r0, r5
 8004d70:	687c      	ldr	r4, [r7, #4]
 8004d72:	2701      	movs	r7, #1
 8004d74:	423c      	tst	r4, r7
 8004d76:	d10b      	bne.n	8004d90 <_free_r+0xa4>
 8004d78:	195b      	adds	r3, r3, r5
 8004d7a:	6885      	ldr	r5, [r0, #8]
 8004d7c:	2e00      	cmp	r6, #0
 8004d7e:	d121      	bne.n	8004dc4 <_free_r+0xd8>
 8004d80:	4c31      	ldr	r4, [pc, #196]	; (8004e48 <_free_r+0x15c>)
 8004d82:	42a5      	cmp	r5, r4
 8004d84:	d11e      	bne.n	8004dc4 <_free_r+0xd8>
 8004d86:	003e      	movs	r6, r7
 8004d88:	6151      	str	r1, [r2, #20]
 8004d8a:	6111      	str	r1, [r2, #16]
 8004d8c:	60cd      	str	r5, [r1, #12]
 8004d8e:	608d      	str	r5, [r1, #8]
 8004d90:	2001      	movs	r0, #1
 8004d92:	0005      	movs	r5, r0
 8004d94:	431d      	orrs	r5, r3
 8004d96:	604d      	str	r5, [r1, #4]
 8004d98:	50cb      	str	r3, [r1, r3]
 8004d9a:	2e00      	cmp	r6, #0
 8004d9c:	d1d5      	bne.n	8004d4a <_free_r+0x5e>
 8004d9e:	4d2b      	ldr	r5, [pc, #172]	; (8004e4c <_free_r+0x160>)
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	d813      	bhi.n	8004dcc <_free_r+0xe0>
 8004da4:	08db      	lsrs	r3, r3, #3
 8004da6:	109d      	asrs	r5, r3, #2
 8004da8:	40a8      	lsls	r0, r5
 8004daa:	6854      	ldr	r4, [r2, #4]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4320      	orrs	r0, r4
 8004db0:	6050      	str	r0, [r2, #4]
 8004db2:	189a      	adds	r2, r3, r2
 8004db4:	6893      	ldr	r3, [r2, #8]
 8004db6:	60ca      	str	r2, [r1, #12]
 8004db8:	608b      	str	r3, [r1, #8]
 8004dba:	6091      	str	r1, [r2, #8]
 8004dbc:	60d9      	str	r1, [r3, #12]
 8004dbe:	e7c4      	b.n	8004d4a <_free_r+0x5e>
 8004dc0:	4666      	mov	r6, ip
 8004dc2:	e7d4      	b.n	8004d6e <_free_r+0x82>
 8004dc4:	68c0      	ldr	r0, [r0, #12]
 8004dc6:	60e8      	str	r0, [r5, #12]
 8004dc8:	6085      	str	r5, [r0, #8]
 8004dca:	e7e1      	b.n	8004d90 <_free_r+0xa4>
 8004dcc:	0a5d      	lsrs	r5, r3, #9
 8004dce:	2d04      	cmp	r5, #4
 8004dd0:	d812      	bhi.n	8004df8 <_free_r+0x10c>
 8004dd2:	0998      	lsrs	r0, r3, #6
 8004dd4:	3038      	adds	r0, #56	; 0x38
 8004dd6:	00c6      	lsls	r6, r0, #3
 8004dd8:	18b6      	adds	r6, r6, r2
 8004dda:	68b5      	ldr	r5, [r6, #8]
 8004ddc:	2703      	movs	r7, #3
 8004dde:	42ae      	cmp	r6, r5
 8004de0:	d125      	bne.n	8004e2e <_free_r+0x142>
 8004de2:	2301      	movs	r3, #1
 8004de4:	1080      	asrs	r0, r0, #2
 8004de6:	4083      	lsls	r3, r0
 8004de8:	6850      	ldr	r0, [r2, #4]
 8004dea:	4303      	orrs	r3, r0
 8004dec:	6053      	str	r3, [r2, #4]
 8004dee:	60ce      	str	r6, [r1, #12]
 8004df0:	608d      	str	r5, [r1, #8]
 8004df2:	60b1      	str	r1, [r6, #8]
 8004df4:	60e9      	str	r1, [r5, #12]
 8004df6:	e7a8      	b.n	8004d4a <_free_r+0x5e>
 8004df8:	2d14      	cmp	r5, #20
 8004dfa:	d802      	bhi.n	8004e02 <_free_r+0x116>
 8004dfc:	0028      	movs	r0, r5
 8004dfe:	305b      	adds	r0, #91	; 0x5b
 8004e00:	e7e9      	b.n	8004dd6 <_free_r+0xea>
 8004e02:	2d54      	cmp	r5, #84	; 0x54
 8004e04:	d802      	bhi.n	8004e0c <_free_r+0x120>
 8004e06:	0b18      	lsrs	r0, r3, #12
 8004e08:	306e      	adds	r0, #110	; 0x6e
 8004e0a:	e7e4      	b.n	8004dd6 <_free_r+0xea>
 8004e0c:	20aa      	movs	r0, #170	; 0xaa
 8004e0e:	0040      	lsls	r0, r0, #1
 8004e10:	4285      	cmp	r5, r0
 8004e12:	d802      	bhi.n	8004e1a <_free_r+0x12e>
 8004e14:	0bd8      	lsrs	r0, r3, #15
 8004e16:	3077      	adds	r0, #119	; 0x77
 8004e18:	e7dd      	b.n	8004dd6 <_free_r+0xea>
 8004e1a:	4e0d      	ldr	r6, [pc, #52]	; (8004e50 <_free_r+0x164>)
 8004e1c:	207e      	movs	r0, #126	; 0x7e
 8004e1e:	42b5      	cmp	r5, r6
 8004e20:	d8d9      	bhi.n	8004dd6 <_free_r+0xea>
 8004e22:	0c98      	lsrs	r0, r3, #18
 8004e24:	307c      	adds	r0, #124	; 0x7c
 8004e26:	e7d6      	b.n	8004dd6 <_free_r+0xea>
 8004e28:	68ad      	ldr	r5, [r5, #8]
 8004e2a:	42ae      	cmp	r6, r5
 8004e2c:	d003      	beq.n	8004e36 <_free_r+0x14a>
 8004e2e:	686a      	ldr	r2, [r5, #4]
 8004e30:	43ba      	bics	r2, r7
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d3f8      	bcc.n	8004e28 <_free_r+0x13c>
 8004e36:	68ee      	ldr	r6, [r5, #12]
 8004e38:	e7d9      	b.n	8004dee <_free_r+0x102>
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	20000134 	.word	0x20000134
 8004e40:	20000540 	.word	0x20000540
 8004e44:	200042d4 	.word	0x200042d4
 8004e48:	2000013c 	.word	0x2000013c
 8004e4c:	000001ff 	.word	0x000001ff
 8004e50:	00000554 	.word	0x00000554

08004e54 <__retarget_lock_acquire_recursive>:
 8004e54:	4770      	bx	lr

08004e56 <__retarget_lock_release_recursive>:
 8004e56:	4770      	bx	lr

08004e58 <_init>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr

08004e64 <_fini>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6a:	bc08      	pop	{r3}
 8004e6c:	469e      	mov	lr, r3
 8004e6e:	4770      	bx	lr
